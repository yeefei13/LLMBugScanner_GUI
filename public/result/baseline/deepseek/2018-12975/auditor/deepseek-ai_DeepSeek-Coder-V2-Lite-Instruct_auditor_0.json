 {
    "output_list": [
        {
            "function_name": "mint",
            "vulnerability": "Integer Overflow",
            "function_code": "function mint(address _to, uint256 _amount) onlyAccessMint public returns (bool) {
    totalSupply_ = totalSupply_.add(_amount);
    balances[_to] = balances[_to].add(_amount);
    Mint(_to, _amount);
    Transfer(address(0), _to, _amount);
    return true;
  }
",
            "reason": "The function `mint` does not properly check for overflow when updating the `totalSupply_` and `balances` variables. This can lead to an integer overflow, allowing an attacker to mint an arbitrary amount of tokens."
        },
        {
            "function_name": "addExp",
            "vulnerability": "Integer Overflow",
            "function_code": "function addExp(uint256 _tokenId, uint32 _exp) onlyAccessDeploy public returns (bool) {
    require(ownerOf(_tokenId) != address(0));
    var _heroInstance = tokenIdToHeroInstance[_tokenId];
    var _newExp = _heroInstance.currentExp + _exp;
    require(_newExp == uint256(uint128(_newExp)));
    _heroInstance.currentExp += _newExp;
  }
",
            "reason": "The function `addExp` does not properly check for overflow when updating the `currentExp` variable. This can lead to an integer overflow, allowing an attacker to manipulate the experience points of a hero instance."
        },
        {
            "function_name": "levelUp",
            "vulnerability": "Integer Overflow",
            "function_code": "function levelUp(uint256 _tokenId) onlyOwnerOf(_tokenId) whenNotPaused public {
    var _heroInstance = tokenIdToHeroInstance[_tokenId];
    require(_heroInstance.availableAt <= now);
    var _heroClassInfo = heroClasses[_heroInstance.heroClassId];
    require(_heroInstance.currentLevel < _heroClassInfo.maxLevel);
    var requiredExp = getHeroRequiredExpForLevelUp(_tokenId);
    require(_heroInstance.currentExp >= requiredExp);
    var requiredGold = getHeroRequiredGoldForLevelUp(_tokenId);
    var _ownerOfToken = ownerOf(_tokenId);
    require(addressToGoldDeposit[_ownerOfToken] >= requiredGold);
    _heroInstance.currentLevel += 1;
    for (uint8 i = 0; i < 5; i++) {
      _heroInstance.currentStats[i] = _heroClassInfo.baseStats[i] + (_heroInstance.currentLevel - 1) * _heroInstance.ivForStats[i];
    }
    _heroInstance.currentExp -= requiredExp;
    addressToGoldDeposit[_ownerOfToken] -= requiredGold;
    LevelUp(msg.sender, _tokenId, _heroInstance.currentLevel);
  }
",
            "reason": "The function `levelUp` does not properly check for overflow when updating the `currentLevel`, `currentExp`, and `addressToGoldDeposit` variables. This can lead to an integer overflow, allowing an attacker to bypass level up requirements."
        }
    ]
}