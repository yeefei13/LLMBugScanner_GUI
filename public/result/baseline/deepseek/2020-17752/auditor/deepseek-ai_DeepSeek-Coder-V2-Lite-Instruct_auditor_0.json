 {
    "output_list": [
        {
            "function_name": "mint",
            "vulnerability": "Token Devalue",
            "function_code": "function mint(address _to, uint256 _amount) canMint internal returns (bool) {
    _amount = _amount.div(10**10);
    if(totalSupply.add(_amount)<maxTokenSupply){
      super.mint(_to,_amount.mul(75).div(100));
      super.mint(address(beneficiary),_amount.mul(25).div(100));
      return true;
    }
    else{
      return false; 
    }
    return true;
  }",
            "reason": "The mint function allows the owner to mint new tokens, but the token supply is not properly checked before minting. This can lead to the tokens being minted beyond the intended supply limit, devaluing the token."
        },
        {
            "function_name": "MON",
            "vulnerability": "Typo Constructor",
            "function_code": "function MON(address _benef,uint256 _start,uint256 _sumMul,uint256 _period) public{
     beneficiary = _benef;
     if(_start==0){
         start = GetNow();
     }else{
         start = _start;
     }
     if(_period!=0){
         period = _period;
     }
     if(_sumMul!=0){
         sumMultiplayer = _sumMul;
     }
     stageDataStore.push(StageData(uint128(start+period*151),uint64(50*sumMultiplayer),uint64(5000)));
     stageDataStore.push(StageData(uint128(start+period*243),uint64(60*sumMultiplayer),uint64(3000)));
     stageDataStore.push(StageData(uint128(start+period*334),uint64(50*sumMultiplayer),uint64(1666)));
     stageDataStore.push(StageData(uint128(start+period*455),uint64(60*sumMultiplayer),uint64(1500)));
     stageDataStore.push(StageData(uint128(start+period*548),uint64(65*sumMultiplayer),uint64(1444)));
     stageDataStore.push(StageData(uint128(start+period*641),uint64(55*sumMultiplayer),uint64(1000)));
 }",
            "reason": "There is a typo in the constructor function where `start` is set to `GetNow()` instead of `_start`. This can lead to unintended behavior and potential security issues."
        },
        {
            "function_name": "mintCoins",
            "vulnerability": "Token Devalue",
            "function_code": "function mintCoins(address _to, uint256 _amount)  canMint internal returns (bool) {
    _amount = _amount.div(10**10);
    if(totalSupply.add(_amount)<maxTokenSupply){
      super.mint(_to,_amount.mul(75).div(100));
      super.mint(address(beneficiary),_amount.mul(25).div(100));
      return true;
    }
    else{
      return false; 
    }
    return true;
  }",
            "reason": "Similar to the mint function, this function allows minting new tokens but does not properly check the total supply, which can lead to tokens being minted beyond the intended supply limit, devaluing the token."
        },
        {
            "function_name": "()",
            "vulnerability": "Access Control",
            "function_code": "function () public payable {
    uint256  status = 0;
    status = 0;
    bool transferToBenef = false;
    uint256  amountOfEthBeforeBuy = 0;
    uint256  stageMaxEthAmount = 0;
    uint128 _n = uint128(GetNow());
    StageData memory currS = stageDataStore[stageIndex] ;
    if(_n<start){
        revert();
    }
    if(this.balance <msg.value){
       amountOfEthBeforeBuy =0 ;
    }
    else{
       amountOfEthBeforeBuy = this.balance - msg.value;
    }
    stageMaxEthAmount = uint256(currS.stageSum)*(10**18)/currS.stagePrice;
        uint256 amountToReturn =0;
        uint256 amountToMint =0;
        Buy memory b = stageBuys[msg.sender];
    if(currS.stageTime<_n && amountOfEthBeforeBuy<stageMaxEthAmount){
        status = 1;
        amountToReturn = msg.value;
        if(b.stage==stageIndex){
            amountToReturn = amountToReturn.add(b.amountOfEth);
            if(b.amountOfEth>0){
               burn(msg.sender,b.amountOfEth.mul(currS.stagePrice));
            }
        }
        b.amountOfEth=0;
        mintingFinished = true;
        msg.sender.transfer(amountToReturn);
    }else{
        status = 2;
        if(b.stage!=stageIndex){
            b.stage = uint128(stageIndex);
            b.amountOfEth = 0;
            status = status*10+3;
        }
        if(currS.stageTime>_n &&  this.balance < stageMaxEthAmount){
            b.amountOfEth = uint128(b.amountOfEth.add(uint128(msg.value)));
           amountToMint = msg.value*currS.stagePrice;
           status = status*10+4;
           mintCoins(msg.sender,amountToMint);
        }else{
            if( this.balance >=stageMaxEthAmount){
               status = status*10+5;
                transferToBenef = true;
               amountToMint = (stageMaxEthAmount - amountOfEthBeforeBuy)*(currS.stagePrice);
               mintCoins(msg.sender,amountToMint);
               stageIndex = stageIndex+1;
               beneficiary.transfer(stageMaxEthAmount);
               stageMaxEthAmount =  GetMaxStageEthAmount();
               if(stageIndex<5 && stageMaxEthAmount>this.balance){
                   currS = stageDataStore[stageIndex] ;
                   amountToMint = this.balance*(currS.stagePrice);
                   b.stage = uint128(stageIndex);
                   b.amountOfEth =uint128(this.balance);
                   mintCoins(msg.sender,amountToMint);
               }else{
                   status = status*10+8;
                   amountToReturn = this.balance;
                   msg.sender.transfer(amountToReturn);
               }
            }else{
               status = status*10+6;
            }
        }
    }
    stageBuys[msg.sender] = b;
    BuyStatus(status);
}",
            "reason": "The fallback function allows anyone to interact with the contract, including transferring tokens and minting new ones. This can be exploited if the attacker can front-run a minting transaction, leading to unauthorized minting of tokens."
        }
    ]
}