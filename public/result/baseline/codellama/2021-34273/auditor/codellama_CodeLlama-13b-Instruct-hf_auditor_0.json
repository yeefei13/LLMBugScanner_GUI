 Here are the 5 most severe vulnerabilities in the provided smart contract, along with their associated functions and reasons:

1. Integer Overflow Vulnerability in the `transfer` Function

Function Name: `transfer`

Vulnerability: Integer Overflow

Function Code:
```
function transfer(address _to, uint256 _value) returns (bool success) {
    if (balances[msg.sender] >= _value && _value > 0) {
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    } else {
        return false;
    }
}
```
Reason: The `transfer` function uses the `balances` mapping to check if the sender has enough balance to transfer the tokens. However, the function does not check if the sender's balance is greater than the maximum value of a `uint256` variable, which can lead to an integer overflow. This can cause the function to return an incorrect result, potentially allowing an attacker to transfer more tokens than they are supposed to.

2. Wrong Logic Vulnerability in the `transferFrom` Function

Function Name: `transferFrom`

Vulnerability: Wrong Logic

Function Code:
```
function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
        balances[_to] += _value;
        balances[_from] -= _value;
        allowed[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    } else {
        return false;
    }
}
```
Reason: The `transferFrom` function uses the `allowed` mapping to check if the sender is allowed to transfer the tokens. However, the function does not check if the sender's balance is greater than the maximum value of a `uint256` variable, which can lead to an integer overflow. This can cause the function to return an incorrect result, potentially allowing an attacker to transfer more tokens than they are supposed to.

3. Bad Randomness Vulnerability in the `distributeToken` Function

Function Name: `distributeToken`

Vulnerability: Bad Randomness

Function Code:
```
function distributeToken(address[] addresses, uint256 _value) {
    for (uint i = 0; i < addresses.length; i++) {
        balances[msg.sender] -= _value;
        balances[addresses[i]] += _value;
        Transfer(msg.sender, addresses[i], _value);
    }
}
```
Reason: The `distributeToken` function uses a for loop to transfer tokens to multiple addresses. However, the function does not use a secure random number generator to select the addresses, which can lead to a bias in the distribution of tokens. This can cause the function to transfer tokens to a subset of addresses, potentially allowing an attacker to manipulate the distribution of tokens.

4. Access Control Vulnerability in the `transfer` Function

Function Name: `transfer`

Vulnerability: Access Control

Function Code:
```
function transfer(address _to, uint256 _value) returns (bool success) {
    if (balances[msg.sender] >= _value && _value > 0) {
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    } else {
        return false;
    }
}
```
Reason: The `transfer` function uses the `balances` mapping to check if the sender has enough balance to transfer the tokens. However, the function does not check if the sender is allowed to transfer the tokens, which can lead to an access control vulnerability. This can cause the function to transfer tokens to an unauthorized address, potentially allowing an attacker to manipulate the transfer of tokens.

5. Typo Constructor Vulnerability in the `B2X` Contract

Contract Name: `B2X`

Vulnerability: Typo Constructor

Contract Code:
```
contract B2X is StandardToken {
    function () {
        throw;
    }
    string public name;                   
    uint8 public decimals;                
    string public symbol;                 
    function B2X(
        ) {
        totalSupply = 21 * 10 ** 14;
        balances[msg.sender] = totalSupply;              
        name = "BTC2X";                                   
        decimals = 8;                            
        symbol = "B2X";                               
    }
}
```
Reason: The `B2X` contract uses a constructor to initialize the token's properties. However, the constructor contains a typo in the `totalSupply` variable, which can lead to an incorrect initialization of the token's supply. This can cause the token to have an incorrect supply, potentially allowing an attacker to manipulate the supply of tokens.

Note: These vulnerabilities are not exploitable in the provided code, but they can be exploited in real-world scenarios.