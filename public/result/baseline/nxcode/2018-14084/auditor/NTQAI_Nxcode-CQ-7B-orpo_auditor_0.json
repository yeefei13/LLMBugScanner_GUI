{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); }",
            "reason": "The transfer function does not check if the recipient balance will overflow. If the recipient balance is greater than the maximum possible value for a uint256, the transfer will fail. This can be exploited by a malicious user to cause the contract to lose all its tokens."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]);     allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; }",
            "reason": "The transferFrom function does not check if the recipient balance will overflow. If the recipient balance is greater than the maximum possible value for a uint256, the transfer will fail. This can be exploited by a malicious user to cause the contract to lose all its tokens."
        },
        {
            "function_name": "burn",
            "vulnerability": "Integer Overflow",
            "function_code": "function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value);   balanceOf[msg.sender] -= _value;            totalSupply -= _value;                      Burn(msg.sender, _value); return true; }",
            "reason": "The burn function does not check if the contract's total supply will overflow. If the total supply is greater than the maximum possible value for a uint256, the burn will fail. This can be exploited by a malicious user to cause the contract to lose all its tokens."
        },
        {
            "function_name": "burnFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] >= _value);                require(_value <= allowance[_from][msg.sender]);    balanceOf[_from] -= _value;            allowance[_from][msg.sender] -= _value;             totalSupply -= _value;                              Burn(_from, _value); return true; }",
            "reason": "The burnFrom function does not check if the contract's total supply will overflow. If the total supply is greater than the maximum possible value for a uint256, the burn will fail. This can be exploited by a malicious user to cause the contract to lose all its tokens."
        },
        {
            "function_name": "selfdestructs",
            "vulnerability": "Access Control",
            "function_code": "function selfdestructs() payable public { selfdestruct(owner); }",
            "reason": "The selfdestructs function is public and can be called by anyone. This means that anyone can cause the contract to self-destruct, which can lead to the loss of all its tokens and ether. This is a serious security vulnerability that should be addressed immediately."
        }
    ]
}