{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) public { uint market_value = _value * sellPrice; uint commission = market_value * 4 / 1000; if (commission < minimumCommission){ commission = minimumCommission; } address contr = this; require(contr.balance >= commission); commissionGetter.transfer(commission); _transfer(msg.sender, _to, _value); }",
            "reason": "The transfer function is vulnerable to integer overflow. The market_value variable is calculated by multiplying the _value with sellPrice, which can result in an overflow if the _value is too large. This can be exploited by an attacker to transfer more tokens than they have, leading to a loss of funds."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]); uint market_value = _value * sellPrice; uint commission = market_value * 4 / 1000; if (commission < minimumCommission){ commission = minimumCommission; } address contr = this; require(contr.balance >= commission); commissionGetter.transfer(commission); allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; }",
            "reason": "The transferFrom function is also vulnerable to integer overflow. The market_value variable is calculated by multiplying the _value with sellPrice, which can result in an overflow if the _value is too large. This can be exploited by an attacker to transfer more tokens than they have, leading to a loss of funds."
        },
        {
            "function_name": "buy",
            "vulnerability": "Integer Overflow",
            "function_code": "function buy() payable public { require(!closeBuy); uint amount = msg.value / buyPrice; uint market_value = amount * buyPrice; uint commission = market_value * 4 / 1000; if (commission < minimumCommission){ commission = minimumCommission; } address contr = this; require(contr.balance >= commission); commissionGetter.transfer(commission); _transfer(this, msg.sender, amount); }",
            "reason": "The buy function is vulnerable to integer overflow. The market_value variable is calculated by multiplying the amount with buyPrice, which can result in an overflow if the amount is too large. This can be exploited by an attacker to buy more tokens than they have, leading to a loss of funds."
        },
        {
            "function_name": "sell",
            "vulnerability": "Integer Overflow",
            "function_code": "function sell(uint256 amount) public { require(!closeSell); address contr = this; uint market_value = amount * sellPrice; uint commission = market_value * 4 / 1000; if (commission < minimumCommission){ commission = minimumCommission; } uint amount_weis = market_value + commission; require(contr.balance >= amount_weis); commissionGetter.transfer(commission); _transfer(msg.sender, this, amount); msg.sender.transfer(market_value); }",
            "reason": "The sell function is vulnerable to integer overflow. The market_value variable is calculated by multiplying the amount with sellPrice, which can result in an overflow if the amount is too large. This can be exploited by an attacker to sell more tokens than they have, leading to a loss of funds."
        },
        {
            "function_name": "constructor",
            "vulnerability": "Typo Constructor",
            "function_code": "function ALUXToken(uint256 initialSupply, string tokenName, string tokenSymbol) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",
            "reason": "The constructor function has a typo in the function name. The correct function name should be 'ALUXToken', not 'ALUXToken'. This typo can lead to confusion and potential errors in the code."
        }
    ]
}