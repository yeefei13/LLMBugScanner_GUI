{
    "output_list": [
        {
            "function_name": "EAI_TokenERC20",
            "vulnerability": "Integer Overflow",
            "function_code": "function EAI_TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",
            "reason": "The initialSupply is multiplied by 10^8, which could potentially cause an integer overflow if initialSupply is too large. This could lead to the totalSupply being less than the actual amount of tokens created, which could be exploited by attackers."
        },
        {
            "function_name": "_transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balanceOf[_from] >= _value); require(balanceOf[_to] + _value >= balanceOf[_to]); uint previousBalances = balanceOf[_from] + balanceOf[_to]; balanceOf[_from] -= _value; balanceOf[_to] += _value; emit Transfer(_from, _to, _value); assert(balanceOf[_from] + balanceOf[_to] == previousBalances); }",
            "reason": "The balanceOf[_from] and balanceOf[_to] are being updated in the same transaction, which could potentially cause an integer overflow if the value is too large. This could lead to the balances being incorrectly updated, which could be exploited by attackers."
        },
        {
            "function_name": "burn",
            "vulnerability": "Integer Overflow",
            "function_code": "function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; totalSupply -= _value; emit Burn(msg.sender, _value); return true; }",
            "reason": "The balanceOf[msg.sender] is being updated in the same transaction, which could potentially cause an integer overflow if the value is too large. This could lead to the balance being incorrectly updated, which could be exploited by attackers."
        },
        {
            "function_name": "burnFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] >= _value); require(_value <= allowance[_from][msg.sender]); balanceOf[_from] -= _value; allowance[_from][msg.sender] -= _value; totalSupply -= _value; emit Burn(_from, _value); return true; }",
            "reason": "The balanceOf[_from] and allowance[_from][msg.sender] are being updated in the same transaction, which could potentially cause an integer overflow if the value is too large. This could lead to the balances being incorrectly updated, which could be exploited by attackers."
        },
        {
            "function_name": "EAI_TokenERC20",
            "vulnerability": "Typo Constructor",
            "function_code": "function EAI_TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",
            "reason": "The constructor function name is EAI_TokenERC20, but the function name in the code is EAI_TokenERC20. This could be a typo, which could lead to confusion and potential errors. It is recommended to use a consistent function name throughout the contract."
        }
    ]
}