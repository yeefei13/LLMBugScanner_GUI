{
    "output_list": [
        {
            "function_name": "sellOffline",
            "vulnerability": "Integer Overflow",
            "function_code": "function sellOffline(address rec_address,uint256 token_amount) public onlyOwner { if (remaining > 0) { uint finalTokens =  (token_amount  * (10 ** 18)); if(finalTokens < remaining) { remaining = remaining - finalTokens; _transfer(owner,rec_address, finalTokens); TransferSell(owner, rec_address, finalTokens,'Offline'); } else { revert(); } } else { revert(); } }",
            "reason": "The function sellOffline takes in a uint256 token_amount and multiplies it by 10^18 to convert it to the smallest denomination of the token. If the resulting value is greater than the remaining tokens in the contract, it will cause an integer overflow. This can be exploited by an attacker to mint more tokens than the contract has remaining supply."
        },
        {
            "function_name": "setEthRate",
            "vulnerability": "Integer Overflow",
            "function_code": "function setEthRate (uint newEthRate) public  onlyOwner { ethRate = newEthRate; }",
            "reason": "The function setEthRate takes in a uint newEthRate and assigns it to the ethRate variable. If the newEthRate is greater than the maximum value that can be stored in a uint, it will cause an integer overflow. This can be exploited by an attacker to set the ethRate to a value that is too high, leading to incorrect calculations and potentially loss of funds."
        },
        {
            "function_name": "setTokenPrice",
            "vulnerability": "Integer Overflow",
            "function_code": "function setTokenPrice (uint newTokenRate) public  onlyOwner { icoTokenPrice = newTokenRate; }",
            "reason": "The function setTokenPrice takes in a uint newTokenRate and assigns it to the icoTokenPrice variable. If the newTokenRate is greater than the maximum value that can be stored in a uint, it will cause an integer overflow. This can be exploited by an attacker to set the icoTokenPrice to a value that is too high, leading to incorrect calculations and potentially loss of funds."
        },
        {
            "function_name": "mintToken",
            "vulnerability": "Integer Overflow",
            "function_code": "function mintToken(uint256 tokensToMint) public onlyOwner { if(tokensToMint > 0) { var totalTokenToMint = tokensToMint * (10 ** 18); balanceOf[owner] += totalTokenToMint; totalSupply += totalTokenToMint; Transfer(0, owner, totalTokenToMint); } }",
            "reason": "The function mintToken takes in a uint256 tokensToMint and multiplies it by 10^18 to convert it to the smallest denomination of the token. If the resulting value is greater than the maximum value that can be stored in a uint, it will cause an integer overflow. This can be exploited by an attacker to mint more tokens than the contract has remaining supply."
        },
        {
            "function_name": "adm_trasfer",
            "vulnerability": "Typo Constructor",
            "function_code": "function adm_trasfer(address _from,address _to, uint256 _value)  public onlyOwner { _transfer(_from, _to, _value); }",
            "reason": "The function adm_trasfer has a typo in its name. The correct name should be adm_transfer. This typo can be exploited by an attacker to call the wrong function, potentially leading to incorrect calculations and potentially loss of funds."
        }
    ]
}