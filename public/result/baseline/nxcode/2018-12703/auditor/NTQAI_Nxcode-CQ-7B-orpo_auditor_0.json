{
    "output_list": [
        {
            "function_name": "balanceOf",
            "vulnerability": "Integer Overflow",
            "function_code": "function balanceOf(address _owner) constant returns (uint256 balance) { return balances[_owner]; }",
            "reason": "The balanceOf function does not check for integer overflow. If the balance of an address exceeds the maximum value of uint256, the function will return an incorrect result. This can be exploited by an attacker to steal tokens from other users."
        },
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) returns (bool success) { require(_to != address(0)); require(_value <= balances[msg.sender]); require(balances[_to] + _value > balances[_to]); balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",
            "reason": "The transfer function does not check for integer overflow. If the balance of the sender is greater than the maximum value of uint256, the function will return an incorrect result. This can be exploited by an attacker to steal tokens from other users."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); require(balances[_to] + _value > balances[_to]); balances[_to] += _value; balances[_from] -= _value; allowed[_from][msg.sender] -= _value; Transfer(_from, _to, _value); return true; }",
            "reason": "The transferFrom function does not check for integer overflow. If the balance of the sender is greater than the maximum value of uint256, the function will return an incorrect result. This can be exploited by an attacker to steal tokens from other users."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint256 _value) returns (bool success) { allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true; }",
            "reason": "The approve function does not check for integer overflow. If the value approved is greater than the maximum value of uint256, the function will return an incorrect result. This can be exploited by an attacker to approve an excessive amount of tokens for spending."
        },
        {
            "function_name": "allowance",
            "vulnerability": "Integer Overflow",
            "function_code": "function allowance(address _owner, address _spender) constant returns (uint256 remaining) { return allowed[_owner][_spender]; }",
            "reason": "The allowance function does not check for integer overflow. If the allowance of an address is greater than the maximum value of uint256, the function will return an incorrect result. This can be exploited by an attacker to see an excessive amount of tokens approved for spending."
        }
    ]
}