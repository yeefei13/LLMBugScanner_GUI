{
    "output_list": [
        {
            "function_name": "balanceOf",
            "vulnerability": "Integer Overflow",
            "function_code": "function balanceOf(address _owner) public constant returns (uint balance) {
ttif (!created[_owner] && balances[_owner] == 0) {
tttreturn free;
tt}
ttelse
tt{
tttreturn balances[_owner];
tt}
t}",
            "reason": "The function balanceOf is vulnerable to integer overflow. The return value of the function is not checked against the maximum possible value of uint256. This could lead to an incorrect balance for the owner if the balance exceeds the maximum value of uint256. This could be exploited by an attacker to steal tokens from the contract."
        },
        {
            "function_name": "_transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);
        if (!created[_from]) {
tttbalances[_from] = free;
tttcreated[_from] = true;
tt}
        if (!created[_to]) {
tttcreated[_to] = true;
tt}
        require(balances[_from] >= _value);
        require(balances[_to] + _value >= balances[_to]);
        uint previousBalances = balances[_from] + balances[_to];
        balances[_from] -= _value;
        balances[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balances[_from] + balances[_to] == previousBalances);
    }",
            "reason": "The function _transfer is vulnerable to integer overflow. The function does not check if the sum of the balances of the sender and receiver exceeds the maximum possible value of uint256. This could lead to an incorrect balance for the sender and receiver if the sum exceeds the maximum value of uint256. This could be exploited by an attacker to steal tokens from the contract."
        },
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }",
            "reason": "The function transfer is vulnerable to integer overflow. The function does not check if the sum of the balances of the sender and receiver exceeds the maximum possible value of uint256. This could lead to an incorrect balance for the sender and receiver if the sum exceeds the maximum value of uint256. This could be exploited by an attacker to steal tokens from the contract."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }",
            "reason": "The function transferFrom is vulnerable to integer overflow. The function does not check if the sum of the balances of the sender and receiver exceeds the maximum possible value of uint256. This could lead to an incorrect balance for the sender and receiver if the sum exceeds the maximum value of uint256. This could be exploited by an attacker to steal tokens from the contract."
        },
        {
            "function_name": "burn",
            "vulnerability": "Integer Overflow",
            "function_code": "function burn(uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value);   
        balances[msg.sender] -= _value;            
        totalSupply -= _value;                      
        emit Burn(msg.sender, _value);
        return true;
    }",
            "reason": "The function burn is vulnerable to integer overflow. The function does not check if the sum of the balances of the sender and receiver exceeds the maximum possible value of uint256. This could lead to an incorrect balance for the sender and receiver if the sum exceeds the maximum value of uint256. This could be exploited by an attacker to steal tokens from the contract."
        }
    ]
}