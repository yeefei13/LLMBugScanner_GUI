{
    "output_list": [
        {
            "function_name": "TokenERC20",
            "vulnerability": "Integer Overflow",
            "function_code": "function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",
            "reason": "The initialSupply is multiplied by 10^18, which could potentially cause an integer overflow if initialSupply is too large. This could lead to the totalSupply being less than the actual amount of tokens created, potentially leading to loss of funds for users."
        },
        {
            "function_name": "TokenERC20",
            "vulnerability": "Integer Overflow",
            "function_code": "function _transfer(address _from, address _to, uint _value) internal { require (_to != 0x0); require (balanceOf[_from] >= _value); require (balanceOf[_to] + _value >= balanceOf[_to]); require(!frozenAccount[_from]); require(!frozenAccount[_to]); balanceOf[_from] -= _value; balanceOf[_to] += _value; emit Transfer(_from, _to, _value); assert(balanceOf[_from] + balanceOf[_to] == previousBalances); }",
            "reason": "The _transfer function is vulnerable to integer overflow. If the balance of the sender is greater than or equal to the value being transferred, and the balance of the recipient plus the value being transferred is greater than or equal to the recipient's current balance, then the transfer will succeed. However, if the recipient's balance is greater than the maximum possible uint256 value, then the addition of the value being transferred to the recipient's balance will cause an integer overflow. This could lead to the recipient receiving less tokens than intended, potentially leading to loss of funds for the recipient."
        },
        {
            "function_name": "TokenERC20",
            "vulnerability": "Integer Overflow",
            "function_code": "function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; totalSupply -= _value; emit Burn(msg.sender, _value); return true; }",
            "reason": "The burn function is vulnerable to integer overflow. If the balance of the sender is greater than or equal to the value being burned, then the burn will succeed. However, if the sender's balance is greater than the maximum possible uint256 value, then the subtraction of the value being burned from the sender's balance will cause an integer overflow. This could lead to the sender burning more tokens than intended, potentially leading to loss of funds for the sender."
        },
        {
            "function_name": "TokenERC20",
            "vulnerability": "Integer Overflow",
            "function_code": "function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] >= _value); require(_value <= allowance[_from][msg.sender]); balanceOf[_from] -= _value; allowance[_from][msg.sender] -= _value; totalSupply -= _value; emit Burn(_from, _value); return true; }",
            "reason": "The burnFrom function is vulnerable to integer overflow. If the balance of the sender is greater than or equal to the value being burned, and the allowance from the sender to the caller is greater than or equal to the value being burned, then the burnFrom will succeed. However, if the sender's balance is greater than the maximum possible uint256 value, then the subtraction of the value being burned from the sender's balance will cause an integer overflow. This could lead to the sender burning more tokens than intended, potentially leading to loss of funds for the sender."
        },
        {
            "function_name": "FIBToken",
            "vulnerability": "Integer Overflow",
            "function_code": "function mintToken(address target, uint256 mintedAmount) onlyOwner public { balanceOf[target] += mintedAmount; totalSupply += mintedAmount; emit Transfer(0, this, mintedAmount); emit Transfer(this, target, mintedAmount); }",
            "reason": "The mintToken function is vulnerable to integer overflow. If the target's balance is greater than or equal to the maximum possible uint256 value, then the addition of the mintedAmount to the target's balance will cause an integer overflow. This could lead to the target receiving more tokens than intended, potentially leading to loss of funds for the target."
        }
    ]
}