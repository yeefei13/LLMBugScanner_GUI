{
    "output_list": [
        {
            "function_name": "distributeFUD",
            "vulnerability": "Integer Overflow",
            "function_code": "function distributeFUD(address[] addresses, uint256 _value, uint256 _ethbal) onlyOwner { for (uint i = 0; i < addresses.length; i++) { if (getEthBalance(addresses[i]) < _ethbal) { continue; } balances[owner] -= _value; balances[addresses[i]] += _value; Transfer(owner, addresses[i], _value); } }",
            "reason": "The distributeFUD function is vulnerable to integer overflow. The function subtracts _value from balances[owner] and adds _value to balances[addresses[i]]. If the result of the addition operation overflows, it will cause an integer overflow. This can be exploited by an attacker to manipulate the balances of the contract owner and other users."
        },
        {
            "function_name": "withdrawForeignTokens",
            "vulnerability": "Access Control",
            "function_code": "function withdrawForeignTokens(address _tokenContract) returns (bool) { require(msg.sender == owner); ForeignToken token = ForeignToken(_tokenContract); uint256 amount = token.balanceOf(address(this)); return token.transfer(owner, amount); }",
            "reason": "The withdrawForeignTokens function is vulnerable to access control. The function requires that the caller is the contract owner before transferring the tokens. This can be exploited by an attacker to transfer the tokens of the contract to their own address."
        },
        {
            "function_name": "getEthBalance",
            "vulnerability": "Typo Constructor",
            "function_code": "function getEthBalance(address _addr) constant returns(uint) { return _addr.balance; }",
            "reason": "The getEthBalance function is vulnerable to typo constructor. The function name is getEthBalance, but the function body is incorrect. The function should return the balance of the given address, but it returns the balance of the contract owner instead. This can be exploited by an attacker to manipulate the balance of the contract owner."
        },
        {
            "function_name": "balanceOf",
            "vulnerability": "Typo Constructor",
            "function_code": "function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }",
            "reason": "The balanceOf function is vulnerable to typo constructor. The function name is balanceOf, but the function body is incorrect. The function should return the balance of the given address, but it returns the balance of the contract owner instead. This can be exploited by an attacker to manipulate the balance of the contract owner."
        },
        {
            "function_name": "transfer",
            "vulnerability": "Typo Constructor",
            "function_code": "function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) { if (_value == 0) { return false; } uint256 fromBalance = balances[msg.sender]; bool sufficientFunds = fromBalance >= _value; bool overflowed = balances[_to] + _value < balances[_to]; if (sufficientFunds && !overflowed) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; } else { return false; } }",
            "reason": "The transfer function is vulnerable to typo constructor. The function name is transfer, but the function body is incorrect. The function should transfer the specified amount of tokens from the sender to the recipient, but it transfers the specified amount of tokens from the contract owner to the recipient instead. This can be exploited by an attacker to manipulate the balance of the contract owner."
        }
    ]
}