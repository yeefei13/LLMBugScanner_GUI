{
    "output_list": [
        {
            "function_name": "mintTokens",
            "vulnerability": "Integer Overflow",
            "function_code": "function mintTokens(address _investor) external onlyOwner { balances[_investor] +=  promoValue; totalSupply += promoValue; Transfer(0x0, _investor, promoValue); }",
            "reason": "The function mintTokens is vulnerable to integer overflow. The addition of the promoValue to the balance of the _investor can cause an overflow if the balance is close to the maximum value for uint256. This can lead to incorrect results and potentially loss of funds."
        },
        {
            "function_name": "setPromo",
            "vulnerability": "Integer Overflow",
            "function_code": "function setPromo(uint256 _newValue) external onlyOwner { promoValue = _newValue; }",
            "reason": "The function setPromo is vulnerable to integer overflow. The assignment of the _newValue to the promoValue can cause an overflow if the _newValue is close to the maximum value for uint256. This can lead to incorrect results and potentially loss of funds."
        },
        {
            "function_name": "balanceOf",
            "vulnerability": "Integer Overflow",
            "function_code": "function balanceOf(address _investor) public constant returns(uint256) { return balances[_investor]; }",
            "reason": "The function balanceOf is vulnerable to integer overflow. The return value of the balanceOf function is not checked for overflow. If the balance of the _investor is close to the maximum value for uint256, this can lead to incorrect results and potentially loss of funds."
        },
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint _amount) public returns (bool) { balances[msg.sender] -= _amount; balances[_to] -= _amount; Transfer(msg.sender, _to, _amount); return true; }",
            "reason": "The function transfer is vulnerable to integer overflow. The subtraction of _amount from both the sender's balance and the recipient's balance can cause an overflow if the sender's or recipient's balance is close to the maximum value for uint256. This can lead to incorrect results and potentially loss of funds."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint _amount) public returns (bool) { balances[_from] -= _amount; allowed[_from][msg.sender] -= _amount; balances[_to] -= _amount; Transfer(_from, _to, _amount); return true; }",
            "reason": "The function transferFrom is vulnerable to integer overflow. The subtraction of _amount from both the sender's balance and the recipient's balance can cause an overflow if the sender's or recipient's balance is close to the maximum value for uint256. This can lead to incorrect results and potentially loss of funds."
        }
    ]
}