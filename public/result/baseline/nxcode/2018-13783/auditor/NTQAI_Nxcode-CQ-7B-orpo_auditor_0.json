{
    "output_list": [
        {
            "function_name": "TokenERC20",
            "vulnerability": "Integer Overflow",
            "function_code": "function TokenERC20(uint256 initialSupply, uint8 initialDecimals, string tokenName, string tokenSymbol) public {
    decimals = initialDecimals;
    totalSupply = initialSupply * 10 ** uint256(decimals);  
    balanceOf[msg.sender] = totalSupply;                
    name = tokenName;                                   
    symbol = tokenSymbol;                               
}",
            "reason": "The totalSupply variable is multiplied by 10 ** uint256(decimals) which can cause an integer overflow if the initialSupply is too large. This can be exploited by an attacker to mint more tokens than the total supply."
        },
        {
            "function_name": "TokenERC20",
            "vulnerability": "Integer Overflow",
            "function_code": "function _transfer(address _from, address _to, uint _value) internal {
    require (_to != 0x0);
    require(balanceOf[_from] >= _value);
    require(balanceOf[_to] + _value > balanceOf[_to]);
    uint previousBalances = balanceOf[_from] + balanceOf[_to];
    balanceOf[_from] -= _value;
    balanceOf[_to] += _value;
    emit Transfer(_from, _to, _value);
    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
}",
            "reason": "The balanceOf[_from] -= _value; line can cause an integer overflow if the _value is too large. This can be exploited by an attacker to transfer more tokens than they have."
        },
        {
            "function_name": "TokenERC20",
            "vulnerability": "Integer Overflow",
            "function_code": "function _transfer(address _from, address _to, uint _value) internal {
    require (_to != 0x0);
    require(balanceOf[_from] >= _value);
    require(balanceOf[_to] + _value > balanceOf[_to]);
    uint previousBalances = balanceOf[_from] + balanceOf[_to];
    balanceOf[_from] -= _value;
    balanceOf[_to] += _value;
    emit Transfer(_from, _to, _value);
    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
}",
            "reason": "The balanceOf[_to] += _value; line can cause an integer overflow if the _value is too large. This can be exploited by an attacker to transfer more tokens than they have."
        },
        {
            "function_name": "TokenERC20",
            "vulnerability": "Integer Overflow",
            "function_code": "function burn(uint256 _value) public returns (bool success) {
    require(balanceOf[msg.sender] >= _value);   
    balanceOf[msg.sender] -= _value;            
    totalSupply -= _value;                      
    emit Burn(msg.sender, _value);
    return true;
}",
            "reason": "The balanceOf[msg.sender] -= _value; line can cause an integer overflow if the _value is too large. This can be exploited by an attacker to burn more tokens than they have."
        },
        {
            "function_name": "TokenERC20",
            "vulnerability": "Integer Overflow",
            "function_code": "function burnFrom(address _from, uint256 _value) public returns (bool success) {
    require(balanceOf[_from] >= _value);                
    require(_value <= allowance[_from][msg.sender]);    
    balanceOf[_from] -= _value;                         
    allowance[_from][msg.sender] -= _value;             
    totalSupply -= _value;                              
    emit Burn(_from, _value);
    return true;
}",
            "reason": "The balanceOf[_from] -= _value; line can cause an integer overflow if the _value is too large. This can be exploited by an attacker to burn more tokens than they have."
        }
    ]
}