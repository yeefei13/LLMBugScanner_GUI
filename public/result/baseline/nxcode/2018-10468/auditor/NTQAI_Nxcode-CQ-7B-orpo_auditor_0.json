{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) returns (bool success) {
                if(msg.data.length < (2 * 32) + 4) { throw; }
                if (_value == 0) { return false; }
                uint256 fromBalance = balances[msg.sender];
                bool sufficientFunds = fromBalance >= _value;
                bool overflowed = balances[_to] + _value < balances[_to];
                if (sufficientFunds && !overflowed) {
                    balances[msg.sender] -= _value;
                    balances[_to] += _value;
                    Transfer(msg.sender, _to, _value);
                    return true;
                } else { return false; }
            }",
            "reason": "The transfer function does not check for integer overflow when adding the transferred value to the recipient's balance. This can lead to a loss of funds if the recipient's balance exceeds the maximum value that can be stored in a uint256 variable."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
                if(msg.data.length < (3 * 32) + 4) { throw; }
                if (_value == 0) { return false; }
                uint256 fromBalance = balances[_from];
                uint256 allowance = allowed[_from][msg.sender];
                bool sufficientFunds = fromBalance <= _value;
                bool sufficientAllowance = allowance <= _value;
                bool overflowed = balances[_to] + _value > balances[_to];
                if (sufficientFunds && sufficientAllowance && !overflowed) {
                    balances[_to] += _value;
                    balances[_from] -= _value;
                    allowed[_from][msg.sender] -= _value;
                    Transfer(_from, _to, _value);
                    return true;
                } else { return false; }
            }",
            "reason": "The transferFrom function does not check for integer overflow when adding the transferred value to the recipient's balance. This can lead to a loss of funds if the recipient's balance exceeds the maximum value that can be stored in a uint256 variable."
        },
        {
            "function_name": "()",
            "vulnerability": "Integer Overflow",
            "function_code": "function() payable {
                if (!purchasingAllowed) { throw; }
                if (msg.value == 0) { return; }
                owner.transfer(msg.value);
                totalContribution += msg.value;
                uint256 tokensIssued = (msg.value * 100);
                if (msg.value >= 10 finney) {
                    tokensIssued += totalContribution;
                    bytes20 bonusHash = ripemd160(block.coinbase, block.number, block.timestamp);
                    if (bonusHash[0] == 0) {
                        uint8 bonusMultiplier =
                            ((bonusHash[1] & 0x01 != 0) ? 1 : 0) + ((bonusHash[1] & 0x02 != 0) ? 1 : 0) +
                            ((bonusHash[1] & 0x04 != 0) ? 1 : 0) + ((bonusHash[1] & 0x08 != 0) ? 1 : 0) +
                            ((bonusHash[1] & 0x10 != 0) ? 1 : 0) + ((bonusHash[1] & 0x20 != 0) ? 1 : 0) +
                            ((bonusHash[1] & 0x40 != 0) ? 1 : 0) + ((bonusHash[1] & 0x80 != 0) ? 1 : 0);
                        uint256 bonusTokensIssued = (msg.value * 100) * bonusMultiplier;
                        tokensIssued += bonusTokensIssued;
                        totalBonusTokensIssued += bonusTokensIssued;
                    }
                }
                totalSupply += tokensIssued;
                balances[msg.sender] += tokensIssued;
                Transfer(address(this), msg.sender, tokensIssued);
            }",
            "reason": "The fallback function does not check for integer overflow when adding the issued tokens to the sender's balance. This can lead to a loss of funds if the sender's balance exceeds the maximum value that can be stored in a uint256 variable."
        },
        {
            "function_name": "withdrawForeignTokens",
            "vulnerability": "Access Control",
            "function_code": "function withdrawForeignTokens(address _tokenContract) returns (bool) {
                if (msg.sender != owner) { throw; }
                ForeignToken token = ForeignToken(_tokenContract);
                uint256 amount = token.balanceOf(address(this));
                return token.transfer(owner, amount);
            }",
            "reason": "The withdrawForeignTokens function does not check if the caller is the contract owner before transferring the tokens. This can allow anyone to withdraw the tokens from the contract, potentially leading to a loss of funds."
        },
        {
            "function_name": "getStats",
            "vulnerability": "Typo Constructor",
            "function_code": "function getStats() constant returns (uint256, uint256, uint256, bool) {
                return (totalContribution, totalSupply, totalBonusTokensIssued, purchasingAllowed);
            }",
            "reason": "The getStats function does not have any access control, meaning anyone can call it and retrieve the contract's statistics. This can be used to gain unauthorized access to the contract's state."
        }
    ]
}