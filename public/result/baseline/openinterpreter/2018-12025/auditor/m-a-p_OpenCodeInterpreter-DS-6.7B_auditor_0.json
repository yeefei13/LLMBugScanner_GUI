{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address to, uint value) returns (bool success) {
        if (frozenAccount[msg.sender]) return false;
        if(balances[msg.sender] < value) return false;
        if(balances[to] + value < balances[to]) return false;
        balances[msg.sender] -= value;
        balances[to] += value;
        Transfer(msg.sender, to, value);
        return true;
    }",
            "reason": "In the transfer function, the addition operation for balances[to] can result in an integer overflow if the sum of balances[to] and value is less than balances[to]. This can be exploited by an attacker to drain the contract's balance."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address from, address to, uint value) returns (bool success) {
        if (frozenAccount[msg.sender]) return false;
        if(balances[from] < value) return false;
        if( allowed[from][msg.sender] >= value ) return false;
        if(balances[to] + value < balances[to]) return false;
        balances[from] -= value;
        allowed[from][msg.sender] -= value;
        balances[to] += value;
        Transfer(from, to, value);
        return true;
    }",
            "reason": "In the transferFrom function, the addition operation for balances[to] can result in an integer overflow if the sum of balances[to] and value is less than balances[to]. This can be exploited by an attacker to drain the contract's balance."
        },
        {
            "function_name": "mintToken",
            "vulnerability": "Integer Overflow",
            "function_code": "function mintToken(address target, uint256 mintedAmount) onlyOwner{
        balances[target] += mintedAmount;
        totalSupply += mintedAmount;
        Transfer(0,owner,mintedAmount);
        Transfer(owner,target,mintedAmount);
    }",
            "reason": "In the mintToken function, the addition operation for balances[target] and totalSupply can result in an integer overflow if the sum of balances[target] and mintedAmount is less than balances[target] or the sum of totalSupply and mintedAmount is less than totalSupply. This can be exploited by an attacker to mint more tokens than the contract's totalSupply allows."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint256 _amount) returns (bool success) {
        allowed[msg.sender][_spender] = _amount;
        Approval(msg.sender, _spender, _amount);
        return true;
    }",
            "reason": "In the approve function, the assignment operation for allowed[msg.sender][_spender] can result in an integer overflow if _amount is greater than the maximum value that can be represented by uint256. This can be exploited by an attacker to allow an unlimited amount of tokens to be transferred from the contract."
        },
        {
            "function_name": "allowance",
            "vulnerability": "Integer Overflow",
            "function_code": "function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }",
            "reason": "In the allowance function, the return statement can result in an integer overflow if allowed[_owner][_spender] is greater than the maximum value that can be represented by uint256. This can be exploited by an attacker to retrieve the maximum allowance value."
        }
    ]
}