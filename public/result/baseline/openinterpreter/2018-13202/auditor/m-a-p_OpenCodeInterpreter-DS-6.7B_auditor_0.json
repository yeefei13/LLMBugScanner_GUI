{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) {
    if (balanceOf[msg.sender] < _value) throw;
    if (balanceOf[_to] + _value < balanceOf[_to]) throw;
    balanceOf[msg.sender] -= _value;
    balanceOf[_to] += _value;
    Transfer(msg.sender, _to, _value);
  }",
            "reason": "In the transfer function, there is a possibility of integer overflow. If the balance of the sender is less than the value to be transferred, the subtraction operation will underflow and the balanceOf[_to] will be greater than the maximum value of uint256."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    if (balanceOf[_from] < _value) throw;
    if (balanceOf[_to] + _value < balanceOf[_to]) throw;
    if (_value > allowance[_from][msg.sender]) throw;
    balanceOf[_from] -= _value;
    balanceOf[_to] += _value;
    allowance[_from][msg.sender] -= _value;
    Transfer(_from, _to, _value);
    return true;
  }",
            "reason": "In the transferFrom function, there is a possibility of integer overflow. If the balance of the sender is less than the value to be transferred, the subtraction operation will underflow and the balanceOf[_to] will be greater than the maximum value of uint256."
        },
        {
            "function_name": "mintToken",
            "vulnerability": "Integer Overflow",
            "function_code": "function mintToken(address target, uint256 mintedAmount) onlyOwner {
    balanceOf[target] += mintedAmount;
    totalSupply += mintedAmount;
    Transfer(0, this, mintedAmount);
    Transfer(this, target, mintedAmount);
  }",
            "reason": "In the mintToken function, there is a possibility of integer overflow. If the totalSupply is less than the mintedAmount, the addition operation will overflow and the totalSupply will be less than the maximum value of uint256."
        },
        {
            "function_name": "buy",
            "vulnerability": "Integer Overflow",
            "function_code": "function buy() payable {
    uint amount = msg.value / buyPrice;
    if (balanceOf[this] < amount) throw;
    balanceOf[msg.sender] += amount;
    balanceOf[this] -= amount;
    Transfer(this, msg.sender, amount);
  }",
            "reason": "In the buy function, there is a possibility of integer overflow. If the balanceOf[this] is less than the amount, the subtraction operation will underflow and the balanceOf[msg.sender] will be greater than the maximum value of uint256."
        },
        {
            "function_name": "sell",
            "vulnerability": "Integer Overflow",
            "function_code": "function sell(uint256 amount) {
    if (balanceOf[msg.sender] < amount ) throw;
    balanceOf[this] += amount;
    balanceOf[msg.sender] -= amount;
    if (!msg.sender.send(amount * sellPrice)) {
      throw;
    } else {
      Transfer(msg.sender, this, amount);
    }
  }",
            "reason": "In the sell function, there is a possibility of integer overflow. If the balanceOf[msg.sender] is less than the amount, the subtraction operation will underflow and the balanceOf[this] will be greater than the maximum value of uint256."
        }
    ]
}