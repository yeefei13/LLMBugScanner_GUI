{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) public {
        uint market_value = _value * sellPrice;
        uint commission = market_value * 4 / 1000;
        if (commission < minimumCommission){
            commission = minimumCommission;
        }
        address contr = this;
        require(contr.balance >= commission);
        commissionGetter.transfer(commission);
        _transfer(msg.sender, _to, _value);
    }
",
            "reason": "In the transfer function, the multiplication of _value and sellPrice can result in an integer overflow if the product is greater than the maximum value of uint256. This can lead to incorrect balances and potentially allow attackers to drain the contract."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);
        uint market_value = _value * sellPrice;
        uint commission = market_value * 4 / 1000;
        if (commission < minimumCommission){
            commission = minimumCommission;
        }
        address contr = this;
        require(contr.balance >= commission);
        commissionGetter.transfer(commission);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
",
            "reason": "In the transferFrom function, the multiplication of _value and sellPrice can result in an integer overflow if the product is greater than the maximum value of uint256. This can lead to incorrect balances and potentially allow attackers to drain the contract."
        },
        {
            "function_name": "_transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);
        require (balanceOf[_from] >= _value);
        require (balanceOf[_to] + _value > balanceOf[_to]);
        require(!frozenAccount[_from]);
        require(!frozenAccount[_to]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
    }
",
            "reason": "In the _transfer function, the addition of balanceOf[_to] and _value can result in an integer overflow if the sum is greater than the maximum value of uint256. This can lead to incorrect balances and potentially allow attackers to drain the contract."
        },
        {
            "function_name": "buy",
            "vulnerability": "Integer Overflow",
            "function_code": "function buy() payable public {
        require(!closeBuy);
        uint amount = msg.value / buyPrice;
        uint market_value = amount * buyPrice;
        uint commission = market_value * 4 / 1000;
        if (commission < minimumCommission){
            commission = minimumCommission;
        }
        address contr = this;
        require(contr.balance >= commission);
        commissionGetter.transfer(commission);
        _transfer(this, msg.sender, amount);
    }
",
            "reason": "In the buy function, the multiplication of amount and buyPrice can result in an integer overflow if the product is greater than the maximum value of uint256. This can lead to incorrect balances and potentially allow attackers to drain the contract."
        },
        {
            "function_name": "sell",
            "vulnerability": "Integer Overflow",
            "function_code": "function sell(uint256 amount) public {
    require(!closeSell);
    address contr = this;
    uint market_value = amount * sellPrice;
    uint commission = market_value * 4 / 1000;
    if (commission < minimumCommission){
        commission = minimumCommission;
    }
    uint amount_weis = market_value + commission;
    require(contr.balance >= amount_weis);
    commissionGetter.transfer(commission);
    _transfer(msg.sender, this, amount);
    msg.sender.transfer(market_value);
}
",
            "reason": "In the sell function, the addition of market_value and commission can result in an integer overflow if the sum is greater than the maximum value of uint256. This can lead to incorrect balances and potentially allow attackers to drain the contract."
        }
    ]
}