{
    "output_list": [
        {
            "function_name": "getTokenBalance",
            "vulnerability": "Integer Overflow",
            "function_code": "function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
        ForeignToken t = ForeignToken(tokenAddress);
        uint bal = t.balanceOf(who);
        return bal;
    }",
            "reason": "The function getTokenBalance uses the balanceOf function of the ForeignToken contract to get the balance of a foreign token. If the balance of the foreign token is greater than the maximum uint256 value, an integer overflow will occur."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {
        require(_to != address(0));
        require(_amount <= balances[_from]);
        require(_amount <= allowed[_from][msg.sender]);
        balances[_from] = balances[_from].sub(_amount);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);
        return true;
    }",
            "reason": "The function transferFrom subtracts the amount from the sender's balance and the spender's allowance, and then adds the amount to the recipient's balance. If the amount is greater than the maximum uint256 value, an integer overflow will occur."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint256 _value) public returns (bool success) {
        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }",
            "reason": "The function approve sets the allowance for the spender to the value provided. If the value is greater than the maximum uint256 value, an integer overflow will occur."
        },
        {
            "function_name": "distr",
            "vulnerability": "Integer Overflow",
            "function_code": "function distr(address _to, uint256 _amount) canDistr private returns (bool) {
        totalDistributed = totalDistributed.add(_amount);
        totalRemaining = totalRemaining.sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Distr(_to, _amount);
        emit Transfer(address(0), _to, _amount);
        return true;
        if (totalDistributed >= totalSupply) {
            distributionFinished = true;
        }
    }",
            "reason": "The function distr adds the amount to the total distributed and remaining amounts, and then adds the amount to the recipient's balance. If the amount is greater than the maximum uint256 value, an integer overflow will occur."
        },
        {
            "function_name": "getTokens",
            "vulnerability": "Integer Overflow",
            "function_code": "function getTokens() payable canDistr onlyWhitelist public {
        if (value > totalRemaining) {
            value = totalRemaining;
        }
        require(value <= totalRemaining);
        address investor = msg.sender;
        uint256 toGive = value;
        distr(investor, toGive);
        if (toGive > 0) {
            blacklist[investor] = true;
        }
        if (totalDistributed >= totalSupply) {
            distributionFinished = true;
        }
        value = value.div(100000).mul(99999);
    }",
            "reason": "The function getTokens calculates the amount to give to the investor and calls the distr function. If the value is greater than the maximum uint256 value, an integer overflow will occur."
        }
    ]
}