{
    "output_list": [
        {
            "function_name": "enter",
            "vulnerability": "Integer Overflow",
            "function_code": "function enter(uint256 _roomId) public payable {
        Room storage room = allRooms[_roomId-1]; 
        require(room.players.length < 6);
        require(msg.value >= room.entryPrice);
        room.players.push(msg.sender);
        room.balance += room.entryPrice;
        emit newPlayer(_roomId, msg.sender);
        if(room.players.length == 6){
            executeRoom(_roomId);
        }
    }",
            "reason": "In the 'enter' function, the 'room.players.length' and 'room.balance' are incremented without checking for overflow. If the 'msg.value' is greater than 'room.entryPrice', it can lead to integer overflow in 'room.balance'."
        },
        {
            "function_name": "enterWithReferral",
            "vulnerability": "Integer Overflow",
            "function_code": "function enterWithReferral(uint256 _roomId, address referrer) public payable {
        Room storage room = allRooms[_roomId-1]; 
        require(room.players.length < 6);
        require(msg.value >= room.entryPrice);
        uint256 referrerCut = SafeMath.div(room.entryPrice, 100); 
        referrer.transfer(referrerCut);
        room.players.push(msg.sender);
        room.balance += room.entryPrice - referrerCut;
        emit newPlayer(_roomId, msg.sender);
        if(room.players.length == 6){
            emit fullRoom(_roomId);
            executeRoom(_roomId);
        }
    }",
            "reason": "In the 'enterWithReferral' function, the 'room.players.length' and 'room.balance' are incremented without checking for overflow. If the 'msg.value' is greater than 'room.entryPrice', it can lead to integer overflow in 'room.balance'."
        },
        {
            "function_name": "executeRoom",
            "vulnerability": "Integer Overflow",
            "function_code": "function executeRoom(uint256 _roomId) public {
        Room storage room = allRooms[_roomId-1]; 
        require(room.players.length == 6);
        uint256 halfFee = SafeMath.div(room.entryPrice, 20);
        CTO.transfer(halfFee);
        CEO.transfer(halfFee);
        room.balance -= halfFee * 2;
        uint256 deadSeat = random();
        distributeFunds(_roomId, deadSeat);
        delete room.players;
    }",
            "reason": "In the 'executeRoom' function, the 'room.balance' is decremented without checking for overflow. If 'halfFee' is greater than 'room.balance', it can lead to integer overflow in 'room.balance'."
        },
        {
            "function_name": "distributeFunds",
            "vulnerability": "Integer Overflow",
            "function_code": "function distributeFunds(uint256 _roomId, uint256 _deadSeat) private returns(uint256) {
        Room storage room = allRooms[_roomId-1]; 
        uint256 balanceToDistribute = SafeMath.div(room.balance,5);
        address victim = room.players[_deadSeat];
        address[] memory winners = new address[](5);
        uint256 j = 0; 
        for (uint i = 0; i<6; i++) {
            if(i != _deadSeat){
               room.players[i].transfer(balanceToDistribute);
               room.balance -= balanceToDistribute;
               winners[j] = room.players[i];
               j++;
            }
        }
        emit partyOver(_roomId, victim, winners);
        return address(this).balance;
    }",
            "reason": "In the 'distributeFunds' function, the 'room.balance' is decremented without checking for overflow. If 'balanceToDistribute' is greater than 'room.balance', it can lead to integer overflow in 'room.balance'."
        },
        {
            "function_name": "refundPlayersInRoom",
            "vulnerability": "Integer Overflow",
            "function_code": "function refundPlayersInRoom(uint256 _roomId) public onlyCTO{
        Room storage room = allRooms[_roomId-1]; 
        uint256 nbrOfPlayers = room.players.length;
        uint256 balanceToRefund = SafeMath.div(room.balance,nbrOfPlayers);
        for (uint i = 0; i<nbrOfPlayers; i++) {
             room.players[i].transfer(balanceToRefund);
             room.balance -= balanceToRefund;
        }
        emit roomRefunded(_roomId, room.players);
        delete room.players;
    }",
            "reason": "In the 'refundPlayersInRoom' function, the 'room.balance' is decremented without checking for overflow. If 'balanceToRefund' is greater than 'room.balance', it can lead to integer overflow in 'room.balance'."
        }
    ]
}