{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) public transferAllowed(msg.sender) returns (bool success) {
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }",
            "reason": "In the transfer function, the addition operation for balances[_to] can result in an integer overflow if the sum of balances[_to] and _value is greater than the maximum value that can be stored in a uint256 variable."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) public transferAllowed(_from) returns (bool success) {
        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[_to] += _value;
            balances[_from] -= _value;
            allowed[_from][msg.sender] -= _value;
            Transfer(_from, _to, _value);
            return true;
        } else { return false; }
    }",
            "reason": "In the transferFrom function, the addition operation for balances[_to] can result in an integer overflow if the sum of balances[_to] and _value is greater than the maximum value that can be stored in a uint256 variable."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }",
            "reason": "In the approve function, the assignment operation for allowed[msg.sender][_spender] can result in an integer overflow if _value is greater than the maximum value that can be stored in a uint256 variable."
        },
        {
            "function_name": "approveProxy",
            "vulnerability": "Integer Overflow",
            "function_code": "function approveProxy(address _from, address _spender, uint256 _value, uint8 _v,bytes32 _r, bytes32 _s) public returns (bool success) {
        uint256 nonce = nonces[_from];
        bytes32 hash = keccak256(_from,_spender,_value,nonce);
        if(_from != ecrecover(hash,_v,_r,_s)) revert();
        allowed[_from][_spender] = _value;
        Approval(_from, _spender, _value);
        nonces[_from] = nonce + 1;
        return true;
    }",
            "reason": "In the approveProxy function, the assignment operation for allowed[_from][_spender] can result in an integer overflow if _value is greater than the maximum value that can be stored in a uint256 variable."
        },
        {
            "function_name": "allocateTokens",
            "vulnerability": "Integer Overflow",
            "function_code": "function allocateTokens(address[] _owners, uint256[] _values) public onlyOwner {
        if(allocateEndTime < now) revert();
        if(_owners.length != _values.length) revert();
        for(uint256 i = 0; i < _owners.length ; i++){
            address to = _owners[i];
            uint256 value = _values[i];
            if(totalSupply + value <= totalSupply || balances[to] + value <= balances[to]) revert();
            totalSupply += value;
            balances[to] += value;
        }
    }",
            "reason": "In the allocateTokens function, the addition operation for totalSupply and balances[to] can result in an integer overflow if the sum of totalSupply and value is greater than the maximum value that can be stored in a uint256 variable."
        }
    ]
}