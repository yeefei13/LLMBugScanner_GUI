{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _amount) returns (bool success) {
         if (balances[msg.sender] >= _amount 
            && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
            return true;
         } else {
             return false;
         }
     }
",
            "reason": "In the transfer function, the calculation of the new balance of the recipient (_to) is not checked for overflow. If the amount to be transferred (_amount) is greater than the current balance of the recipient, it will result in an integer overflow and the function will not work correctly."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {
         if (balances[_from] >= _amount
             && allowed[_from][msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[_from] -= _amount;
             allowed[_from][msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(_from, _to, _amount);
             return true;
         } else {
            return false;
         }
     }
",
            "reason": "In the transferFrom function, the calculation of the new balance of the recipient (_to) is not checked for overflow. If the amount to be transferred (_amount) is greater than the current balance of the recipient, it will result in an integer overflow and the function will not work correctly."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint256 _amount) returns (bool success) {
         allowed[msg.sender][_spender] = _amount;
        Approval(msg.sender, _spender, _amount);
         return true;
     }
",
            "reason": "In the approve function, the calculation of the new allowance (_amount) is not checked for overflow. If the amount to be approved is greater than the current allowance, it will result in an integer overflow and the function will not work correctly."
        },
        {
            "function_name": "distributeBTR",
            "vulnerability": "Integer Overflow",
            "function_code": "function distributeBTR(address[] addresses) onlyOwner {
         for (uint i = 0; i < addresses.length; i++) {
             balances[owner] -= 2000 * 10**8;
             balances[addresses[i]] += 2000 * 10**8;
             Transfer(owner, addresses[i], 2000 * 10**8);
         }
     }
",
            "reason": "In the distributeBTR function, the calculation of the new balance of the owner is not checked for overflow. If the amount to be distributed is greater than the current balance of the owner, it will result in an integer overflow and the function will not work correctly."
        },
        {
            "function_name": "distributeBTR",
            "vulnerability": "Integer Overflow",
            "function_code": "function distributeBTR(address[] addresses) onlyOwner {
         for (uint i = 0; i < addresses.length; i++) {
             balances[owner] -= 2000 * 10**8;
             balances[addresses[i]] += 2000 * 10**8;
             Transfer(owner, addresses[i], 2000 * 10**8);
         }
     }
",
            "reason": "In the distributeBTR function, the calculation of the new balance of the recipient is not checked for overflow. If the amount to be distributed is greater than the current balance of the recipient, it will result in an integer overflow and the function will not work correctly."
        }
    ]
}