{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint _value) public returns (bool) {
    require(_to != address(0));
    require(!isFrozen);
    return super.transfer(_to, _value);
}",
            "reason": "In the transfer function, the value of _value is not checked before adding it to the balances of the sender and receiver. If the sum of the balances of the sender and receiver exceeds the maximum uint256 value, an integer overflow will occur."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint _value) public returns (bool) {
    require(!isFrozen);
    return super.transferFrom(_from, _to, _value);
}",
            "reason": "In the transferFrom function, the value of _value is not checked before subtracting it from the balances of the sender and receiver. If the subtraction result is negative, an integer underflow will occur."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint _value) public returns (bool) {
    require(!isFrozen);
    return super.approve(_spender, _value);
}",
            "reason": "In the approve function, the value of _value is not checked before adding it to the allowed mapping. If the sum of the current value and _value exceeds the maximum uint256 value, an integer overflow will occur."
        },
        {
            "function_name": "increaseApproval",
            "vulnerability": "Integer Overflow",
            "function_code": "function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
}",
            "reason": "In the increaseApproval function, the value of _addedValue is not checked before adding it to the current value in the allowed mapping. If the sum of the current value and _addedValue exceeds the maximum uint256 value, an integer overflow will occur."
        },
        {
            "function_name": "decreaseApproval",
            "vulnerability": "Integer Overflow",
            "function_code": "function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
}",
            "reason": "In the decreaseApproval function, the value of _subtractedValue is not checked before subtracting it from the current value in the allowed mapping. If the subtraction result is negative, an integer underflow will occur."
        }
    ]
}