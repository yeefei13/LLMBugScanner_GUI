{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }",
            "reason": "In the transfer function, the value of _value is not checked before it is transferred to the _transfer function. If the value of _value is greater than the balance of the sender, it will cause an integer overflow."
        },
        {
            "function_name": "_transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);
        require (balanceOf[_from] >= _value);
        require (balanceOf[_to] + _value > balanceOf[_to]);
        require(!frozenAccount[_from]);
        require(!frozenAccount[_to]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
    }",
            "reason": "In the _transfer function, the value of _value is not checked before it is transferred to the balanceOf[_from] and balanceOf[_to]. If the value of _value is greater than the balance of the sender or receiver, it will cause an integer overflow."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }",
            "reason": "In the approve function, the value of _value is not checked before it is assigned to the allowance mapping. If the value of _value is greater than the maximum value of uint256, it will cause an integer overflow."
        },
        {
            "function_name": "setPrices",
            "vulnerability": "Integer Overflow",
            "function_code": "function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }",
            "reason": "In the setPrices function, the values of newSellPrice and newBuyPrice are not checked before they are assigned to the sellPrice and buyPrice variables. If the values of newSellPrice and newBuyPrice are greater than the maximum value of uint256, it will cause an integer overflow."
        },
        {
            "function_name": "buy",
            "vulnerability": "Integer Overflow",
            "function_code": "function buy() payable public {
        uint amount = msg.value / buyPrice;
        _transfer(this, msg.sender, amount);
    }",
            "reason": "In the buy function, the value of msg.value is divided by buyPrice to calculate the amount. If the value of buyPrice is zero, it will cause an integer overflow."
        }
    ]
}