{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) unFrozenAccount onlyTransferable {
    if (frozenAccount[_to]) {
        InvalidAccount(_to, "The receiver account is frozen");
    } else {
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        Transfer(msg.sender, _to, _value);
    } 
}",
            "reason": "In the transfer function, the subtraction of _value from the sender's balance and addition of _value to the receiver's balance can result in an integer overflow if the totalSupply is less than the sum of _value and the current balance of the sender."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) unFrozenAccount onlyTransferable{
    var _allowance = allowed[_from][msg.sender];
    require(!frozenAccount[_from]&&!frozenAccount[_to]);
    balances[_to] = balances[_to].add(_value);
    balances[_from] = balances[_from].sub(_value);
    allowed[_from][msg.sender] = _allowance.sub(_value);
    Transfer(_from, _to, _value);
}",
            "reason": "In the transferFrom function, the subtraction of _value from the sender's balance, addition of _value to the receiver's balance, and subtraction of _value from the sender's allowance can result in an integer overflow if the totalSupply is less than the sum of _value and the current balance of the sender."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint _value) unFrozenAccount {
    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
}",
            "reason": "In the approve function, the assignment of _value to the sender's allowance can result in an integer overflow if the totalSupply is less than _value."
        },
        {
            "function_name": "switchLiquidity",
            "vulnerability": "Bad Randomness",
            "function_code": "function switchLiquidity (bool _transferable) onlyOwner returns (bool success) {
    transferable=_transferable;
    return true;
}",
            "reason": "In the switchLiquidity function, the transferable variable is directly assigned the value of _transferable without any randomness or other checks. This can lead to unpredictable behavior and potential attacks."
        },
        {
            "function_name": "UBSexToken",
            "vulnerability": "Typo Constructor",
            "function_code": "function UBSexToken() {
    owner = msg.sender;
    totalSupply = 1.9 * 10 ** 26;
    balances[owner] = totalSupply;
}",
            "reason": "In the UBSexToken constructor, the totalSupply is set to 1.9 * 10 ** 26, which is a typo for 1.9 * 10 ** 26. This can lead to incorrect calculations and potential attacks."
        }
    ]
}