{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) throw;
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        Transfer(msg.sender, _to, _value);
    }",
            "reason": "In the transfer function, the addition operation can cause an integer overflow if the sum of balanceOf[_to] and _value is less than balanceOf[_to]. This can be exploited by an attacker to drain the contract's balance."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (balanceOf[_from] < _value) throw;
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;
        if (_value > allowance[_from][msg.sender]) throw;
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }",
            "reason": "In the transferFrom function, the addition operation can cause an integer overflow if the sum of balanceOf[_to] and _value is less than balanceOf[_to]. This can be exploited by an attacker to drain the contract's balance."
        },
        {
            "function_name": "distributeTokens",
            "vulnerability": "Integer Overflow",
            "function_code": "function distributeTokens(uint startIndex,uint endIndex) onlyOwner returns (uint) {
        uint distributed = 0;
        require(startIndex < endIndex);
        for(uint i = startIndex; i < lastIndex; i++){
            address holder = addresses[i+1];
            uint reward = balanceOf[holder] * 3 / 100;
            balanceOf[holder] += reward;
            distributed += reward;
            Transfer(0, holder, reward);
        }
        totalSupply += distributed;
        return distributed;
    }",
            "reason": "In the distributeTokens function, the multiplication operation can cause an integer overflow if the product of balanceOf[holder] and 3 is greater than the maximum value that can be represented by a uint256. This can be exploited by an attacker to distribute more tokens than the contract has."
        },
        {
            "function_name": "mintToken",
            "vulnerability": "Integer Overflow",
            "function_code": "function mintToken(address target, uint256 mintedAmount) onlyOwner {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        Transfer(0, this, mintedAmount);
        Transfer(this, target, mintedAmount);
    }",
            "reason": "In the mintToken function, the addition operation can cause an integer overflow if the sum of balanceOf[target] and mintedAmount is less than balanceOf[target]. This can be exploited by an attacker to mint more tokens than the contract has."
        },
        {
            "function_name": "buy",
            "vulnerability": "Integer Overflow",
            "function_code": "function buy() payable {
        uint amount = msg.value / buyPrice;
        if (balanceOf[this] < amount) throw;
        balanceOf[msg.sender] += amount;
        balanceOf[this] -= amount;
        Transfer(this, msg.sender, amount);
    }",
            "reason": "In the buy function, the division operation can cause an integer overflow if the quotient of msg.value and buyPrice is greater than the maximum value that can be represented by a uint256. This can be exploited by an attacker to buy more tokens than the contract has."
        }
    ]
}