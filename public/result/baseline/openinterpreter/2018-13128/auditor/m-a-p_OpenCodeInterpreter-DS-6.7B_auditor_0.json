{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint _value) public { require(!tokensAreFrozen); super.transfer(_to, _value); }",
            "reason": "In the transfer function, the value of _value is not checked before adding it to the balance of the recipient. If the sum of the balance and _value exceeds the maximum uint256 value, an integer overflow will occur."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) public { require(!tokensAreFrozen); super.transferFrom(_from, _to, _value); }",
            "reason": "In the transferFrom function, the value of _value is not checked before subtracting it from the balance of the sender. If the difference between the balance and _value is negative, an integer overflow will occur."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint _value) public { require(!tokensAreFrozen); super.approve(_spender, _value); }",
            "reason": "In the approve function, the value of _value is not checked before adding it to the allowance of the spender. If the sum of the allowance and _value exceeds the maximum uint256 value, an integer overflow will occur."
        },
        {
            "function_name": "mint",
            "vulnerability": "Integer Overflow",
            "function_code": "function mint(address _holder, uint _value) external { require(msg.sender == ico); require(_value != 0); require(totalSupply + _value <= TOKEN_LIMIT); balances[_holder] += _value; totalSupply += _value; emit Transfer(0x0, _holder, _value); }",
            "reason": "In the mint function, the value of _value is not checked before adding it to the balance of the holder. If the sum of the balance and _value exceeds the maximum uint256 value, an integer overflow will occur."
        },
        {
            "function_name": "burn",
            "vulnerability": "Integer Overflow",
            "function_code": "function burn(uint _value) public { require(msg.sender == ico); super.burn(_value); }",
            "reason": "In the burn function, the value of _value is not checked before subtracting it from the totalSupply. If the difference between the totalSupply and _value is negative, an integer overflow will occur."
        }
    ]
}