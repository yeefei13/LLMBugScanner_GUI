{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint _value) public returns (bool) {
      require(!isFrozen);
      return super.transfer(_to, _value);
  }",
            "reason": "The function does not check if the transfer amount exceeds the balance of the sender. An attacker can call this function with a large value to transfer more tokens than the sender has."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint _value) public returns (bool) {
      require(!isFrozen);
      return super.transferFrom(_from, _to, _value);
  }",
            "reason": "The function does not check if the transfer amount exceeds the balance of the sender. An attacker can call this function with a large value to transfer more tokens than the sender has."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint _value) public returns (bool) {
      require(!isFrozen);
      return super.approve(_spender, _value);
  }",
            "reason": "The function does not check if the approval amount exceeds the balance of the sender. An attacker can call this function with a large value to approve more tokens than the sender has."
        },
        {
            "function_name": "increaseApproval",
            "vulnerability": "Integer Overflow",
            "function_code": "function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }",
            "reason": "The function does not check if the new approval amount exceeds the current approval. An attacker can call this function with a large value to increase the approval more than the current approval has."
        },
        {
            "function_name": "decreaseApproval",
            "vulnerability": "Integer Overflow",
            "function_code": "function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }",
            "reason": "The function does not check if the new approval amount is less than the current approval. An attacker can call this function with a large value to decrease the approval more than the current approval has."
        }
    ]
}