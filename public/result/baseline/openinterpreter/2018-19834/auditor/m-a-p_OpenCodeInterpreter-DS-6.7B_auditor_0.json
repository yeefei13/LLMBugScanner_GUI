{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) public returns (bool) {
    require(tokenBalances[msg.sender]>=_value);
    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);
    tokenBalances[_to] = tokenBalances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }",
            "reason": "In the transfer function, the subtraction of _value from tokenBalances[msg.sender] and addition of _value to tokenBalances[_to] does not check for integer overflow. This can lead to an integer overflow if the subtraction result is less than _value, which can cause the contract to lose tokens."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= tokenBalances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    tokenBalances[_from] = tokenBalances[_from].sub(_value);
    tokenBalances[_to] = tokenBalances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }",
            "reason": "In the transferFrom function, the subtraction of _value from tokenBalances[_from], addition of _value to tokenBalances[_to], and subtraction of _value from allowed[_from][msg.sender] does not check for integer overflow. This can lead to an integer overflow if the subtraction result is less than _value, which can cause the contract to lose tokens."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }",
            "reason": "In the approve function, the assignment of _value to allowed[msg.sender][_spender] does not check for integer overflow. This can lead to an integer overflow if the addition of _value to allowed[msg.sender][_spender] exceeds the maximum value of uint256."
        },
        {
            "function_name": "increaseApproval",
            "vulnerability": "Integer Overflow",
            "function_code": "function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }",
            "reason": "In the increaseApproval function, the addition of _addedValue to allowed[msg.sender][_spender] does not check for integer overflow. This can lead to an integer overflow if the addition of _addedValue to allowed[msg.sender][_spender] exceeds the maximum value of uint256."
        },
        {
            "function_name": "decreaseApproval",
            "vulnerability": "Integer Overflow",
            "function_code": "function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }",
            "reason": "In the decreaseApproval function, the subtraction of _subtractedValue from oldValue and the assignment of the result to allowed[msg.sender][_spender] does not check for integer overflow. This can lead to an integer overflow if the subtraction result is less than 0, which can cause the contract to lose tokens."
        }
    ]
}