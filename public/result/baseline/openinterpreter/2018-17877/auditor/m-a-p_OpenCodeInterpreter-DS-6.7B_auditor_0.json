{
    "output_list": [
        {
            "function_name": "getHeartPrice",
            "vulnerability": "Integer Overflow",
            "function_code": "function getHeartPrice() public view returns(uint256)
{
    return ( (RoundHeart[Round].add(1000000000000000000)).ethRec(1000000000000000000) );
}",
            "reason": "In the function getHeartPrice, the addition operation can result in an integer overflow if the sum of RoundHeart[Round] and 1000000000000000000 exceeds the maximum value of uint256. This can be exploited by an attacker to cause the contract to misbehave."
        },
        {
            "function_name": "getMyRevenue",
            "vulnerability": "Integer Overflow",
            "function_code": "function getMyRevenue(uint _round) public view returns(uint256)
{
    return(  (((RoundPayMask[_round]).mul(RoundMyHeart[_round][msg.sender])) / (1000000000000000000)).sub(RoundMyPayMask[_round][msg.sender])  );
}",
            "reason": "In the function getMyRevenue, the multiplication operation can result in an integer overflow if the product of RoundPayMask[_round] and RoundMyHeart[_round][msg.sender] exceeds the maximum value of uint256. This can be exploited by an attacker to cause the contract to misbehave."
        },
        {
            "function_name": "getTimeLeft",
            "vulnerability": "Integer Overflow",
            "function_code": "function getTimeLeft() public view returns(uint256)
{
    if(RoundTime[Round] == 0 || RoundTime[Round] < now)
        return 0;
    else 
        return( (RoundTime[Round]).sub(now) );
}",
            "reason": "In the function getTimeLeft, the subtraction operation can result in an integer overflow if the difference between RoundTime[Round] and now exceeds the maximum value of uint256. This can be exploited by an attacker to cause the contract to misbehave."
        },
        {
            "function_name": "updateTimer",
            "vulnerability": "Integer Overflow",
            "function_code": "function updateTimer(uint256 _hearts) private
{
    if(RoundTime[Round] == 0)
        RoundTime[Round] = RoundMaxTime.add(now);
    uint _newTime = (((_hearts) / (1000000000000000000)).mul(RoundIncrease)).add(RoundTime[Round]);
    if (_newTime < (RoundMaxTime).add(now))
        RoundTime[Round] = _newTime;
    else
        RoundTime[Round] = RoundMaxTime.add(now);
}",
            "reason": "In the function updateTimer, the addition operation can result in an integer overflow if the sum of _newTime and RoundMaxTime exceeds the maximum value of uint256. This can be exploited by an attacker to cause the contract to misbehave."
        },
        {
            "function_name": "buyHeart",
            "vulnerability": "Integer Overflow",
            "function_code": "function buyHeart(address referred) public payable {
    require(msg.value >= 1000000000, "pocket lint: not a valid currency");
    require(msg.value <= 100000000000000000000000, "no vitalik, no");
    address _addr = msg.sender;
    uint256 _codeLength;
    assembly {_codeLength := extcodesize(_addr)}
    require(_codeLength == 0, "sorry humans only");
    uint256 _hearts = (RoundETH[Round]).keysRec(msg.value);
    uint256 _pearn;
    require(_hearts >= 1000000000000000000);
    require(RoundTime[Round] > now || RoundTime[Round] == 0);
    updateTimer(_hearts);
    RoundHeart[Round] += _hearts;
    RoundMyHeart[Round][msg.sender] += _hearts;
    if (referred != address(0) && referred != msg.sender) {
         _pearn = (((msg.value.mul(30) / 100).mul(1000000000000000000)) / (RoundHeart[Round])).mul(_hearts)/ (1000000000000000000);
        onwerfee += (msg.value.mul(4) / 100);
        RoundETH[Round] += msg.value.mul(54) / 100;
        Luckybuy += msg.value.mul(2) / 100;
        MyreferredRevenue[referred] += (msg.value.mul(10) / 100);
        RoundPayMask[Round] += ((msg.value.mul(30) / 100).mul(1000000000000000000)) / (RoundHeart[Round]);
        RoundMyPayMask[Round][msg.sender] = (((RoundPayMask[Round].mul(_hearts)) / (1000000000000000000)).sub(_pearn)).add(RoundMyPayMask[Round][msg.sender]);
        emit referredEvent(msg.sender, referred, msg.value.mul(10) / 100);
    } else {
         _pearn = (((msg.value.mul(40) / 100).mul(1000000000000000000)) / (RoundHeart[Round])).mul(_hearts)/ (1000000000000000000);
        RoundETH[Round] += msg.value.mul(54) / 100;
        Luckybuy += msg.value.mul(2) / 100;
        onwerfee +=(msg.value.mul(4) / 100);
        RoundPayMask[Round] += ((msg.value.mul(40) / 100).mul(1000000000000000000)) / (RoundHeart[Round]);
        RoundMyPayMask[Round][msg.sender] = (((RoundPayMask[Round].mul(_hearts)) / (1000000000000000000)).sub(_pearn)).add(RoundMyPayMask[Round][msg.sender]);
    }
    if (msg.value >= 100000000000000000){
        luckybuyTracker_++;
        if (luckyBuy() == true) {
            msg.sender.transfer(Luckybuy);
            emit luckybuyEvent(msg.sender, Luckybuy, Round);
            luckybuyTracker_ = 0;
            Luckybuy = 0;
        }
    }
    RoundLastGreedyMan[Round] = msg.sender;
    emit buyheartEvent(msg.sender, _hearts, msg.value, Round, referred);
}",
            "reason": "In the function buyHeart, the multiplication operation can result in an integer overflow if the product of msg.value and _hearts exceeds the maximum value of uint256. This can be exploited by an attacker to cause the contract to misbehave."
        }
    ]
}