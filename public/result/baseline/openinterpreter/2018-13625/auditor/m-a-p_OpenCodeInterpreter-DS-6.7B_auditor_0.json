{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) {
        if (_to == 0x0) revert();
        if (balanceOf[msg.sender] < _value) revert();
        if (balanceOf[_to] + _value < balanceOf[_to]) revert();
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        Transfer(msg.sender, _to, _value);
    }
",
            "reason": "In the transfer function, the balanceOf[_to] + _value < balanceOf[_to] condition is not checked before subtracting the value from the sender's balance. This can lead to an integer overflow if the addition overflows."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (_to == 0x0) revert();
        if (balanceOf[_from] < _value) revert();
        if (balanceOf[_to] + _value < balanceOf[_to]) revert();
        if (_value > allowance[_from][msg.sender]) revert();
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }
",
            "reason": "In the transferFrom function, the balanceOf[_to] + _value < balanceOf[_to] condition is not checked before subtracting the value from the sender's balance. This can lead to an integer overflow if the addition overflows."
        },
        {
            "function_name": "lend",
            "vulnerability": "Integer Overflow",
            "function_code": "function lend(address _to, uint256 _value, uint256 _duration_in_days) {
        if (_to == 0x0) revert();
        if (balanceOf[msg.sender] < _value) revert();
        if (balanceOf[_to] + _value < balanceOf[_to]) revert();
        if (_duration_in_days > 36135) revert();
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        InterestFreeLending(msg.sender, _to, _value, _duration_in_days);
    }
",
            "reason": "In the lend function, the balanceOf[_to] + _value < balanceOf[_to] condition is not checked before subtracting the value from the sender's balance. This can lead to an integer overflow if the addition overflows."
        },
        {
            "function_name": "repayLoan",
            "vulnerability": "Integer Overflow",
            "function_code": "function repayLoan(address _to, uint256 _value, string _reference) {
        if (_to == 0x0) revert();
        if (balanceOf[msg.sender] < _value) revert();
        if (balanceOf[_to] + _value < balanceOf[_to]) revert();
        if (bytes(_reference).length != 66) revert();
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        LoanRepaid(msg.sender, _to, _value, _reference);
    }
",
            "reason": "In the repayLoan function, the balanceOf[_to] + _value < balanceOf[_to] condition is not checked before subtracting the value from the sender's balance. This can lead to an integer overflow if the addition overflows."
        },
        {
            "function_name": "mintlvlToken",
            "vulnerability": "Integer Overflow",
            "function_code": "function mintlvlToken(address target, uint256 mintedAmount) onlyOwner {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        Transfer(0, this, mintedAmount);
        Transfer(this, target, mintedAmount);
    }
",
            "reason": "In the mintlvlToken function, the balanceOf[target] + mintedAmount < balanceOf[target] condition is not checked before adding the mintedAmount to the target's balance. This can lead to an integer overflow if the addition overflows."
        }
    ]
}