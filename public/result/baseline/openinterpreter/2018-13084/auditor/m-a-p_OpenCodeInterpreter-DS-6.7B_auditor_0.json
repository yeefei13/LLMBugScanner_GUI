{
    "output_list": [
        {
            "function_name": "StandardToken",
            "vulnerability": "Integer Overflow",
            "function_code": "function StandardToken(uint256 initialSupply, string tokenName, string tokenSymbol) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;                 
        name = tokenName;                                    
        symbol = tokenSymbol;                                
    }",
            "reason": "In the constructor function, the totalSupply is calculated by multiplying the initialSupply with 10 to the power of the decimals. If the initialSupply is too large, it can cause an integer overflow."
        },
        {
            "function_name": "_transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function _transfer(address _from, address _to, uint _value) {
        require(_to != 0x0);
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }",
            "reason": "In the _transfer function, the balance of the sender and receiver are updated by subtracting and adding the value. If the value is too large, it can cause an integer overflow."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }",
            "reason": "In the approve function, the allowance is set by assigning the value to the allowance mapping. If the value is too large, it can cause an integer overflow."
        },
        {
            "function_name": "burn",
            "vulnerability": "Integer Overflow",
            "function_code": "function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        balanceOf[msg.sender] -= _value;             
        totalSupply -= _value;                       
        Burn(msg.sender, _value);
        return true;
    }",
            "reason": "In the burn function, the balance of the sender is updated by subtracting the value. If the value is too large, it can cause an integer overflow."
        },
        {
            "function_name": "burnFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                 
        require(_value <= allowance[_from][msg.sender]);     
        balanceOf[_from] -= _value;                          
        allowance[_from][msg.sender] -= _value;              
        totalSupply -= _value;                               
        Burn(_from, _value);
        return true;
    }",
            "reason": "In the burnFrom function, the balance of the sender and the allowance are updated by subtracting the value. If the value is too large, it can cause an integer overflow."
        }
    ]
}