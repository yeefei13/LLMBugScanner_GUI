{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _amount) notThisContract(_to) returns (bool success) {
          require(_to != 0x0);
tt  require(_amount > 0);
tt  require(balances[msg.sender] >= _amount);
tt  require(balances[_to] + _amount > balances[_to]);
tt  balances[msg.sender] -= _amount;
          balances[_to] += _amount;tt  Transfer(msg.sender, _to, _amount);
tt  return true;
      }
",
            "reason": "In the transfer function, the addition of _amount to balances[_to] can cause an integer overflow if balances[_to] + _amount > balances[_to] is not checked."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _amount) notThisContract(_to) returns (bool success) {
tt   require(balances[_from] >= _amount);
tt   require(allowed[_from][msg.sender] >= _amount);
tt   require(_amount > 0);
tt   require(balances[_to] + _amount > balances[_to]);
tt   balances[_from] -= _amount;
           allowed[_from][msg.sender] -= _amount;
           balances[_to] += _amount;
           Transfer(_from, _to, _amount);
           return true;
     }
",
            "reason": "In the transferFrom function, the addition of _amount to balances[_to] can cause an integer overflow if balances[_to] + _amount > balances[_to] is not checked."
        },
        {
            "function_name": "approve",
            "vulnerability": "Bad Randomness",
            "function_code": "function approve(address _spender, uint256 _amount) returns (bool) {
ttrequire((_amount == 0) || (allowed[msg.sender][_spender] == 0));
ttallowed[msg.sender][_spender] = _amount;
ttApproval(msg.sender, _spender, _amount);
ttreturn true;
t}
",
            "reason": "In the approve function, the randomness of the allowed value is not checked. It directly assigns _amount to allowed[msg.sender][_spender] without checking if it is greater than the current value."
        },
        {
            "function_name": "increaseApproval",
            "vulnerability": "Integer Overflow",
            "function_code": "function increaseApproval (address _spender, uint _addedValue) returns (bool success) {
        allowed[msg.sender][_spender] += _addedValue;
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
      }
",
            "reason": "In the increaseApproval function, the addition of _addedValue to allowed[msg.sender][_spender] can cause an integer overflow if allowed[msg.sender][_spender] + _addedValue > allowed[msg.sender][_spender] is not checked."
        },
        {
            "function_name": "decreaseApproval",
            "vulnerability": "Integer Overflow",
            "function_code": "function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
          allowed[msg.sender][_spender] = 0;
        } else {
          allowed[msg.sender][_spender] -= _subtractedValue;
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
      }
",
            "reason": "In the decreaseApproval function, the subtraction of _subtractedValue from allowed[msg.sender][_spender] can cause an integer overflow if allowed[msg.sender][_spender] - _subtractedValue < allowed[msg.sender][_spender] is not checked."
        }
    ]
}