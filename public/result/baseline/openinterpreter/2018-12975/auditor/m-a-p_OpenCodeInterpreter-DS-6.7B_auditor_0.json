{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }",
            "reason": "The function transfers an amount of tokens from the sender to another address. However, it does not check if the subtraction of the transferred amount from the sender's balance will result in a non-negative value. This can lead to an integer overflow if the sender has insufficient balance."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }",
            "reason": "The function approves a spender to transfer a certain amount of tokens from the caller's balance. However, it does not check if the addition of the approved amount to the caller's allowance will result in a non-overflow value. This can lead to an integer overflow if the spender has already approved a large amount of tokens."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }",
            "reason": "The function transfers a certain amount of tokens from one address to another. It also updates the allowance of the sender for the spender. However, it does not check if the subtraction of the transferred amount from the sender's balance and the subtraction of the transferred amount from the sender's allowance will result in non-negative values. This can lead to integer overflow if the sender has insufficient balance or allowance."
        },
        {
            "function_name": "increaseApproval",
            "vulnerability": "Integer Overflow",
            "function_code": "function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }",
            "reason": "The function increases the allowance of a spender for a certain amount of tokens. However, it does not check if the addition of the increased allowance to the caller's allowance will result in a non-overflow value. This can lead to an integer overflow if the spender has already approved a large amount of tokens."
        },
        {
            "function_name": "decreaseApproval",
            "vulnerability": "Integer Overflow",
            "function_code": "function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }",
            "reason": "The function decreases the allowance of a spender for a certain amount of tokens. However, it does not check if the subtraction of the decreased allowance from the caller's allowance will result in a non-negative value. This can lead to an integer overflow if the spender has already approved a large amount of tokens."
        }
    ]
}