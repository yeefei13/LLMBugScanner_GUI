{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }",
            "reason": "In the transfer function, the subtraction of _value from balances[msg.sender] and addition of _value to balances[_to] could result in an integer overflow if _value is greater than balances[msg.sender]. This could allow an attacker to transfer more tokens than they actually have."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }",
            "reason": "In the transferFrom function, the subtraction of _value from balances[_from] and addition of _value to balances[_to] could result in an integer overflow if _value is greater than balances[_from]. This could allow an attacker to transfer more tokens than they actually have."
        },
        {
            "function_name": "approve",
            "vulnerability": "Integer Overflow",
            "function_code": "function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }",
            "reason": "In the approve function, the assignment of _value to allowed[msg.sender][_spender] could result in an integer overflow if _value is greater than the maximum value that can be stored in the uint256 data type. This could allow an attacker to approve a transfer of more tokens than they actually have."
        },
        {
            "function_name": "mint",
            "vulnerability": "Integer Overflow",
            "function_code": "function mint(address _holder, uint _value) external {
    require(msg.sender == presale);
    require(_value > 0);
    require(totalSupply + _value <= TOKEN_LIMIT);
    balances[_holder] += _value;
    totalSupply += _value;
    Transfer(0x0, _holder, _value);
  }",
            "reason": "In the mint function, the addition of _value to balances[_holder] and totalSupply could result in an integer overflow if _value is greater than the maximum value that can be stored in the uint256 data type. This could allow an attacker to mint more tokens than the TOKEN_LIMIT allows."
        },
        {
            "function_name": "buyTokens",
            "vulnerability": "Integer Overflow",
            "function_code": "function buyTokens(address _buyer, uint256 _value) internal returns (uint) {
    require(_buyer != address(0));
    require(_value > 0);
    require(preSaleState == PreSaleState.PreSaleStarted);
    require(!isPaused);
    uint256 boughtTokens = _value / pricePerToken;
    require(boughtTokens > 0);
    token.mint(_buyer, boughtTokens);
    TokenBuy(_buyer, boughtTokens);
  }",
            "reason": "In the buyTokens function, the division of _value by pricePerToken could result in an integer overflow if _value is greater than the maximum value that can be stored in the uint256 data type. This could allow an attacker to buy more tokens than they can afford."
        }
    ]
}