{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }",
            "reason": "The function transfer does not check if the sum of the current balance of the recipient and the value being transferred exceeds the maximum uint256 value. This can lead to an integer overflow, potentially allowing an attacker to drain the contract's balance."
        },
        {
            "function_name": "_transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }",
            "reason": "The function _transfer does not check if the sum of the current balance of the recipient and the value being transferred exceeds the maximum uint256 value. This can lead to an integer overflow, potentially allowing an attacker to drain the contract's balance."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Integer Overflow",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }",
            "reason": "The function transferFrom does not check if the sum of the current balance of the recipient and the value being transferred exceeds the maximum uint256 value. This can lead to an integer overflow, potentially allowing an attacker to drain the contract's balance."
        },
        {
            "function_name": "approveAndCall",
            "vulnerability": "Integer Overflow",
            "function_code": "function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }",
            "reason": "The function approveAndCall does not check if the sum of the current allowance and the value being approved exceeds the maximum uint256 value. This can lead to an integer overflow, potentially allowing an attacker to drain the contract's balance."
        },
        {
            "function_name": "burn",
            "vulnerability": "Integer Overflow",
            "function_code": "function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        emit Burn(msg.sender, _value);
        return true;
    }",
            "reason": "The function burn does not check if the current balance of the sender is greater than or equal to the value being burned. This can lead to an integer overflow, potentially allowing an attacker to burn more tokens than they have."
        }
    ]
}