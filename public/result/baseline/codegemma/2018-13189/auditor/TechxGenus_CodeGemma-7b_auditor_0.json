tput: 
{
    "output_list": [
        {
            "function_name": "pricePerWei()",
            "vulnerability": "Weak Randomness",
            "function_code": "function pricePerWei() public constant returns(uint) {
    if     (now <  1511799420) return 800.0 * 1 ether;
    else if(now <  1511885820) return 750.0 * 1 ether;
    else if(now <  1513181820) return 675.0 * 1 ether;
    else if(now <  1515514620) return 575.0 * 1 ether;
    else if(now <  1516205820) return 537.5 * 1 ether;
    else                                                return 500.0 * 1 ether;
}",
            "reason": "The function relies on hardcoded values for the dates of the ICO. This makes the function non-reputable and potentially misleading. If the ICO dates change, the function will not reflect this. This vulnerability could be exploited by attackers who could potentially change the dates of the ICO in their favor. This would lead to a significant loss of money for investors."
        },
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint _value) whenNotPaused returns (bool) {
    balances[_to] = balances[_to].add(_value);
    balances[msg.sender] = balances[msg.sender].sub(_value);
    Transfer(msg.sender, _to, _value);
    return true;
}",
            "reason": "The function `transfer` in the `BasicToken` contract has no checks to prevent integer overflow. If the value transferred is greater than the balance of the sender, the balance of the sender will be negative. This could lead to potential bugs and could be exploited by attackers. This is a severe vulnerability as it could lead to loss of funds for investors."
        },
        {
            "function_name": "mint",
            "vulnerability": "Wrong Logic",
            "function_code": "function mint(address _x, uint _v) public onlyOwner { 
    balances[_x] += _v; 
    totalSupply += _v; 
    Transfer(0x0, _x, _v); 
}",
            "reason": "The function `mint` in the `UNLB` contract is vulnerable to manipulation. The function increases the total supply of tokens and can potentially be exploited to create more tokens than the specified limit. This could lead to a destabilized market and loss of investor confidence."
        },
        {
            "function_name": "finish",
            "vulnerability": "Access Control",
            "function_code": "function finish(address _team, address _fund, address _bounty, address _backers) external onlyOwner { 
    require(now >= ICO_END_DATE && !isFinished); 
    unlb.unpause(); 
    isFinished = true; 
    uint _total = unlb.totalSupply() * 100 / (100 - 12 - 15 - 5 - 3); 
    unlb.mint(_team,   (_total * 12) / 100); 
    unlb.mint(_fund,   (_total * 15) / 100); 
    unlb.mint(_bounty, (_total *  5) / 100); 
    unlb.mint(_backers, (_total *  3) / 100); 
}",
            "reason": "The function `finish` in the `ICO` contract is vulnerable to manipulation. The function can only be called by the owner and there is no protection to prevent another team from calling it. This could potentially allow a team to manipulate the ICO and cause a potential security breach. This is a severe vulnerability as it could lead to a loss of investor confidence and potential financial loss."
        }
    ]
}<eos>