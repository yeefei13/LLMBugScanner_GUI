tput: 
{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) unFrozenAccount onlyTransferable {
    if (frozenAccount[_to]) {
        InvalidAccount(_to, "The receiver account is frozen");
    } else {
        balances[_to] = balances[_to].add(_value);
        balances[_from] = balances[_from].sub(_value);
        Transfer(_from, _to, _value);
    } 
}",
            "reason": "The transfer function is susceptible to integer overflow, which can lead to incorrect values being stored in the contract's balance fields."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Wrong Logic",
            "function_code": "function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) unFrozenAccount onlyTransferable {
    var _allowance = allowed[_from][msg.sender];
    require(!frozenAccount[_from]&&!frozenAccount[_to]);
    balances[_to] = balances[_to].add(_value);
    balances[_from] = balances[_from].sub(_value);
    allowed[_from][msg.sender] = _allowance.sub(_value);
    Transfer(_from, _to, _value);
}",
            "reason": "The transferFrom function incorrectly allows frozen account to transfer tokens, which violates the smart contract's access control principle."
        }
    ]
}<eos>