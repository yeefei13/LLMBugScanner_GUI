tput:
{
    "output_list": [
        {
            "function_name": "transfer",
            "vulnerability": "Integer Overflow",
            "function_code": "function transfer(address _to, uint256 _value) public {
    _transfer(msg.sender, _to, _value);
}",
            "reason": "If the value of the transaction is larger than the balance of the sender, it will cause an integer overflow, allowing the attacker to transfer more funds than the account actually owns."
        },
        {
            "function_name": "transferFrom",
            "vulnerability": "Access Control",
            "function_code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
    require(_value <= allowance[_from][msg.sender];)
    allowance[_from][msg.sender] -= _value;
    _transfer(_from, _to, _value);
    return true;
}",
            "reason": "The function allows the owner to transfer funds from a frozen account, which should not be possible."
        },
        {
            "function_name": "burn",
            "vulnerability": "Token Devalue",
            "function_code": "function burn(uint256 _value) public returns (bool success) {
    require(balanceOf[msg.sender] >= _value);
    balanceOf[msg.sender] -= _value;
    totalSupply -= _value;
    emit Burn(msg.sender, _value);
    return true;
}",
            "reason": "The function allows the owner to burn tokens from an account, which should only be possible if the account has enough balance."
        },
        {
            "function_name": "freezeAccount",
            "vulnerability": "Bad Randomness",
            "function_code": "function freezeAccount(address target, bool freeze) onlyOwner public {
    frozenAccount[target] = freeze;
    emit FrozenFunds(target, freeze);
}",
            "reason": "The function is susceptible to a bad random number generator, which could potentially freeze the account of a user who tries to interact with the contract."
        },
        {
            "function_name": "mintToken",
            "vulnerability": "Integer Overflow",
            "function_code": "function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    totalSupply += mintedAmount;
    emit Transfer(0, this, mintedAmount);
    emit Transfer(this, target, mintedAmount);
}",
            "reason": "The function allows the owner to mint new tokens, which should only be possible if the account has enough balance."
        }
    ]
}<eos>