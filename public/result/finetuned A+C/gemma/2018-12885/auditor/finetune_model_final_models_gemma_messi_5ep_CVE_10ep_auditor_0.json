{"output_list": [{"function_name": "setChampForSale", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setChampForSale function allows the owner to set the champion as a 'for sale' item."}]}
{"output_list": [{"function_name": "buyChamp", "vulnerability": "Integer Overflow", "reason": "Integer overflow in buyChamp function allows the owner to buy the champion as a 'for sale' item."}]}
{"output_list": [{"function_name": "giveChamp", "vulnerability": "Integer Overflow", "reason": "Integer overflow in giveChamp function allows the owner to give the champion as a 'for sale' item."}]}
{"output_list": [{"function_name": "setOwner", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setOwner function allows the owner to set the champion as a 'for sale' item."}]}
{"output_list": [{"function_name": "cancelChampSale", "vulnerability": "Integer Overflow", "reason": "Integer overflow in cancelChampSale function allows the owner to cancel the champion sale."}]}
{"output_list": [{"function_name": "distributeSaleInput", "vulnerability": "Integer Overflow", "reason": "Integer overflow in distributeSaleInput function allows the owner to distribute the sale proceeds."}]}
{"output_list": [{"function_name": "onlyOwnerOfChamp", "vulnerability": "Integer Overflow", "reason": "Integer overflow in onlyOwnerOfChamp function allows the owner to set the champion as a 'for sale' item."}]}
{"output_list": [{"function_name": "onlyOwnerOfItem", "vulnerability": "Integer Overflow", "reason": "Integer overflow in onlyOwnerOfItem function allows the owner to set the item as a 'for sale' item."}]}
{"output_list": [{"function_name": "setParams", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setParams function allows the owner to set the champion parameters."}]}
{"output_list": [{"function_name": "myCryptoChampCore", "vulnerability": "Integer Overflow", "reason": "Integer overflow in myCryptoChampCore function allows the owner to create the core of the ChampMarket."}]}
{
    "output_list": [{"function_name": "myCryptoChampCore", "vulnerability": "Integer Overflow", "reason": "Integer overflow in myCryptoChampCore function allows the owner to create the core of the ChampMarket."}]}
}
{
    "output_list": [{"function_name": "setOwner", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setOwner function allows the owner to set the champion as a 'for sale' item."}]}
{
    "output_list": [{"function_name": "cancelChampSale", "vulnerability": "Integer Overflow", "reason": "Integer overflow in cancelChampSale function allows the owner to cancel the champion sale."}]}
{
    "output_list": [{"function_name": "distributeSaleInput", "vulnerability": "Integer Overflow", "reason": "Integer overflow in distributeSaleInput function allows the owner to distribute the sale proceeds."}]}
{
    "output_list": [{"function_name": "onlyOwnerOfChamp", "vulnerability": "Integer Overflow", "reason": "Integer overflow in onlyOwnerOfChamp function allows the owner to set the champion as a 'for sale' item."}]
{
    "output_list": [{"function_name": "onlyOwnerOfItem", "vulnerability": "Integer Overflow", "reason": "Integer overflow in onlyOwnerOfItem function allows the owner to set the item as a 'for sale' item."}]
{
    "output_list": [{"function_name": "setParams", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setParams function allows the owner to set the champion parameters."}]
{
    "output_list": [{"function_name": "myCryptoChampCore", "vulnerability": "Integer Overflow", "reason": "Integer overflow in myCryptoChampCore function allows the owner to create the core of the ChampMarket."}]
}
{
    "output_list": [{"function_name": "setOwner", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setOwner function allows the owner to set the champion as a 'for sale' item."}]
{
    "output_list": [{"function_name": "cancelChampSale", "vulnerability": "Integer Overflow", "reason": "Integer overflow in cancelChampSale function allows the owner to cancel the champion sale."}]
{
    "output_list": [{"function_name": "distributeSaleInput", "vulnerability": "Integer Overflow", "reason": "Integer overflow in distributeSaleInput function allows the owner to distribute the sale proceeds."}]
{
    "output_list": [{"function_name": "onlyOwnerOfChamp", "vulnerability": "Integer Overflow", "reason": "Integer overflow in onlyOwnerOfChamp function allows the owner to set the champion as a 'for sale' item."}]
{
    "output_list": [{"function_name": "onlyOwnerOfItem", "vulnerability": "Integer Overflow", "reason": "Integer overflow in onlyOwnerOfItem function allows the owner to set the item as a 'for sale' item."}]
{
    "output_list": [{"function_name": "setParams", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setParams function allows the owner to set the champion parameters."}]
{
    "output_list": [{"function_name": "myCryptoChampCore", "vulnerability": "Integer Overflow", "reason": "Integer overflow in myCryptoChampCore function allows the owner to create the core of the ChampMarket."}]
}
{
    "output_list": [{"function_name": "setOwner", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setOwner function allows the owner to set the champion as a 'for sale' item."}]
{
    "output_list": [{"function_name": "cancelChampSale", "vulnerability": "Integer Overflow", "reason": "Integer overflow in cancelChampSale function allows the owner to cancel the champion sale."}]
{
    "output_list": [{"function_name": "distributeSaleInput", "vulnerability": "Integer Overflow", "reason": "Integer overflow in distributeSaleInput function allows the owner to distribute the sale proceeds."}]
{
        uint256 totalBalance;
        uint256 totalRemaining;
        uint256 userA;
        uint256 userB;
        uint256 amountGivenToOwner;
        uint256 amountRetained;
        uint256 inputFromOwner;
        uint256 inputToOwner;
        uint256 price;
        uint256 total;
        function setBalance() {
            totalBalance = totalBalance + amountGivenToOwner;
        }
        function setRemaining() {
            totalRemaining = totalRemaining + amountRetained;
        }
        function setOwner(address _owner) {
            userA = _owner;
        }
        function setUserB(address _userB) {
            userB = _userB;
        }
        function setAmountGivenToOwner(uint256 _amountGivenToOwner) {
            amountGivenToOwner = _amountGivenToOwner;
        }
        function setAmountRetained(uint256 _amountRetained) {
            amountRetained = _amountRetained;
        }
        function setInputFromOwner(uint256 _inputFromOwner) {
            inputFromOwner = _inputFromOwner;
        }
        function setInputToOwner(uint256 _inputToOwner) {
            inputToOwner = _inputToOwner;
        }
        function setPrices(uint256 _price) {
            price = _price;
        }
        function() {
            totalBalance = totalBalance;
        }
        function() {
            totalRemaining = totalRemaining;
        }
        function setOwner(address owner, wnG_owner) external
        {
            userA = owner;
        }
        function setUserB(address userB) external
        {
            userB = userB;
        }
        function setAmountGivenToOwner(uint256 given) external
        {
            amountGivenToOwner = given;
        }
        function setAmountRetained(uint256 retained) external
        {
            amountRetained = retained;
        }
        function() {
            totalBalance = totalBalance;
        }
        function() {
            totalRemaining = totalRemaining;
        }
        function() {
            inputFromOwner = inputFromOwner;
        function() {
            inputToOwner = inputToOwner;
        function() {
            price = price;
        function() {
            totalBalance = totalBalance;
        }
        function() {
            totalRemaining = totalRemaining;
        }
        function() {
            address owner = msg.sender;
            address userB = userB;
            uint256 given = amountGivenToOwner;
            uint256 retained;
            uint256 price;
            uint256 totalBalance;
            uint256 userA;
            uint256 userB;
            uint256 totalRemaining;
            uint256 price;
        }
        function() {
            require(msg.sender == userA || msg.sender == userB);
        }
        function() {
            totalBalance = totalBalance;
        function() {
            totalRemaining = totalRemaining;
        }
        function() { {
            address owner = msg.sender;
            uint256 totalBalance;
        }
        function() {
            uint256 totalRemaining;
        }
        function() {
            uint256 price;
        function() {
            uint256 totalBalance;
        }
        function() {
            uint256 userB;
            uint256 price;
            address owner;
            uint256 userA;
            uint256 userB;
            uint256 price;
            totalBalance = totalBalance;
        }
        uint256 totalRemaining;
        function() {
            require(msg.sender == userA);
            require(msg.sender.value == price);
        }
        function() { ($.setOwner(owner));
    }
    function() {
        require(msg.sender == userB);
        function() {
            uint256 totalRemaining;
        function() {
            require(msg.sender == userA || msg.sender == userB);
        }
        totalBalance = totalBalance;
    }
    function() {
        uint256 userA;
        uint256 userB;
        uint256 price;
        uint256 totalRemaining;
        function() {
            owner = msg.sender;
        function() {
            userA = userA;
            userB = userB;
        }
        function() {
            require(msg.sender == userA || msg.sender == userB);
        }
        totalBalance = totalBalance;
    }
    function() {
        totalRemaining = totalRemaining;
    }
    function() {
        address owner = msg.sender;
        uint256 totalBalance;
        function() {
            uint256 userB;
            function() {
                require(msg.sender == userA);
            totalBalance = totalBalance;
        }
        function() { {
            userB = userB;
            function() {
                u524du56deu306e;
            uint256 userA;
            uint256 userB;
        }
        function() {
            owner.value = totalRemaining;
        }
    }
    function() { { {
        uint256 totalBalance;
        function() {
            uint256 userA;
        function() { {
            uint256 userB;
        }
        function() {
            uint256 totalRemaining;
        }
        function() { { {
            address owner;
            uint256 userA;
            uint256 userB;
        }
        uint256 totalRemaining;
        function() {
            uint256 totalBalance;
        function() { {
            uint256 userA;
            uint256 userB;
        }
        function() { {
            totalRemaining;
        uint256 userA;
            uint256 userB;
        function() {
            owner = msg.sender;
            userA;
        function() {
            uint256 userB;
            totalBalance;
        function() { {
            uint256 totalBalance;
            function() { { {
                uint256 userA;
            uint256 userB;
        }
        function() { { {
            uint256 userA;
        function() {
            uint256 userB;
        uint256 totalBalance;
        function() {
            owner == userA;
        function() {
            uint256 userA;
            uint256 userB;
        }
        function() {
            uint256 userA;
        function() {
            uint256 userB;
        function() {
            totalBalance;
        function() {
            userA;
        function() {
            userB;
        }
        function() { {
            uint256 userA;
        function() {
            uint256 userB;
        function() {
            uint256 userA;
        function() {
            uint256;
        function() {
            userA;
        function() {
            userB;
        function() {
            userA;
        function() { { { { { {
            userA;
        function() { {
            userB;
        function() {
        function() {
            userA;
        
        function() {
            userB;
        function() {
        function() {
            userA;
        function() {
            userB;
        function() {
        function() { ($. ($.39);
        function() { {
            userA;
        

        function() {
            userB;
        function() {
            userA;

        function() {
            userB;
        function() {
            owner = msg.
        function() {
            userA;

            userB;

        function() {
            userA;

        function() {
            userB;

            userA;

        function() {
            userB;

        

        
            userA;


256;
            userA;
            userB;
        function() {
            userA;

            userB;

            userB;



            userA;


256;
            userA;

256;

        function() {
            userA;


            userA;


        function() {
            userB;
        function() {

            userA;




        uint256;

            userB;

            userA;

            owner.. they.. theValue;
            owner. theValue;

        function() {


256;
        function() {
            userA;

        uint25;

            userA;

            userB;

        uint25;

            userA;

        function() {
            userB;
        uint256;
            
        uint25;
            userA;

        owner.. theNewValue //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// //// ////
            userB;

256;

            userA;

2250;

239;





253;
tttuint29;

23;

tttuint23;
tttuint23;

tttuint23;
tttuint23;
        userA;

        userB;

tttuint23;
tttuint244;
tttuint23;
tttuint23;
tttuint23;

        uint23;

        uint23;

ttuint23;
tttuint24;
ttuint23;
tttuint23;
ttuint23;

tttuint23;
ttuint23;


tttuint23;

        owner.. the owner34;
ttuint23;
        uint23;
tttuint23;
        uint23;
        uint23;

        uint23;
tttuint23;
ttuint23;
        uint23;
        uint23;
ttuint230;
        userA;
ttuint23;
        
        uint23;
ttuint23;;;
        uint23;
ttuint23;
ttuint23;
tttuint23;
ttuint23;
ttuint23;