{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "The mintToken function has an integer overflow that allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "buy", "vulnerability": "Wrong Logic", "reason": "The buy function uses the setPrices function to change the buyPrice, which affects the price the owner uses to buy tokens."}]}
{"output_list": [{"function_name": "selfdestructs", "vulnerability": "Integer Overflow", "reason": "The selfdestructs function has an integer overflow that allows the owner to set the balance of the contract to zero, effectively burning all the tokens in the contract."}]}
{"output_list": [{"function_name": "<function_name>", "vulnerability": "<vulnerability_type>", "reason": "<vulnerability_reason>"}]}
  function setPrices(uint256 newBuyPrice) onlyOwner public {
    buyPrice = newBuyPrice;
  }
  function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    totalSupply += mintedAmount;
    emit Transfer(0, this, mintedAmount);
    emit Transfer(this, target, mintedAmount);
  }
  function buy() payable public {
    uint amount = msg.value / buyPrice;               
    _transfer(this, msg.sender, amount);              
  }
  function selfdestructs() onlyOwner public {
    selfdestruct(owner);
  }
}
contract BurnFromERC20 is owned, EncryptedToken {
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        require(_value <= allowance[msg.sender]);    
        balanceOf[msg.sender] -= _value;                         
        allowance[msg.sender] -= _value;                           
        totalSupply -= _value;                              
        Burn(msg.sender, _value);
        return true;
    }
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from]);             
        require(_value <= allowance[_to]);             
        balanceOf[_from] -= _value;                         
        allowance[_from] -= _value;                           
        balanceOf[_to] -= _value;                             
        allowance[_to] -= _value;                             
        totalSupply -= _value;                              
        Burn(_from, _value);
        return true;
    }
}
contract OwnedDigitalAssets is owned {
    address public newOwner;
    function OwnedDigitalAssets(address _owner) owned() public {
        newOwner = _owner;
    }
    function transferOwnership(address _newOwner) onlyOwner public {
        owner = _newOwner;
    }
}
contract DigitalAssets is OwnedDigitalAssets {
    TokenERC20 public token;
    function DigitalAssets(address _owner, string _tokenName, string _tokenSymbol) OwnedDigitalAssets(_owner) public {
        token = TokenERC20(_tokenName, _tokenSymbol);
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        require(balanceOf[target] + mintedAmount > balanceOf[target]); 
        balanceOf[target] += mintedAmount;                           
        totalSupply += mintedAmount;                              
        token.mintToken(target, mintedAmount);
    }
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        require(_value <= allowance[msg.sender]);    
        require(token.burnFrom(msg.sender, _value));  
        balanceOf[msg.sender] -= _value;                         
        allowance[msg.sender] -= _value;                           
        totalSupply -= _value;                              
        Burn(msg.sender, _value);
        return true;
    }
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from]);             
        require(_value <= allowance[_to]);             
        balanceOf[_from] -= _value;                         
        allowance[_from] -= _value;                           
        balanceOf[_to] -= _value;                             
        allowance[_to] -= _value;                             
        totalSupply -= _value;                              
        Burn(_from, _value);
        return true;
    }
}
contract MyAdvancedToken is BurnFromERC20, DigitalAssets {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => uint256) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function MyAdvancedToken(address _owner, string _tokenName, string _tokenSymbol, uint256 _sellPrice, uint256 _buyPrice) DigitalAssets(_owner) BurnFromERC20() public {
        owner = _owner;
        token = TokenERC20(_tokenName, _tokenSymbol);
        sellPrice = _sellPrice;
        buyPrice = _buyPrice;
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        require(balanceOf[target] + mintedAmount > balanceOf[target]); 
        balanceOf[target] += mintedAmount;                           
        totalSupply += mintedAmount;                              
        token.mintToken(target, mintedAmount);
        frozenAccount[target] = true;
        emit FrozenFunds(target, true);
    }
    function burn(uint256 _value) public returns (bool success) {
        require(!frozenAccount[msg.sender]);                     
        require(balanceOf[msg.sender] >= _value);   
        require(_value <= allowance[msg.sender]);    
        require(token.burnFrom(msg.sender, _value));  
        balanceOf[msg.sender] -= _value;                         
        allowance[msg.sender] -= _value;                           
        totalSupply -= _value;                              
        Burn(msg.sender, _value);
        frozenAccount[msg.sender] = false;
        emit FrozenFunds(msg.sender, false);
        return true;
    }
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(!frozenAccount[_from]);                       
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from]);             
        require(_value <= allowance[_to]);             
        balanceOf[_from] -= _value;                         
        allowance[_from] -= _value;                           
        balanceOf[_to] -= _value;                             
        allowance[_to] -= _value;                             
        totalSupply -= _value;                              
        Burn(_from, _value);
        frozenAccount[_from] = true;
        frozenAccount[_to] = true;
        emit FrozenFunds(_from, true);
        emit FrozenFunds(_to, true);
        return true;
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable public {
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) public {
        require(this.balance >= amount * sellPrice);      
        msg.sender.transfer(amount * sellPrice);        
    }
}
contract GZSToken is MyAdvancedToken {
    string public name = "GZSToken";
    string public symbol = "GZSToken";
    uint8 public decimals = 18;  
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        require(balanceOf[target] + mintedAmount > balanceOf[target]); 
        balanceOf[target] += mintedAmount;                           
        totalSupply += mintedAmount;                              
        Transfer(0, this, mintedAmount);
        Transfer(this, target, mintedAmount);
        frozenAccount[target] = true;
        frozenAccount[this] = true;
        emit FrozenFunds(target, true);
        emit FrozenFunds(this, true);
    }
    function burn(uint256 _value) public returns (bool success) {
        require(!frozenAccount[msg.sender]);                     
        require(balanceOf[msg.sender] >= _value);   
        require(_value <= allowance[msg.sender]);    
        require(this.balance >= _value * sellPrice);      
        msg.sender.transfer( _value * sellPrice);        
        balanceOf[msg.sender] -= _value;                         
        allowance[msg.sender] -= _value;                           
        totalSupply -= _value;                              
        Burn(msg.sender, _value);
        frozenAccount[msg.sender] = true;
        frozenAccount[this] = true;
        emit FrozenFunds(msg.sender, true);
        emit FrozenFunds(this, true);
        return true;
    }
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(!frozenAccount[_from]);                       
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from]);             
        require(this.balance >= _value * sellPrice);      
        balanceOf[_from] -= _value;                         
        allowance[_from] -= _value;                           
        totalSupply -= _value;                              
        Burn(_from, _value);
        frozenAccount[_from] = true;
        frozenAccount[_this] = true;
        emit FrozenFunds(_from, true);
        emit FrozenFunds(_this, true);
        return true;
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable public {
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) public {
        require(this.balance >= amount * sellPrice);      
        msg.sender.transfer(amount * sellPrice);        
    }
}
contract GZSTokenPreSale is GZSToken {
    uint256 public startTime;
    uint256 public endTime;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function GZSTokenPreSale(uint256 _startTime, uint256 _endTime, string _tokenName, string _tokenSymbol) GZSToken(owner, _tokenName, _tokenSymbol) public {
        require(_startTime <= _endTime);                   
        startTime = _startTime;                         
        endTime = _endTime;                             
        frozenAccount[msg.sender] = true;                
        emit FrozenFunds(msg.sender, true);               
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        require(now <= endTime);                           
        require(balanceOf[target] + mintedAmount > balanceOf[target]); 
        balanceOf[target] += mintedAmount;                           
        totalSupply += mintedAmount;                              
        Transfer(0, this, mintedAmount);
        Transfer(this, target, mintedAmount);
        frozenAccount[target] = true;
        frozenAccount[this] = true;
        emit FrozenFunds(target, true);
        emit FrozenFunds(this, true);
    }
    function burn(uint256 _value) public returns (bool success) {
        require(now <= endTime);                           
        require(!frozenAccount[msg.sender]);                     
        require(balanceOf[msg.sender] >= _value);   
        require(_value <= allowance[msg.sender]);    
        require(this.balance >= _value * sellPrice);      
        balanceOf[msg.sender] -= _value;                         
        allowance[msg.sender] -= _value;                           
        totalSupply -= _value;                              
        Burn(msg.sender, _value);
        frozenAccount[msg.sender] = true;
        frozenAccount[this] = true;
        emit FrozenFunds(msg.sender, true);
        emit FrozenFunds(this, true);
        return true;
    }
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(now <= endTime);                           
        require(!frozenAccount[_from]);                       
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from]);             
        require(this.balance >= _value * sellPrice);      
        balanceOf[_from] -= _value;                         
        allowance[_from] -= _value;                           
        totalSupply -= _value;                              
        Burn(_from, _value);
        frozenAccount[_from] = true;
        frozenAccount[_this] = true;
        emit FrozenFunds(_from, true);
        emit FrozenFunds(_this, true);
        return true;
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable public {
        require(now <= endTime);                           
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) public {
        require(now <= endTime);                           
        require(!frozenAccount[msg.sender]);                     
        require(balanceOf[msg.sender] >= amount * sellPrice);      
        balanceOf[msg.sender] -= amount;                         
        allowance[msg.sender] -= amount;                           
        totalSupply -= amount;                              
        msg.sender.transfer(amount * sellPrice);        
    }
}
contract DigitalAssetsToken is GZSTokenPreSale {
    uint256 public totalAllocation;
    mapping (address => uint256) public totalAllocationOf;
    mapping (address => mapping (address => uint256)) public totalAllocationOfOf;
    function DigitalAssetsToken(uint256 _startTime, uint256 _endTime, string _tokenName, string _tokenSymbol) GZSTokenPreSale(_startTime, _endTime, _tokenName, _tokenSymbol) public {
        totalAllocation = 200000000;
        balanceOfOf[msg.sender] = totalAllocationOf[msg.sender];
    }
    function getMyTotalAllocation() public view returns (uint256){
        return totalAllocationOf[msg.sender];
    }
    function getOverallTotalAllocation() public view returns (uint256){
        return totalAllocation;
    }
    function setMyTotalAllocation(uint256 _value) public {
        totalAllocationOf[msg.sender] = _value;
        totalAllocationOfOf[msg.sender] = totalAllocationOfOf[msg.sender]Of(msg.sender);
        totalAllocation = _value;
    }
    function setMyTotalAllocationOf(address _address, uint256 _value) public {
        totalAllocationOfOf[_address] = totalAllocationOfOf[_address]Of(msg.sender);
        totalAllocationOfOf[_address]Of(_address) = _value;
    }
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        require(!frozenAccount[msg.sender]);                     
        balanceOf[msg.sender] -= _value;                         
        allowance[msg.sender] -= _value;                           
        totalSupply -= _value;                              
        Transfer(msg.sender, _to, _value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(!frozenAccount[_from]);                       
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from]);             
        require(balanceOf[_to] + _value > balanceOf[_to]);      
        balanceOf[_from] -= _value;                         
        allowance[_from] -= _value;                           
        totalSupply -= _value;                              
        Transfer(_from, _to, _value);
        return true;
    }
}
contract GZSTokenFactory {
    function create(address target, uint256 mintedAmount, string tokenName, string tokenSymbol) public returns (DigitalAssetsToken);
}
contract GZSTokenPreSaleFactory {
    function create(address target, uint256 mintedAmount, string tokenName, string tokenSymbol) public returns (GZSTokenPreSale);
}
contract GZSToken is DigitalAssetsToken, GZSTokenFactory {
    function burn(uint256 _value) public returns (bool success) {
        require