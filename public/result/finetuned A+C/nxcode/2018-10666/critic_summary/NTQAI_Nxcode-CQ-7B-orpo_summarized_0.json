{
    "output_list": [
        {
            "function_name": "mapping (address => uint256) public balanceOf;",
            "auditor_idx": 0,
            "vulnerability": "Integer Overflow",
            "criticism": "The mapping 'balanceOf' is vulnerable to integer overflow, which can lead to unprotected financial losses between accounts due to overflow of a fixed integer data type. This vulnerability can be exploited by malicious actors to manipulate the contract's state and cause financial losses.",
            "correctness": 7,
            "severity": 8,
            "profitability": 6
        },
        {
            "function_name": "function () external { throw; }",
            "auditor_idx": 0,
            "vulnerability": "Unhandled Fallback Function",
            "criticism": "The fallback function is currently unhandled, which means that any Ether sent to the contract will be lost. This vulnerability can be exploited by malicious actors to steal Ether from the contract.",
            "correctness": 6,
            "severity": 7,
            "profitability": 5
        },
        {
            "function_name": "function transfer(address _to, uint256 _amount) returns (bool success) {",
            "auditor_idx": 0,
            "vulnerability": "Unchecked Balance Subtraction",
            "criticism": "The function 'transfer' does not check if the balance of the sender is sufficient before subtracting the transfer amount. This vulnerability can be exploited by malicious actors to steal tokens from the contract.",
            "correctness": 7,
            "severity": 7,
            "profitability": 5
        },
        {
            "function_name": "function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {",
            "auditor_idx": 0,
            "vulnerability": "Unchecked Balance Subtraction",
            "criticism": "The function 'transferFrom' does not check if the balance of the sender is sufficient before subtracting the transfer amount. This vulnerability can be exploited by malicious actors to steal tokens from the contract.",
            "correctness": 7,
            "severity": 7,
            "profitability": 5
        },
        {
            "function_name": "function approve(address _spender, uint256 _amount) returns (bool success) {",
            "auditor_idx": 0,
            "vulnerability": "Unchecked Balance Subtraction",
            "criticism": "The function 'approve' does not check if the balance of the sender is sufficient before approving the transfer amount. This vulnerability can be exploited by malicious actors to steal tokens from the contract.",
            "correctness": 7,
            "severity": 7,
            "profitability": 5
        },
        {
            "function_name": "function approveAndCall(address _spender, uint256 _amount, bytes _extraData) returns (bool success) {",
            "auditor_idx": 0,
            "vulnerability": "Unchecked Balance Subtraction",
            "criticism": "The function 'approveAndCall' does not check if the balance of the sender is sufficient before approving the transfer amount. This vulnerability can be exploited by malicious actors to steal tokens from the contract.",
            "correctness": 7,
            "severity": 7,
            "profitability": 5
        },
        {
            "function_name": "function setExportFee(address addr, uint256 fee) onlyOwner {",
            "auditor_idx": 0,
            "vulnerability": "Unchecked Balance Subtraction",
            "criticism": "The function 'setExportFee' does not check if the balance of the sender is sufficient before setting the export fee. This vulnerability can be exploited by malicious actors to steal tokens from the contract.",
            "correctness": 7,
            "severity": 7,
            "profitability": 5
        },
        {
            "function_name": "function setHoldingPeriod(uint256 ts) onlyOwner {",
            "auditor_idx": 0,
            "vulnerability": "Unchecked Balance Subtraction",
            "criticism": "The function 'setHoldingPeriod' does not check if the balance of the sender is sufficient before setting the holding period. This vulnerability can be exploited by malicious actors to steal tokens from the contract.",
            "correctness": 7,
            "severity": 7,
            "profitability": 5
        },
        {
            "function_name": "function feeFor(address from, address to, uint256 amount) constant external returns (uint256 value) {",
            "auditor_idx": 0,
            "vulnerability": "Unchecked Balance Subtraction",
            "criticism": "The function 'feeFor' does not check if the balance of the sender is sufficient before calculating the fee. This vulnerability can be exploited by malicious actors to steal tokens from the contract.",
            "correctness": 7,
            "severity": 7,
            "profitability": 5
        },
        {
            "function_name": "function unlockToken() onlyOwner {",
            "auditor_idx": 0,
            "vulnerability": "Unchecked Balance Subtraction",
            "criticism": "The function 'unlockToken' does not check if the balance of the sender is sufficient before unlocking the token. This vulnerability can be exploited by malicious actors to steal tokens from the contract.",
            "correctness": 7,
            "severity": 7,
            "profitability": 5
        },
        {
            "function_name": "function precalculate() internal returns (bool success) {",
            "auditor_idx": 0,
            "vulnerability": "Unchecked Balance Subtraction",
            "criticism": "The function 'precalculate' does not check if the balance of the sender is sufficient before precalculating the values. This vulnerability can be exploited by malicious actors to steal tokens from the contract.",
            "correctness": 7,
            "severity": 7,
            "profitability": 5
        },
        {
            "function_name": "function div10(uint256 a, uint8 b) internal returns (uint256 result) {",
            "auditor_idx": 0,
            "vulnerability": "Unchecked Balance Subtraction",
            "criticism": "The function 'div10' does not check if the balance of the sender is sufficient before dividing the values. This vulnerability can be exploited by malicious actors to steal tokens from the contract.",
            "correctness": 7,
            "severity": 7,
            "profitability": 5
        },
        {
            "function_name": "function pow10(uint256 a, uint8 b) internal returns (uint256 result) {",
            "auditor_idx": 0,
            "vulnerability": "Unchecked Balance Subtraction",
            "criticism": "The function 'pow10' does not check if the balance of the sender is sufficient before raising the values. This vulnerability can be exploited by malicious actors to steal tokens from the contract.",
            "correctness": 7,
            "severity": 7,
            "profitability": 5
        }
    ]
}