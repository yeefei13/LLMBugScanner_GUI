 {
    "output_list": [
        {
            "function_name": "mintCoins",
            "vulnerability": "Integer Overflow",
            "reason": "The minting function mintCoins has an integer overflow vulnerability. The function mint(_to, _amount) canMint internal returns (bool) { _amount = _amount.div(10**10); if(totalSupply.add(_amount)<maxTokenSupply){ super.mint(_to,_amount.mul(75).div(100)); super.mint(address(beneficiary),_amount.mul(25).div(100)); return true; } else { return false; } return true; } The overflow condition is totalSupply.add(_amount)<maxTokenSupply, where totalSupply is a uint256 and _amount is also a uint256. If _amount is large enough, the addition will not overflow, but the function will return false, preventing the caller from minting the tokens."
        },
        {
            "function_name": "mintCoins",
            "vulnerability": "Integer Overflow",
            "reason": "The minting function mintCoins has an integer overflow vulnerability. The function mint(_to, _amount) canMint internal returns (bool) { _amount = _amount.div(10**10); if(totalSupply.add(_amount)<maxTokenSupply){ super.mint(_to,_amount.mul(75).div(100)); super.mint(address(beneficiary),_amount.mul(25).div(100)); return true; } else { return false; } return true; } The overflow condition is totalSupply.add(_amount)<maxTokenSupply, where totalSupply is a uint256 and _amount is also a uint256. If _amount is large enough, the addition will not overflow, but the function will return false, preventing the caller from minting the tokens."
        },
        {
            "function_name": "mintCoins",
            "vulnerability": "Integer Overflow",
            "reason": "The minting function mintCoins has an integer overflow vulnerability. The function mint(_to, _amount) canMint internal returns (bool) { _amount = _amount.div(10**10); if(totalSupply.add(_amount)<maxTokenSupply){ super.mint(_to,_amount.mul(75).div(100)); super.mint(address(beneficiary),_amount.mul(25).div(100)); return true; } else { return false; } return true; } The overflow condition is totalSupply.add(_amount)<maxTokenSupply, where totalSupply is a uint256 and _amount is also a uint256. If _amount is large enough, the addition will not overflow, but the function will return false, preventing the caller from minting the tokens."
        },
        {
            "function_name": "mintCoins",
            "vulnerability": "Integer Overflow",
            "reason": "The minting function mintCoins has an integer overflow vulnerability. The function mint(_to, _amount) canMint internal returns (bool) { _amount = _amount.div(10**10); if(totalSupply.add(_amount)<maxTokenSupply){ super.mint(_to,_amount.mul(75).div(100)); super.mint(address(beneficiary),_amount.mul(25).div(100)); return true; } else { return false; } return true; } The overflow condition is totalSupply.add(_amount)<maxTokenSupply, where totalSupply is a uint256 and _amount is also a uint256. If _amount is large enough, the addition will not overflow, but the function will return false, preventing the caller from minting the tokens."
        },
        {
            "function_name": "mintCoins",
            "vulnerability": "Integer Overflow",
            "reason": "The minting function mintCoins has an integer overflow vulnerability. The function mint(_to, _amount) canMint internal returns (bool) { _amount = _amount.div(10**10); if(totalSupply.add(_amount)<maxTokenSupply){ super.mint(_to,_amount.mul(75).div(100)); super.mint(address(beneficiary),_amount.mul(25).div(100)); return true; } else { return false; } return true; } The overflow condition is totalSupply.add(_amount)<maxTokenSupply, where totalSupply is a uint256 and _amount is also a uint256. If _amount is large enough, the addition will not overflow, but the function will return false, preventing the caller from minting the tokens."
        }
    ]
}