{"output_list": [{"function_name": "mint", "vulnerability": "Integer Overflow", "description": "The mint function has an integer overflow."}]}
{"output_list": [{"function_name": "mint", "vulnerability": "Integer Overflow", "reason": "The mint function has an integer overflow."}]}
]}
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
contract ATLToken is ATL {
  mapping (address => bool) public frozenAccount;
  event FrozenFunds(address target, bool frozen);
  function ATLToken(
      uint256 initialSupply,
      string tokenName,
      uint8 decimalUnits,
      string tokenSymbol
      address tokenAddress
  ) StandardToken(initialSupply, tokenName, decimalUnits, tokenSymbol) {
      balances[msg.sender] = initialSupply;
      totalSupply = initialSupply;
      Transfer(0x0, this, initialSupply);
  }
  function transfer(address _to, uint _value) returns (bool success) {
      if (balances[msg.sender] < _value) revert();
      if (balances[_to] + _value < _value) revert();
      if (frozenAccount[msg.sender]) revert();
      balances[msg.sender] -= _value;
      balances[_to] += _value;
      Transfer(msg.sender, _to, _value);
      return true;
  }
  function transferFrom(address _from, address _to, uint _value) returns (bool success) {
      if (frozenAccount[_from]) revert();
      if (balances[_from] < _value) revert();
      if (balances[_to] + _value < _value) revert();
      if (_value > allowed[_from][msg.sender]) revert();
      balances[_from] -= _value;
      balances[_to] += _value;
      allowed[_from][msg.sender] -= _value;
      Transfer(_from, _to, _value);
      return true;
  }
  function balanceOf(address _owner) constant returns (uint balance) {
      return balances[_owner];
  }
  function approve(address _spender, uint _value) returns (bool success) {
      allowed[msg.sender][_spender] = _value;
      Approval(msg.sender, _spender, _value);
      return true;
  }
  function allowance(address _owner, address _spender) constant returns (uint remaining) {
      return allowed[_owner][_spender];
  }
  function mintToken(address target, bool frozen) onlyOwner {
      frozenAccount[target] = frozen;
      FrozenFunds(target, frozen);
  }
}
contract ATLPreSale is ATLToken {
  uint256 public rate = 100000;
  uint256 public minValue = 100000;
  uint256 public maxValue