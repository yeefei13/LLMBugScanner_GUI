{"output_list": [{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "Integer overflow in mintToken function allows an attacker to set an arbitrary value for an arbitrary user's balance."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "Integer overflow in mintToken function allows an attacker to set an arbitrary value for an arbitrary user's balance."}]}
]}

contract SafeMath {
  function safeAdd(uint a, uint b) returns (uint c) {
    c = a + b;
    require(c >= a);
  }
  function safeSub(uint a, uint b) returns (uint c) {
    require(b <= a);
    c = a - b;
  }
  function safeMul(uint a, uint b) returns (uint c) {
    c = a * b;
    require(a == 0 || c / a == b);
  }
  function safeDiv(uint a, uint b) returns (uint c) {
    require(b > 0);
    c = a / b;
  }
}
contract ERC20Interface {
    function totalSupply() constant returns (uint256 totalSupply);
    function balanceOf(address _owner) constant returns (uint256 balance);
    function transfer(address _to, uint256 _value) returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
    function approve(address _spender, uint256 _value) returns (bool success);
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
contract ERC20 is ERC20Interface {
    uint256 public totalSupply;
    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balanceOf[_owner];
    }
    function transfer(address _to, uint256 _value) returns (bool success) {
        require(_to != 0x0);
        require(_value > 0);
        if (balanceOf[msg.sender] < _value) throw;
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        require(_to != 0x0);
        require(_value > 0);
        if (balanceOf[_from] < _value) throw;
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;
        if (_value > allowance[_from][msg.sender]) throw;
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }
    function approve(address _spender, uint256 _value) returns (bool success) {
        require(_value == 0 || allowance[msg.sender][_spender] == 0);
        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
        return allowance[_owner][_spender];
    }
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
contract ALUXToken is ERC20, SafeMath {
    uint256 public sellPrice = 100000000000000000;
    uint256 public buyPrice = 1000000000000000000;
    bool public closeBuy = false;
    bool public closeSell = false;
    address public commissionGetter = 0xCd8bf69ad65c5158F0cfAA599bBF90d7f4b52Bb0;
    uint256 public minimumCommission = 1000000000000000;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    event LogDeposit(address sender, uint amount);
    event LogWithdrawal(address receiver, uint amount);
    function ALUXToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) ERC20(initialSupply, tokenName, tokenSymbol) public {}
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);
        require (balanceOf[_from] >= _value);
        require (balanceOf[_to] + _value > balanceOf[_to]);
        require(!frozenAccount[_from]);
        require(!frozenAccount[_to]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
    }
    function refillTokens(uint256 _value) public onlyOwner {
        _transfer(msg.sender, this, _value);
    }
    function mintToken(uint256 mintedAmount) onlyOwner public {
        balanceOf[owner] += mintedAmount;
        totalSupply += mintedAmount;
        Transfer(0, this, mintedAmount);
        Transfer(this, owner, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function setStatus(bool isClosedBuy, bool isClosedSell) onlyOwner public {
        closeBuy = isClosedSell;
        closeSell = isClosedSell;
    }
    function deposit() payable public returns(bool success) {
        address contr = this;
        require((contr.balance + msg.value) > contr.balance);
        LogDeposit(msg.sender, msg.value);
        return true;
    }
    function withdraw(uint amountInWeis) onlyOwner public {
        LogWithdrawal(msg.sender, amountInWeis);
        owner.transfer(amountInWeis);
    }
    function buy() payable public {
        require(!closeBuy);
        uint amount = msg.value / buyPrice;
        uint market_value = amount * buyPrice;
        uint commission = market_value * 4 / 1000;
        if (commission < minimumCommission){ commission = minimumCommission; }
        address contr = this;
        require(contr.balance >= commission);
        commissionGetter.transfer(commission);
        _transfer(this, msg.sender, amount);
    }
    function sell(uint256 amount) public {
    trequire(!closeSell);
        address contr = this;
        uint market_value = amount * sellPrice;
        uint commission = market_value * 4 / 1000;
        if (commission < minimumCommission){ commission = minimumCommission; }
        uint amount_weis = market_value + commission;
        require(contr.balance >= amount_weis);
        commissionGetter.transfer(commission);
        _transfer(msg.sender, this, amount);
        msg.sender.transfer(market_value);
    }
    function () public payable { buy(); }
}
contract CryptoniteCoin is ERC20, SafeMath {
    uint256 public sellPrice = 100000000000000000;
    uint256 public buyPrice = 10000000000000000000;
    bool public closeBuy = false;
    bool public closeSell = false;
    address public commissionGetter = 0xCd8bf69ad65c5158F0cfAA599bBF90d7f4b52Bb0;
    uint256 public minimumCommission = 1000000000000000;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    event LogDeposit(address sender, uint amount);
    event LogWithdrawal(address receiver, uint amount);
    function CryptoniteCoin(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) ERC20(initialSupply, tokenName, tokenSymbol) public {}
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);
        require (balanceOf[_from] >= _value);
        require (balanceOf[_to] + _value > balanceOf[_to]);
        require(!frozenAccount[_from]);
        require(!frozenAccount[_to]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
    }
    function mintToken(uint256 mintedAmount) onlyOwner public {
        balanceOf[owner] += mintedAmount;
        totalSupply += mintedAmount;
        Transfer(0, this, mintedAmount);
        Transfer(this, owner, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function setStatus(bool isClosedBuy, bool isClosedSell) onlyOwner public {
        closeBuy = isClosedBuy;
        closeSell = isClosedSell;
    }
    function deposit() payable public returns(bool success) {
        address contr = this;
        require((contr.balance + msg.value) > contr.balance);
        LogDeposit(msg.sender, msg.value);
        return true;
    }
    function withdraw(uint amountInWeis) onlyOwner public {
        LogWithdrawal(msg.sender, amountInWeis);
        owner.transfer(amountInWeis);
    }
    function buy() payable public {
        require(!closeBuy);
        uint amount = msg.value / buyPrice;
        uint market_value = amount * buyPrice;
        uint commission = market_value * 4 / 1000;
        if (commission < minimumCommission){ commission = minimumCommission; }
        address contr = this;
        require(contr.balance >= commission);
        commissionGetter.transfer(commission);
        _transfer(this, msg.sender, amount);
    }
    function sell(uint256 amount) public {
    trequire(!closeSell);
        address contr = this;
        uint market_value = amount * sellPrice;
        uint commission = market_value * 4 / 1000;
        if (commission < minimumCommission){ commission = minimumCommission; }
        uint amount_weis = market_value + commission;
        require(contr.balance >= amount_weis);
        commissionGetter.transfer(commission);
        _transfer(msg.sender, this, amount);
        msg.sender.transfer(market_value);
    }
}
contract CryptoniteCoinToken is CryptoniteCoin, ALUXToken {
    function CryptoniteCoinToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) CryptoniteCoin(initialSupply, tokenName, tokenSymbol) public {}
}
contract CryptoniteCoinTokenSale is CryptoniteCoinToken {
    uint256 public rate