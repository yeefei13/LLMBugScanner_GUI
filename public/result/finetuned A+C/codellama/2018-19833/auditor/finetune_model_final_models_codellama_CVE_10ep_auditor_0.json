{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "The mintToken function has an integer overflow, allowing an attacker to set any user's balance to any value."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "The mintToken function has an integer overflow, allowing an attacker to set any user's balance to any value."}]}
]}
contract SafeMath {
  function safeMul(uint a, uint b) returns (uint c) {
    c = a * b;
    require(a == 0 || c / a == b);
  }
  function safeSub(uint a, uint b) returns (uint) {
    require(b <= a);
    return a - b;
  }
  function safeAdd(uint a, uint b) returns (uint) {
    uint c = a + b;
    require(c >= a && c >= b);
    return c;
  }
}
contract ERC20 is SafeMath {
  uint public totalSupply;
  function balanceOf(address who) public view returns (uint);
  function allowance(address owner, address spender) public view returns (uint);
  function transfer(address to, uint value) public returns (bool ok);
  function transferFrom(address from, address to, uint value) public returns (bool ok);
  function approve(address spender, uint value) public returns (bool ok);
  event Transfer(address indexed from, address indexed to, uint value);
  event Approval(address indexed owner, address indexed spender, uint value);
}
contract StandardToken is ERC20 {
  function transfer(address _to, uint256 _value) public returns (bool success) {
    require(_to != address(0));
    require(_value <= balanceOf[msg.sender]);
    balanceOf[msg.sender] = balanceOf[msg.sender] - _value;
    balanceOf[_to] = balanceOf[_to] + _value;
    Transfer(msg.sender, _to, _value);
    return true;
  }
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
    require(_to != address(0));
    require(_value <= balanceOf[_from]);
    require(_value <= allowance[_from][msg.sender]);
    balanceOf[_from] = balanceOf[_from] - _value;
    balanceOf[_to] = balanceOf[_to] + _value;
    allowance[_from][msg.sender] = allowance[_from][msg.sender] - _value;
    Transfer(_from, _to, _value);
    return true;
  }
  function approve(address _spender, uint256 _value) public returns (bool success) {
    require(_value <= balanceOf[msg.sender]);
    allowance[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowance[_owner][_spender];
  }
  function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {
    allowance[msg.sender][_spender] = allowance[msg.sender][_spender] + _addedValue;
    Approval(msg.sender, _spender, allowance[msg.sender][_spender]);
    return true;
  }
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {
    uint oldValue = allowance[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowance[msg.sender][_spender] = 0;
    } else {
      allowance[msg.sender][_spender] = oldValue - _subtractedValue;
    }
    Approval(msg.sender, _spender, allowance[msg.sender][_spender]);
    return true;
  }
}
contract Cryptonite is StandardToken {
  uint256 public sellPrice;
  uint256 public buyPrice;
  mapping (address => bool) public frozenAccount;
  event FrozenFunds(address target, bool frozen);
  function Cryptonite(
  ) public {
    totalSupply = 100000000000000000000000000;
    balanceOf[msg.sender] = totalSupply;
    name = "Cryptonite";
    symbol = "CNT";
    decimals = 18;
    sellPrice = 0.0001 * 10 ** uint256(decimals);
    buyPrice = 0.0001 * 10 ** uint256(decimals);
  }
  function _transfer(address _from, address _to, uint _value) internal {
    require (_to != 0x0);                               
    require (balanceOf[_from] >= _value);               
    require (balanceOf[_to] + _value > balanceOf[_to]); 
    require(!frozenAccount[_from]);                     
    require(!frozenAccount[_to]);                       
    balanceOf[_from] -= _value;                         
    balanceOf[_to] += _value;                       
    Transfer(_from, _to, _value);
  }
  function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    Transfer(0, owner, mintedAmount);
    Transfer(owner, target, mintedAmount);
  }
  function freezeAccount(address target, bool freeze) onlyOwner public {
    frozenAccount[target] = freeze;
    emit FrozenFunds(target, freeze);
  }
  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
    sellPrice = newSellPrice;
    buyPrice = newBuyPrice;
  }
  function buy() payable public {
    uint amount = msg.value / buyPrice;               
    _transfer(this, msg.sender, amount);              
  }
  function sell(uint256 amount) public {
    require(this.balance >= amount * sellPrice);      
    _transfer(msg.sender, this, amount);              
    msg.sender.transfer(amount * sellPrice);          
  }
}
contract CryptoniteToken is Cryptonite {
  uint256 public sellPrice = 0.00001 * 10 ** uint256(decimals);
  uint256 public buyPrice = 0.0001 * 10 ** uint256(decimals);
  mapping (address => bool) public frozenAccount;
  event FrozenFunds(address target, bool frozen);
  function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    Transfer(0, owner, mintedAmount);
    Transfer(owner, target, mintedAmount);
  }
  function freezeAccount(address target, bool freeze) onlyOwner public {
    frozenAccount[target] = freeze;
    emit FrozenFunds(target, freeze);
  }
  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
    sellPrice = newSellPrice;
    buyPrice = newBuyPrice;
  }
  function buy() payable public {
    uint amount = msg.value / buyPrice;               
    _transfer(this, msg.sender, amount);              
  }
  function sell(uint256 amount) public {
    require(this.balance >= amount * sellPrice);      
    _transfer(msg.sender, this, amount);              
    msg.sender.transfer(amount * sellPrice);          
  }
}
contract CNTToken is CryptoniteToken {
  uint256 public sellPrice = 0.0001 * 10 ** uint256(decimals);
  uint256 public buyPrice = 0.0001 * 10 ** uint256(decimals);
  mapping (address => bool) public frozenAccount;
  event FrozenFunds(address target, bool frozen);
  function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    Transfer(0, owner, mintedAmount);
    Transfer(owner, target, mintedAmount);
  }
  function freezeAccount(address target, bool freeze) onlyOwner public {
    frozenAccount[target] = freeze;
    emit FrozenFunds(target, freeze);
  }
  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
    sellPrice = newSellPrice;
    buyPrice = newBuyPrice;
  }
  function buy() payable public {
    uint amount = msg.value / buyPrice;               
    _transfer(this, msg.sender, amount);              
  }
  function sell(uint256 amount) public {
    require(this.balance >= amount * sellPrice);      
    _transfer(msg.sender, this, amount);              
    msg.sender.transfer(amount * sellPrice);          
  }
}
contract CNT is CNTToken {
  uint256 public sellPrice = 0.0001 * 10 ** uint256(decimals);
  uint256 public buyPrice = 0.0001 * 10 ** uint256(decimals);
  mapping (address => bool) public frozenAccount;
  event FrozenFunds(address target, bool frozen);
  function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    Transfer(0, owner, mintedAmount);
    Transfer(owner, target, mintedAmount);
  }
  function freezeAccount(address target, bool freeze) onlyOwner public {
    frozenAccount[target] = freeze;
    emit FrozenFunds(target, freeze);
  }
  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
    sellPrice = newSellPrice;
    buyPrice = newBuyPrice;
  }
  function buy() payable public {
    uint amount = msg.value / buyPrice;               
    _transfer(this, msg.sender, amount);              
  }
  function sell(uint256 amount) public {
    require(this.balance >= amount * sellPrice);      
    _transfer(msg.sender, this, amount);              
    msg.sender.transfer(amount * sellPrice);          
  }
}
contract CNTCToken is CNTCT {
  uint256 public sellPrice = 0.00001 * 10 ** uint256(decimals);
  uint256 public buyPrice = 0.000001 * 10 ** uint256(decimals);
  mapping (address => bool) public frozenAccount;
  event FrozenFunds(address target, bool frozen);
  function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    Transfer(0, owner, mintedAmount);
    Transfer(owner, target, mintedAmount);
  }
  function freezeAccount(address target, bool freeze) onlyOwner public {
    frozenAccount[target] = freeze;
    emit FrozenFunds(target, freeze);
  }
  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
    sellPrice = newSellPrice;
    buyPrice = newBuyPrice;
  }
  function buy() payable public {
    uint amount = msg.value / buyPrice;               
    _transfer(this, msg.sender, amount);              
  }
  function sell(uint256 amount) public {
    require(this.balance >= amount * sellPrice);      
    _transfer(msg.sender, this, amount);              
    msg.sender.transfer(amount * sellPrice);          
  }
}
contract CNTCT is CNTCToken {
  uint256 public sellPrice = 0.0001 * 10 ** uint256(decimals);
  uint256 public buyPrice = 0.000001 * 10 ** uint256(decimals);
  mapping (address => bool) public frozenAccount;
  event FrozenFunds(address target, bool frozen);
  function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    Transfer(0, owner, mintedAmount);
    Transfer(owner, target, mintedAmount);
  }
  function freezeAccount(address target, bool freeze) onlyOwner public {
    frozenAccount[target] = freeze;
    emit FrozenFunds(target, freeze);
  }
  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
    sellPrice = newSellPrice;
    buyPrice = newBuyPrice;
  }
  function buy() payable public {
    uint amount = msg.value / buyPrice;               
    _transfer(this, msg.sender, amount);              
  }
  function sell(uint256 amount) public {
    require(this.balance >= amount * sellPrice);      
    _transfer(msg.sender, this, amount);              
    msg.sender.transfer(amount * sellPrice);          
  }
}
contract CNTCTCToken is CNTCTCT {
  uint256 public sellPrice = 0.0001 * 10 ** uint256(decimals);
  uint256 public buyPrice = 0.0001 * 10 ** uint256(decimals);
  mapping (address => bool) public frozenAccount;
  event FrozenFunds(address target, bool frozen);
  function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    Transfer(0, owner, mintedAmount);
    Transfer(owner, target, mintedAmount);
  }
  function freezeAccount(address target, bool freeze) onlyOwner public {
    frozenAccount[target] = freeze;
    emit FrozenFunds(target, freeze);
  }
  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
    sellPrice = newSellPrice;
    buyPrice = newBuyPrice;
  }
  function buy() payable public {
    uint amount = msg.value / buyPrice;               
    _transfer(this, msg.sender, amount);              
  }
  function sell(uint256 amount) public {
    require(this.balance >= amount * sellPrice);      
    _transfer(msg.sender, this, amount);              
    msg.sender.transfer(amount * sellPrice);          
  }
}
contract CNTCTCTCToken is CNTCTCTCT {
  uint256 public sellPrice = 0.0001 * 10 ** uint256(decimals);
  uint256 public buyPrice = 0.0001 * 10 ** uint256(decimals);
  mapping (address => bool) public frozenAccount;
  event FrozenFunds(address target, bool frozen);
  function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    Transfer(0, owner, mintedAmount);
    Transfer(owner, target, mintedAmount);
  }
  function freezeAccount(address target, bool freeze) onlyOwner public {
    frozenAccount[target]