{"output_list": [{"function_name": "AddTicket", "vulnerability": "Integer Overflow", "description": "The AddTicket function has an integer overflow in the lottoIndex calculation, allowing an attacker to set lottoIndex to any value."}]}
{"output_list": [{"function_name": "PayWinner", "vulnerability": "Integer Overflow", "description": "The PayWinner function has an integer overflow in the lottoIndex calculation, allowing an attacker to set lottoIndex to any value."}]}
]}


contract LottoCount {
    uint256 private maxTickets;
    uint256 public ticketPrice; 
    uint256 public lottoIndex;
    uint256 lastTicketTime;
tuint8 _direction;
    uint256 numtickets;
    uint256 totalBounty;
    address worldOwner;   
    event NewTicket(address indexed fromAddress, bool success);
    event LottoComplete(address indexed fromAddress, uint indexed lottoIndex, uint256 reward);
    function LottoCount() public 
    {
        worldOwner = msg.sender; 
        ticketPrice = 0.0101 * 10**18;
        maxTickets = 10;
tt_direction = 0;
        lottoIndex = 1;
        lastTicketTime = 0;
        numtickets = 0;
        totalBounty = 0;
    }
    function getBalance() public view returns (uint256 balance)
    {
        balance = 0;
        if(worldOwner == msg.sender) balance = this.balance;
        return balance;
    }
tfunction withdraw() public 
    {
        require(worldOwner == msg.sender);  
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttworldOwner.transfer(this.balance); 
    }
    function getLastTicketTime() public view returns (uint256 time)
    {
        time = lastTicketTime; 
        return time;
    }
    function AddTicket() public payable 
    {
        require(msg.value == ticketPrice); 
        require(numtickets < maxTickets);
ttlastTicketTime = now;
        numtickets += 1;
        totalBounty += ticketPrice;
        bool success = numtickets == maxTickets;
        NewTicket(msg.sender, success);
        if(success) 
        {
            PayWinner(msg.sender);
        } 
    }
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount is LottoCount {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount2 is LottoCount {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount3 is LottoCount2 {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount4 is LottoCount3 {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount5 is LottoCount4 {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
tttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount6 is LottoCount5 {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount7 is LottoCount6 {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount8 is LottoCount7 {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount9 is LottoCount8 {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount10 is LottoCount9 {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount11 is LottoCount10 {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 1;
ttif(_direction == 1 && maxTickets == 10) _direction = 0;
        worldOwner.transfer(ownerTax);
        winner.transfer(winnerPrice); 
    }
}
contract LottoCount12 is LottoCount11 {
    function PayWinner( address winner ) private 
    { 
        require(numtickets == maxTickets);
        uint ownerTax = 6 * totalBounty / 100;
        uint winnerPrice = totalBounty - ownerTax;
        LottoComplete(msg.sender, lottoIndex, winnerPrice);
        lottoIndex += 1;
        numtickets = 0;
        totalBounty = 0;
ttif(_direction == 0 && maxTickets < 20) maxTickets += 1;
ttif(_direction == 1 && maxTickets > 10) maxTickets -= 1;
ttif(_direction == 0 && maxTickets == 20) _direction = 