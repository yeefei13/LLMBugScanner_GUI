{"output_list": [{"function_name": "PayWinner", "vulnerability": "Integer Overflow", "description": "The 'PayWinner' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "distribute", "vulnerability": "Integer Overflow", "description": "The 'distribute' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "ToOwner", "vulnerability": "Typo Constructor", "description": "The 'ToOwner' function allows an attacker to claim ownership and funds."}]}
{"function_name": "mintToken", "vulnerability": "Denial of Service", "description": "The 'mintToken' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "freezeAccount", "vulnerability": "Access Control", "description": "The 'freezeAccount' function allows an attacker to freeze an arbitrary user's assets."}]}
{"function_name": "setPrices", "vulnerability": "Integer Overflow", "description": "The 'setPrices' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "buy", "vulnerability": "Integer Overflow", "description": "The 'buy' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "sell", "vulnerability": "Integer Overflow", "description": "The 'sell' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "setMinBalance", "vulnerability": "Access Control", "description": "The 'setMinBalance' function allows an attacker to set the minimum balance of an arbitrary user to any value."}]}
{"function_name": "setTokenName", "vulnerability": "Typo Constructor", "description": "The 'setTokenName' function allows an attacker to set the name of an arbitrary user to any value."}]}
{"function_name": "setTokenSymbol", "vulnerability": "Typo Constructor", "description": "The 'setTokenSymbol' function allows an attacker to set the symbol of an arbitrary user to any value."}]}
{"function_name": "mintToken", "vulnerability": "Denial of Service", "description": "The 'mintToken' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "PayWinner", "vulnerability": "Bad Randomness", "description": "The 'PayWinner' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "claimThrone", "vulnerability": "Denial of Service", "description": "The 'claimThrone' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "CarbonExchangeCoinToken", "vulnerability": "Typo Constructor", "description": "The 'CarbonExchangeCoinToken' function allows an attacker to set the name, symbol, and minimum balance of an arbitrary user to any value."}]}
{"function_name": "CarbonExchangeCoinToken", "vulnerability": "Typo Constructor", "description": "The 'CarbonExchangeCoinToken' function allows an attacker to set the name, symbol, and minimum balance of an arbitrary user to any value."}]}
{"function_name": "mintToken", "vulnerability": "Denial of Service", "description": "The 'mintToken' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "freezeAccount", "vulnerability": "Access Control", "description": "The 'freezeAccount' function allows an attacker to freeze an arbitrary user's assets."}]}
{"function_name": "setPrices", "vulnerability": "Integer Overflow", "description": "The 'setPrices' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "buy", "vulnerability": "Integer Overflow", "description": "The 'buy' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "sell", "vulnerability": "Integer Overflow", "description": "The 'sell' function allows an attacker to set the balance of an arbitrary user to any value."}]}
{"function_name": "setMinBalance", "vulnerability": "Access Control", "description": "The 'setMinBalance' function allows an attacker to set the minimum balance of an arbitrary user to any value."}]}
{"function_name": "setTokenName", "vulnerability": "Typo Constructor", "description": "The 'setTokenName' function allows an attacker to set the name of an arbitrary user to any value."}]}
{"function_name": "setTokenSymbol", "vulnerability": "Typo Constructor", "description": "The 'setTokenSymbol' function allows an attacker to set the symbol of an arbitrary user to any value."}]}
{"output_list": [
    {
        "function_name": "PayWinner", 
        "vulnerability": "Bad Randomness", 
        "description": "The 'PayWinner' function allows an attacker to set the balance of an arbitrary user to any value."
    }, 
    {
        "function_name": "mintToken", 
        "vulnerability": "Denial of Service", 
        "description": "The 'mintToken' function allows an attacker to set the balance of an arbitrary user to any value."
    }, 
    {
        "function_name": "freezeAccount", 
        "vulnerability": "Access Control", 
        "description": "The 'freezeAccount' function allows an attacker to freeze an arbitrary user's assets."
    }, 
    {
        "function_name": "setPrices", 
        "vulnerability": "Integer Overflow", 
        "description": "The 'setPrices' function allows an attacker to set the balance of an arbitrary user to any value."
    }, 
    {
        "function_name": "buy", 
        "vulnerability": "Integer Overflow", 
        "description": "The 'buy' function allows an attacker to set the balance of an arbitrary user to any value."
    }, 
    {
        "function_name": "sell", 
        "vulnerability": "Integer Overflow", 
        "description": "The 'sell' function allows an attacker to set the balance of an arbitrary user to any value."
    }, 
    {
        "function_name": "setMinBalance", 
        "vulnerability": "Access Control", 
        "description": "The 'setMinBalance' function allows an attacker to set the minimum balance of an arbitrary user to any value."
    }, 
    {
        "function_name": "setTokenName", 
        "vulnerability": "Typo Constructor", 
        "description": "The 'setTokenName' function allows an attacker to set the name of an arbitrary user to any value."
    }, 
    {
        "function_name": "setTokenSymbol", 
        "vulnerability": "Typo Constructor", 
        "description": "The 'setTokenSymbol' function allows an attacker to set the symbol of an arbitrary user to any value."
    }
]}
```
uminate 1.0.1;
contract owned {
    address public owner;
    function owned() {
        owner = msg.sender;
    }
    modifier onlyOwner {
        if (msg.sender != owner) throw;
        _;
    }
    function transferOwnership(address newOwner) onlyOwner {
        owner = newOwner;
    }
}
contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
contract token {
    string public standard = 'Token 0.1';
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    function token(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) {
        balanceOf[msg.sender] = initialSupply;              
        totalSupply = initialSupply;                        
        name = tokenName;                                   
        symbol = tokenSymbol;                               
        decimals = decimalUnits;                            
    }
    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);                               
        require(balanceOf[_from] > _value);               
        require(balanceOf[_to] + _value > balanceOf[_to]); 
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
    function transfer(address _to, uint256 _value) {
        _transfer(msg.sender, _to, _value);
    }
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    function approve(address _spender, uint256 _value) returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _spender, _value)) {
            spender.receiveApproval(this, _extraData);
            return true;
        }
        function burn(uint256 _value) returns (bool success) {
            require(balanceOf[msg.sender] >= _value);   
            balanceOf[msg.sender] -= _value;            
            totalSupply -= _value;                      
            Burn(msg.sender, _value);
            return true;
        } else { return false; }
    }
    function burnFrom(address _from, uint256 _value) returns (bool success) {
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from][msg.sender]);    
        balanceOf[_from] -= _value;                         
        allowance[_from][msg.sender] -= _value;            
        totalSupply -= _value;                              
        Burn(_from, _value);
        return true;
    }
}
contract MyAdvancedCryptocurrency is owned, token {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function MyAdvancedCryptocurrency(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);                               
        require (balanceOf[_from] > _value);               
        require (balanceOf[_to] + _value > balanceOf[_to]); 
        require(!frozenAccount[_from]);                    
        require(!frozenAccount[_to]);                      
        balanceOf[_from] -= _value;                         
        balanceOf[_to] += _value;                           
        Transfer(_from, _to, _value);
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        Transfer(0, owner, mintedAmount);
        Transfer(owner, target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable {
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) {
        require(this.balance >= amount * sellPrice);      
        _transfer(msg.sender, this, amount);              
        msg.sender.transfer(amount * sellPrice);          
    }
}
contract Cryptocurrency is MyAdvancedCryptocurrency {
    uint256 public sellPrice = 0.0001 ether;
    uint256 public buyPrice = 0.0001 ether;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(target, bool frozen);
    function Cryptocurrency(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) MyAdvancedCryptocurrency (initialSupply, tokenName, decimalUnits, tokenSymbol) {}
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);                               
        require (balanceOf[_from] > _value);               
        require (balanceOf[_to] + _value > balanceOf[_to]); 
        require(!frozenAccount[_from]);                    
        require(!frozenAccount[_to]);                      
        balanceOf[_from] -= _value;                         
        balanceOf[_to] += _value;                           
        Transfer(_from, _to, _value);
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        Transfer(0, owner, mintedAmount);
        Transfer(owner, target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable {
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) {
        require(this.balance >= amount * sellPrice);      
        _transfer(msg.sender, this, amount);              
        msg.sender.transfer(amount * sellPrice);          
    }
}
contract CryptocurrencyToken is Cryptocurrency {
    uint256 public sellPrice = 0.0001 ether;
    uint256 public buyPrice = 0.0001 ether;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(target, bool frozen);
    function CryptocurrencyToken(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) Cryptocurrency (initialSupply, tokenName, decimalUnits, tokenSymbol) {}
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        Transfer(0, owner, mintedAmount);
        Transfer(