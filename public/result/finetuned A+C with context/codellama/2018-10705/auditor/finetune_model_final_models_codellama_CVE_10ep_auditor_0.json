{"output_list": [{"function_name": "distribute", "vulnerability": "Integer Overflow", "description": "The 'distribute' function allows an attacker to set any user's balance to any value."}]}
### The following smart contract code has an integer overflow issue in the following function: 
###  function distribute(address[] _addresses, uint[] _amounts) public returns (bool success) 
### The issue is caused by the following line of code: 
###    totalAmount += _amounts[a]; 
### The integer overflow occurs because the value of 'totalAmount' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###    balances[_to] += _amounts[b]; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _amounts[b]); 
### The following smart contract code has an integer overflow issue in the following function: 
###  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) 
### The issue is caused by the following line of code: 
###        require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        allowance[_from][msg.sender] -= _value; 
### The issue is caused by the following line of code: 
###        balances[_to] += _value; 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_from] -= _value; 
### The issue is caused by the following line of code: 
###        Transfer(_from, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_to != 0x0); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        allowance[_from][msg.sender] -= _value; 
### The issue is caused by the following line of code: 
###        Transfer(_from, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_to != 0x0); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### The following smart contract code has an integer overflow issue in the following function: 
###  function distribute(address[] _addresses, uint[] _amounts) public returns (bool success) 
### The issue is caused by the following line of code: 
###    totalAmount += _amounts[a]; 
### The integer overflow occurs because the value of 'totalAmount' is not checked for overflow. 
### Ensure the following smart contract code has an integer overflow issue in the following function: 
###  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) 
### The issue is caused by the following line of code: 
###    require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        allowance[_from][msg.sender] -= _value; 
### The issue is caused by the following line of code: 
###        Transfer(_from, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_to != 0x0); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        allowance[_from][msg.sender] -= _value; 
### The issue is caused by the following line of code: 
###        Transfer(_from, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### The following smart contract code has an integer overflow issue in the following function: 
###  function mintToken(address target, uint256 mintedAmount) onlyOwner public returns (bool success) 
### The issue is caused by the following line of code: 
###    totalSupply += mintedAmount; 
### The integer overflow occurs because the value of 'totalSupply' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[msg.sender] += mintedAmount; 
### The issue is caused by the following line of code: 
###        Transfer(0, this, mintedAmount); 
### The integer overflow occurs because the value of 'mintedAmount' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[target] += mintedAmount; 
### The issue is caused by the following line of code: 
###        Transfer(this, target, mintedAmount); 
### The integer overflow occurs because the value of 'mintedAmount' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        totalSupply -= _value; 
### The issue is caused by the following line of code: 
###        require(_value <= balances[_from]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(_from, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        allowance[_from][msg.sender] -= _value; 
### The issue is caused by the following line of code: 
###        Transfer(_from, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balances[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        allowance[_from][msg.sender] -= _value; 
### The issue is caused by the following line of code: 
###        Transfer(_from, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        allowance[_from][msg.sender] -= _value; 
### The issue is caused by the following line of code: 
###        Transfer(_from, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_to] += _value; 
### The issue is caused by the following line of code: 
###        Transfer(msg.sender, _to, _value); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: 
###        balanceOf[_from] -= _value; 
### The issue is caused by the following line of code: 
###        require(_value <= allowance[_from][msg.sender]); 
### The integer overflow occurs because the value of '_value' is not checked for overflow. 
### Ensure the following function has an integer overflow issue in the following line of code: