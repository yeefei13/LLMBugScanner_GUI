Code Input: 

pragma solidity ^0.4.11;
  contract ERC20Interface {
      function totalSupply() constant returns (uint256 totSupply);   
      function balanceOf(address _owner) constant returns (uint256 balance);   
      function transfer(address _to, uint256 _value) returns (bool success);t  
      function transferFrom(address _from, address _to, uint256 _value) returns (bool success);   
      function approve(address _spender, uint256 _value) returns (bool success);   
      function allowance(address _owner, address _spender) constant returns (uint256 remaining);             
      event Transfer(address indexed _from, address indexed _to, uint256 _value);   
      event Approval(address indexed _owner, address indexed _spender, uint256 _value); t   
  }
  contract FlexiInterface {
t  function increaseApproval (address _spender, uint _addedValue) returns (bool success);
t  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);
      function transferOwnership (address newOwner);
  }
  contract Tracto is ERC20Interface, FlexiInterface {
      string public symbol = "TRCT";
      string public name = "Tracto";
      uint8 public constant decimals = 8;
      uint256 _totalSupply = 7000000000000000;
      address public owner;
      mapping(address => uint256) balances;
      mapping(address => mapping (address => uint256)) allowed;
      modifier onlyOwner() {
tt  require(msg.sender == owner);
          _;
      }
t  modifier notThisContract(address _to) {
tt  require(_to != address(this));
tt  _;tt
t  }
      function Tracto() {
          owner = msg.sender;
          balances[owner] = _totalSupply;
      }
      function () payable {
          if(this.balance > 1000000000000000000){
            owner.transfer(this.balance);
          }
      }
      function balanceOf(address _owner) constant returns (uint256 balance) {
          return balances[_owner];
      }
t  function totalSupply() constant returns (uint256 totSupply) {
tt  return _totalSupply;
      }
      function transfer(address _to, uint256 _amount) notThisContract(_to) returns (bool success) {
          require(_to != 0x0);
tt  require(_amount > 0);
tt  require(balances[msg.sender] >= _amount);
tt  require(balances[_to] + _amount > balances[_to]);
tt  balances[msg.sender] -= _amount;
          balances[_to] += _amount;tt  
tt  Transfer(msg.sender, _to, _amount);
tt  return true;
      }
      function transferFrom(
          address _from,
          address _to,
          uint256 _amount
      ) notThisContract(_to) returns (bool success) {
tt   require(balances[_from] >= _amount);
tt   require(allowed[_from][msg.sender] >= _amount);
tt   require(_amount > 0);
tt   require(balances[_to] + _amount > balances[_to]);
tt   balances[_from] -= _amount;
           allowed[_from][msg.sender] -= _amount;
           balances[_to] += _amount;
           Transfer(_from, _to, _amount);
           return true;
     }
    function approve(address _spender, uint256 _amount) returns (bool) {
ttrequire((_amount == 0) || (allowed[msg.sender][_spender] == 0));
ttallowed[msg.sender][_spender] = _amount;
ttApproval(msg.sender, _spender, _amount);
ttreturn true;
t}
      function increaseApproval (address _spender, uint _addedValue) 
        returns (bool success) {
        allowed[msg.sender][_spender] += _addedValue;
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
      }
      function decreaseApproval (address _spender, uint _subtractedValue) 
        returns (bool success) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
          allowed[msg.sender][_spender] = 0;
        } else {
          allowed[msg.sender][_spender] -= _subtractedValue;
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
      }
     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
         return allowed[_owner][_spender];
     }
    function changeNameSymbol(string _name, string _symbol) onlyOwner {
ttname = _name;
ttsymbol = _symbol;
t}
tfunction transferOwnership(address newOwner) onlyOwner {
        owner = newOwner;
    }
 }