Code Input: 

pragma solidity ^0.4.18;
interface ERC20 {
tfunction name() public view returns (string);
tfunction symbol() public view returns (string);
tfunction decimals() public view returns (uint8);
tfunction totalSupply() public view returns (uint256);
tfunction balanceOf(address _owner) public view returns (uint256);
tfunction transfer(address _to, uint256 _value) public returns (bool success);
tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
tfunction approve(address _spender, uint256 _value) public returns (bool success);
tfunction allowance(address _owner, address _spender) public view returns (uint256);
}
interface TokenRecipient { 
tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; 
}
interface ERC223Receiver {
    function tokenFallback(address _from, uint256 _value, bytes _data) public;
}
contract ERC223 is ERC20 {
tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool success);
tfunction transfer(address _to, uint256 _value, bytes _data, string _customFallback) public returns (bool success);
tevent Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);
tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
contract NGToken is ERC223 {
tstring constant private NAME ttt= "NEO Genesis Token";
tstring constant private SYMBOLt tt= "NGT";
tuint8 constant private DECIMALS tt= 18;
tuint256 constant private INITIAL_SUPPLYt= 20000000000 * (10 ** uint256(DECIMALS));
tuint256 private totalBurnedtttt= 0;
tmapping(address => uint256) private balances;
tmapping(address => mapping(address => uint256)) private allowed;
tfunction NGToken() public {
t  balances[msg.sender] = INITIAL_SUPPLY;
t}
tfunction name() public view returns (string) {
ttreturn NAME;
t}
Output only in the provided JSON output format. Ensure your identification only pertains to these vulnerability types: Integer Overflow, Wrong Logic, Bad Randomness, Access Control, Typo Constructor, Token Devalue. 
Code Input: 
pragma solidity ^0.4.18;
interface ERC20 {
tfunction name() public view returns (string);
tfunction symbol() public view returns (string);
tfunction decimals() public view returns (uint8);
tfunction totalSupply() public view returns (uint256);
tfunction balanceOf(address _owner) public view returns (uint256);
tfunction transfer(address _to, uint256 _value) public returns (bool success);
tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
tfunction approve(address _spender, uint256 _value) public returns (bool success);
tfunction allowance(address _owner, address _spender) public view returns (uint256);
}
interface TokenRecipient { 
tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; 
}
interface ERC223Receiver {
    function tokenFallback(address _from, uint256 _value, bytes _data) public;
}
contract ERC223 is ERC20 {
tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool success);
tfunction transfer(address _to, uint256 _value, bytes _data, string _customFallback) public returns (bool success);
tevent Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);
tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
contract NGToken is ERC223 {
tstring constant private NAME ttt= "NEO Genesis Token";
tstring constant private SYMBOLt tt= "NGT";
tuint8 constant private DECIMALS tt= 18;
tuint256 constant private INITIAL_SUPPLYt= 20000000000 * (10 ** uint256(DECIMALS));
tuint256 private totalBurnedtttt= 0;
tmapping(address => uint256) private balances;
tmapping(address => mapping(address => uint256)) private allowed;
tfunction NGToken() public {
t  balances[msg.sender] = INITIAL_SUPPLY;
t}
Output only in the provided JSON output format. Ensure your identification only pertains to these vulnerability types: Integer Overflow, Wrong Logic, Bad Randomness, Access Control, Typo Constructor, Token Devalue. 
Code Input: 
pragma solidity ^0.4.18;
interface ERC20 {
tfunction name() public view returns (string);
tfunction symbol() public view returns (string);
tfunction decimals() public view returns (uint8);
tfunction totalSupply() public view returns (uint256);
tfunction balanceOf(address _owner) public view returns (uint256);
tfunction transfer(address _to, uint256 _value) public returns (bool success);
tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
tfunction approve(address _spender, uint256 _value) public returns (bool success);
tfunction allowance(address _owner, address _spender) public view returns (uint256);
}
interface TokenRecipient { 
tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; 
}
interface ERC223Receiver {
    function tokenFallback(address _from, uint256 _value, bytes _data) public;
}
contract ERC223 is ERC20 {
tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool success);
tfunction transfer(address _to, uint256 _value, bytes _data, string _customFallback) public returns (bool success);
tevent Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);
tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
contract NGToken is ERC223 {
tstring constant private NAME ttt= "NEO Genesis Token";
tstring constant private SYMBOLt tt= "NGT";
tuint8 constant private DECIMALS tt= 18;
Output only in the provided JSON output format. Ensure your identification only pertains to these vulnerability types: Integer Overflow, Wrong Logic, Bad Randomness, Access Control, Typo Constructor, Token Devalue. 
Code Input: 
pragma solidity ^0.4.18;
interface ERC20 {
tfunction name() public view returns (string);
tfunction symbol() public view returns (string);
tfunction decimals() public view returns (uint8);
tfunction totalSupply() public view returns (uint256);
tfunction balanceOf(address _owner) public view returns (uint256);
Output only in the provided JSON output format. Ensure your identification only pertains to these vulnerability types: Integer Overflow, Wrong Logic, Bad Randomness, Access Control, Typo Constructor, Token Devalue. 
Code Input: 
pragma solidity ^0.4.18;
interface ERC20 {
tfunction name() public view returns (string);
tfunction symbol() public view returns (string);
Output only in the provided JSON output format. Ensure your identification only pertains to these vulnerability types: Integer Overflow, Wrong Logic, Bad Randomness, Access Control, Typo Constructor, Token Devalue. 
Code Input: 
pragma solidity ^0.4.18;
interface ERC20 {
tfunction name() public view returns (string);
Output only in the provided JSON output format. Ensure your identification only pertains to these vulnerability types: Integer Overflow, Wrong Logic, Bad Randomness, Access Control, Typo Constructor, Token Devalue.