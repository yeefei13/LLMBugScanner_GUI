You are an AI programming assistant, utilizing the Deepseek Coder model, developed by Deepseek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.
Requirement: You are a smart contract auditor. Identify and explain 5 most severe vulnerability types: Integer Overflow, Wrong Logic, Bad Randomness, Access Control, Typo Constructor. Ensure your identification is based on the provided smart contract, and only these vulnerability types. Restrict your identification to these vulnerability types: Integer Overflow, Wrong Logic, Bad Randomness, Access Control, Typo Constructor. For each vulnerability, provide the following:
                        Output only in the following JSON format:
                        {
                            "output_list": [
                                {
                                    "function_name": "<function_name>",
                                    "vulnerability": "<vulnerability_type>",
                                    "description": "<vulnerability_description>"
                                }
                            ]
                        }### Instruction:
Code Input: 

pragma solidity ^0.4.19;
contract owned {
    address public owner;
    function owned() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
contract token {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    function token(
        uint256 initialSupply,
        string tokenName,
        uint8 decimalUnits,
        string tokenSymbol
        ) public {
        balanceOf[msg.sender] = initialSupply;              
        totalSupply = initialSupply;                        
        name = tokenName;                                   
        symbol = tokenSymbol;                               
        decimals = decimalUnits;                            
    }
    function transfer(address _to, uint256 _value) public {
        require(_to != address(0));
        require(_value <= balanceOf[msg.sender]);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        balanceOf[msg.sender] -= _value;                     
        balanceOf[_to] += _value;                            
        Transfer(msg.sender, _to, _value);                   
    }
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra, string _userIP)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra, string _userIP, string _userCountry)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra, string _userIP, string _userCountry, string _userRegion)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra, string _userIP, string _userCountry, string _userRegion, string _userCity)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra, string _userIP, string _userCountry, string _userRegion, string _userCity, string _userDistrict)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra, string _userIP, string _userCountry, string _userRegion, string _userCity, string _userDistrict, string _userStreet)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra, string _userIP, string _userCountry, string _userRegion, string _userCity, string _userDistrict, string _userStreet, string _userHouseNumber)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra, string _userIP, string _userCountry, string _userRegion, string _userCity, string _userDistrict, string _userStreet, string _userHouseNumber, string _userZipCode)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra, string _userIP, string _userCountry, string _userRegion, string _userCity, string _userDistrict, string _userStreet, string _userHouseNumber, string _userZipCode, string _userPhone)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra, string _userIP, string _userCountry, string _userRegion, string _userCity, string _userDistrict, string _userStreet, string _userHouseNumber, string _userZipCode, string _userPhone, string _userBirthday)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _callBack, uint _fee, string _feePayer, string _txOrigin, string _network, uint _nonce, string _userOpenID, string _userEmail, string _userExtra, string _userIP, string _userCountry, string _userRegion, string _userCity, string _userDistrict, string _userStreet, string _userHouseNumber, string _userZipCode, string _userPhone, string _userBirthday, string _userGender)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData