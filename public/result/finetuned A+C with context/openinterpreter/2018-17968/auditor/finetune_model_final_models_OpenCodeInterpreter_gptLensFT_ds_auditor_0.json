You are an AI programming assistant, utilizing the Deepseek Coder model, developed by Deepseek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.
Requirement: You are a smart contract auditor. Identify and explain 5 most severe vulnerability types in the provided smart contract. Ensure your identification is in accordance with the provided vulnerability types: Integer Overflow, Wrong Logic, Bad Randomness, Access Control, Typo Constructor, Token Devalue, Bad Randomness, Access Control, Token Devalue, Typo Constructor. 
                        Output only in the following JSON format:
                        {
                            "output_list": [
                                {
                                    "function_name": "<function_name>",
                                    "vulnerability": "<vulnerability_type>",
                                    "description": "<vulnerability_description>"
                                }
                            ]
                        }### Instruction:
Code Input: 

pragma solidity ^0.4.18;
contract owned {
    address public owner;
    function owned() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
contract TokenERC20 {
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    function TokenERC20(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;                
        name = tokenName;                                   
        symbol = tokenSymbol;                               
    }
    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue, uint256 _tokenSaleContractTokensSold)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue, uint256 _tokenSaleContractTokensSold, uint256 _tokenSaleContractTokensRemaining)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue, uint256 _tokenSaleContractTokensSold, uint256 _tokenSaleContractTokensRemaining, uint256 _tokenSaleContractTokensAvailable)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue, uint256 _tokenSaleContractTokensSold, uint256 _tokenSaleContractTokensRemaining, uint256 _tokenSaleContractTokensAvailable, uint256 _tokenSaleContractTokensAvailableRemaining)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue, uint256 _tokenSaleContractTokensSold, uint256 _tokenSaleContractTokensRemaining, uint256 _tokenSaleContractTokensAvailable, uint256 _tokenSaleContractTokensAvailableRemaining, uint256 _tokenSaleContractTokensSoldRemaining)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue, uint256 _tokenSaleContractTokensSold, uint256 _tokenSaleContractTokensRemaining, uint256 _tokenSaleContractTokensAvailable, uint256 _tokenSaleContractTokensAvailableRemaining, uint256 _tokenSaleContractTokensSoldRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemaining)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue, uint256 _tokenSaleContractTokensSold, uint256 _tokenSaleContractTokensRemaining, uint256 _tokenSaleContractTokensAvailable, uint256 _tokenSaleContractTokensAvailableRemaining, uint256 _tokenSaleContractTokensSoldRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue, uint256 _tokenSaleContractTokensSold, uint256 _tokenSaleContractTokensRemaining, uint256 _tokenSaleContractTokensAvailable, uint256 _tokenSaleContractTokensAvailableRemaining, uint256 _tokenSaleContractTokensSoldRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue, uint256 _tokenSaleContractTokensSold, uint256 _tokenSaleContractTokensRemaining, uint256 _tokenSaleContractTokensAvailable, uint256 _tokenSaleContractTokensAvailableRemaining, uint256 _tokenSaleContractTokensSoldRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemainingRemaining)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue, uint256 _tokenSaleContractTokensSold, uint256 _tokenSaleContractTokensRemaining, uint256 _tokenSaleContractTokensAvailable, uint256 _tokenSaleContractTokensAvailableRemaining, uint256 _tokenSaleContractTokensSoldRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData, string _tokenSymbol, address _tokenSaleContractAddress, uint256 _tokenSaleContractID, uint256 _tokenSaleContractRevenue, uint256 _tokenSaleContractTokensSold, uint256 _tokenSaleContractTokensRemaining, uint256 _tokenSaleContractTokensAvailable, uint256 _tokenSaleContractTokensAvailableRemaining, uint256 _tokenSaleContractTokensSoldRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining, uint256 _tokenSaleContractTokensSoldRemainingRemainingRemaining, uint256 _tokenSaleContract