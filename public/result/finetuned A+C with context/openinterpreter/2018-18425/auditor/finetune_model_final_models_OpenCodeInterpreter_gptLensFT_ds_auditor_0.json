You are an AI programming assistant, utilizing the Deepseek Coder model, developed by Deepseek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.
Requirement: You are a smart contract auditor. Identify and explain 5 most severe vulnerability types in the provided smart contract. Ensure your identification is in the following vulnerability types: Integer Overflow, Wrong Logic, Bad Randomness, Access Control, Typo Constructor, Token Devalue. 
                        Output only in the following JSON format:
                        {
                            "output_list": [
                                {
                                    "function_name": "<function_name>",
                                    "vulnerability": "<vulnerability_type>",
                                    "description": "<vulnerability_description>"
                                }
                            ]
                        }### Instruction:
Code Input: 

pragma solidity ^0.4.18;
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        if (a == 0) {
            return 0;
        }
        c = a * b;
        assert(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        assert(c >= a);
        return c;
    }
}
contract ERC20Basic {
    uint256 public totalSupply;
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
}
contract ERC20 is ERC20Basic {
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
contract BasicToken is ERC20Basic {
    using SafeMath for uint256;
    mapping(address => uint256) balances;
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        Transfer(msg.sender, _to, _value);
        return true;
    }
    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }
}
contract StandardToken is ERC20, BasicToken {
    mapping (address => mapping (address => uint256)) allowed;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);
        balances[_from] = balances[_from].sub(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        Transfer(_from, _to, _value);
        return true;
    }
    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}
contract Ownable {
    address public owner;
    function Ownable() public {
        owner = msg.sender;
    }
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}
contract Primeo is StandardToken, Ownable {
    string public constant name = "Primeo";
    string public constant symbol = "PEO";
    uint public constant decimals = 8;
    uint256 public totalSupply = 10000000000e8;
    uint256 public totalDistributed = 0;        
    uint256 public tokensPerEth = 10000000e8;
    uint256 public constant minContribution = 1 ether / 100; 
    event Distr(address indexed to, uint256 amount);
    event DistrFinished();
    event Airdrop(address indexed _owner, uint _amount, uint _balance);
    event TokensPerEthUpdated(uint _tokensPerEth);
    bool public distributionFinished = false;
    modifier canDistr() {
        require(!distributionFinished);
        _;
    }
    function distr(address _to, uint256 _amount) canDistr private returns (bool) {
        totalDistributed = totalDistributed.add(_amount);        
        balances[_to] = balances[_to].add(_amount);
        emit Distr(_to, _amount);
        emit Transfer(address(0), _to, _amount);
        return true;
    }
    function doAirdrop(address _participant, uint _amount) internal {
        require( _amount > 0 );      
        require( totalDistributed < totalSupply );
        balances[_participant] = balances[_participant].add(_amount);
        totalDistributed = totalDistributed.add(_amount);
        if (totalDistributed >= totalSupply) {
            distributionFinished = true;
        }
        emit Airdrop(_participant, _amount, balances[_participant]);
        emit Transfer(address(0), _participant, _amount);
    }
    function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        
        doAirdrop(_participant, _amount);
    }
    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        
        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);
    }
    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
        tokensPerEth = _tokensPerEth;
        emit TokensPerEthUpdated(_tokensPerEth);
    }
    function () external payable {
        getTokens();
     }
    function getTokens() payable canDistr  public {
        uint256 tokens = 0;
        require( msg.value >= minContribution );
        require( msg.value > 0 );
        tokens = tokensPerEth.mul(msg.value) / 1 ether;        
        address investor = msg.sender;
        if (tokens > 0) {
            distr(investor, tokens);
        }
        if (totalDistributed >= totalSupply) {
            distributionFinished = true;
        }
    }
    function withdraw() onlyOwner public {
        address myAddress = this;
        uint256 etherBalance = myAddress.balance;
        owner.transfer(etherBalance);
    }
    function burn(uint256 _value) onlyOwner public {
        require(_value <= balances[msg.sender]);
        address burner = msg.sender;
        balances[burner] = balances[burner].sub(_value);
        totalSupply = totalSupply.sub(_value);
        totalDistributed = totalDistributed.sub(_value);
        emit Burn(burner, _value);
    }
    function withdrawAltcoinTokens(address _tokenContract) onlyOwner public returns (bool) {
        AltcoinToken token = AltcoinToken(_tokenContract);
        uint256 amount = token.balanceOf(address(this));
        return token.transfer(owner, amount);
    }
}
### Instruction:
                        Output only in the following JSON format:
                        {
                            "output_list": [
                                {
                                    "function_name": "<function_name>",
                                    "vulnerability": "<vulnerability_type>",
                                    "description": "<vulnerability_description>"
                                }
                            ]
                        }
                        Input: 
                        pragma solidity ^0.4.18;
                        contract owned {
                            address public owner;
                            function owned() public {
                                owner = msg.sender;
                            }
                            modifier onlyOwner {
                                require(msg.sender == owner);
                                _;
                            }
                            function transferOwnership(address newOwner) onlyOwner public {
                                owner = newOwner;
                            }
                        }
                        contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
                        contract token {
                            string public name;
                            string public symbol;
                            uint8 public decimals;
                            uint256 public totalSupply;
                            mapping (address => uint256) public balanceOf;
                            mapping (address => mapping (address => uint256)) public allowance;
                            event Transfer(address indexed from, address indexed to, uint256 value);
                            function token(
                                uint256 initialSupply,
                                string tokenName,
                                uint8 decimalUnits,
                                string tokenSymbol
                                ) public {
                                balanceOf[msg.sender] = initialSupply;              
                                totalSupply = initialSupply;                        
                                name = tokenName;                                   
                                symbol = tokenSymbol;                               
                                decimals = decimalUnits;                            
                            }
                            function transfer(address _to, uint256 _value) public {
                                require(_to != address(0));
                                require(_value <= balanceOf[msg.sender]);
                                balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
                                balanceOf[_to] = balanceOf[_to].add(_value);
                                Transfer(msg.sender, _to, _value);
                            }
                            function approve(address _spender, uint256 _value) public
                                returns (bool success) {
                                allowance[msg.sender][_spender] = _value;
                                return true;
                            }
                            function approveAndCall(address _spender, uint256 _value, bytes _extraData)
                                public
                                returns (bool success) {
                                tokenRecipient spender = tokenRecipient(_spender);
                                if (approve(_spender, _value)) {
                                    spender.receiveApproval(msg.sender, _value, this, _extraData);
                                    return true;
                                }
                            }
                            function burn(uint256 _value) public returns (bool success) {
                                require(balanceOf[msg.sender] >= _value);   
                                balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            
                                totalSupply = totalSupply.sub(_value);                            
                                Burn(msg.sender, _value);
                                return true;
                            }
                            function burnFrom(address _from, uint256 _value) public returns (bool success) {
                                require(balanceOf[_from] >= _value);                
                                require(_value <= allowance[_from][msg.sender]);    
                                balanceOf[_from] = balanceOf[_from].sub(_value);                     
                                allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
                                totalSupply = totalSupply.sub(_value);                            
                                Burn(_from, _value);
                                return true;
                            }
                        }
                        contract Primeo is token, owned {
                            uint256 public totalDistributed = 0;        
                            uint256 public tokensPerEth = 10000000e8;
                            uint256 public constant minContribution = 1 ether / 100; 
                            event Distr(address indexed to, uint256 amount);
                            event DistrFinished();
                            event Airdrop(address indexed _owner, uint _amount, uint _balance);
                            event TokensPerEthUpdated(uint _tokensPerEth);
                            bool public distributionFinished = false;
                            modifier canDistr() {
                                require(!distributionFinished);
                                _;
                            }
                            function distr(address _to, uint256 _amount) canDistr private returns (bool) {
                                totalDistributed = totalDistributed.add(_amount);        
                                balanceOf[_to] = balanceOf[_to].add(_amount);
                                emit Distr(_to, _amount);
                                emit Transfer(address(0), _to, _amount);
                                return true;
                            }
                            function doAirdrop(address _participant, uint _amount) internal {
                                require( _amount > 0 );      
                                require( totalDistributed < totalSupply );
                                balanceOf[_participant] = balanceOf[_participant].add(_amount);
                                totalDistributed = totalDistributed.add(_amount);
                                if (totalDistributed >= totalSupply) {
                                    distributionFinished = true;
                                }
                                emit Airdrop(_participant, _amount, balanceOf[_participant]);
                                emit Transfer(address(0), _participant, _amount);
                            }
                            function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        
                                doAirdrop(_participant, _amount);
                            }
                            function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        
                                for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);
                            }
                            function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        
                                tokensPerEth = _tokensPerEth;
                                emit TokensPerEthUpdated(_tokensPerEth);
                            }
                            function () external payable {
                                getTokens();
                             }
                            function getTokens() payable canDistr  public {
                                uint256 tokens = 0;
                                require( msg.value >= minContribution );
                                require( msg.value > 0 );
                                tokens = tokensPerEth.mul(msg.value) / 1 ether;        
                                address investor = msg.sender;
                                if (tokens > 0) {
                                    distr(investor, tokens);
                                }
                                if (totalDistributed >= totalSupply) {
                                    distributionFinished = true;
                                }
                            }
                            function withdraw() onlyOwner public {
                                address myAddress = this;
                                uint256 etherBalance = myAddress.balance;
                                owner.transfer(etherBalance);
                            }
                            function burn(uint256 _value) onlyOwner public {
                                require(_value <= balanceOf[msg.sender]);
                                address burner = msg.sender;
                                balanceOf[burner] = balanceOf[burner].sub(_value);
                                totalSupply = totalSupply.sub(_value);
                                totalDistributed = totalDistributed.sub(_value);
                                emit Burn(burner, _value);
                            }
                            function withdrawAltcoinTokens(address _tokenContract) onlyOwner public returns (bool) {
                                AltcoinToken token =