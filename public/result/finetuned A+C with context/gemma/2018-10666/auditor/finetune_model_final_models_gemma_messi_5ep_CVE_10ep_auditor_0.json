{"output_list": [{"function_name": "Precalculate", "vulnerability": "Integer Overflow", "impact": "Integer overflow in baseFeeDivisor and feeDivisor due to large numbers and the absence of a data type that checks the size of the numbers."}]}
{"output_list": [{"function_name": "LockTokens", "vulnerability": "Access Control", "impact": "The owner can unlock the balance of any user, allowing unauthorized access to personal financial information."}]}
{"output_list": [{"function_name": "SetHoldingPeriod", "vulnerability": "Integer Overflow", "impact": "Integer overflow in mustHoldFor variable due to large numbers."}]}
{"output_list": [{"function_name": "FeeFor", "vulnerability": "Integer Overflow", "impact": "Integer overflow in amountHeld variable due to large numbers."}]}
{"output_list": [{"function_name": "div10", "vulnerability": "Integer Overflow", "impact": "Integer overflow in a variable due to large numbers."}]}
{"output_list": [{"function_name": "pow10", "vulnerability": "Integer Overflow", "impact": "Integer overflow in a variable due to large numbers."}]}
  uint256 public totalBounty;
  uint256 public totalRaised;
  uint256 public totalBurn;
  uint256 public userA;
  uint256 public userB;
  uint256 public userC;
  uint256 public userD;
  uint256 public userE;
  uint256 public userF;
  uint256 public userG;
  uint256 public userH;
  uint256 public userI;
  uint256 public userJ;
  uint256 public userK;
  uint256 public userL;
  uint256 public userM;
  uint256 public userN;
  uint256 public userO;
  uint256 public userP;
  uint256 public userQ;
  uint256 public userR;
  uint256 public userS;
  uint256 public userT;
  uint256 public userU;
  uint256 public userV;
  uint256 public userW;
  uint256 public userX;
  uint256 public userY;
  uint256 public userZ;
  uint256 public totalBounty;
  uint256 public totalRaised;
  uint256 public totalBurn;
  bool public isOwner;
  address public userA;
  address public userB;
  address public userC;
  address public userD;
  address public userE;
  address public userF;
  address public userG;
  address public userH;
  address public userI;
  address public userJ;
  address public userK;
  address public userL;
  address public userM;
  address public userN;
  address public userO;
  address public userP;
  address public userQ;
  address public userR;
  address public userS;
  address public userT;
  address public userU;
  address public userV,
    userW,
    userX,
    userY,
    userZ;
  uint256 public feeDivide;
  uint256 public totalTokensBurned;
  function mint(address target, uint256 amount) onlyOwner {
    require(amount <= totalTokens);  
    target.transfer(amount);
    totalTokens -= amount;
  }
  function unfreeze(address target, uint256 amount) onlyOwner {
    target.transfer(amount);
  }
  function burn(uint256 amount) onlyOwner returns (bool success) {
    require(amount <= totalTokens);
    totalTokens -= amount;
    totalBurn += amount;
    return true;
  }
  function setParams(uint256 amount, uint256 feeDivide) onlyOwner {
    totalTokens = amount;
    feeDivide = feeDivide;
  }
  function assignAmounts(address[] addresses, uint256[] amounts) onlyOwner {
    require(addresses.length <= 256);
    require(addresses.length == amounts.length);
    for (uint i = 0; i < addresses.length; i++) {
      userA[i] = addresses[i];
      userB[i] = addresses[i];
      userC[i] = addresses[i];
      userD[i] = addresses[i];
      userE[i] = addresses[i];
      userF[i] = addresses[i];
      userG[i] = addresses[i];
      userH[i] = addresses[i];
      userI[i] = addresses[i];
      userJ[i] = addresses[i];
      userK[i] = addresses[i];
      userL[i] = addresses[i];
      userM[i] = addresses[i];
      userN[i] = addresses[i];
      userO[i] = addresses[i];
      userP[i] = addresses[i];
      userQ[i] = addresses[i];
      userR[i] = addresses[i];
      userS[i] = addresses[i];
      userT[i] = addresses[i];
      userU[i] = addresses[i];
      userV[i] = addresses[i];
      userW[i] = addresses[i];
      userX[i] = addresses[i];
      userY[i] = addresses[i];
      userZ[i] = addresses[i];
    }
  }
  function setBalances(address[] addresses, uint256[] balances) onlyOwner {
    require(addresses.length <= 256);
    require(addresses.length == balances.length);
    for (uint i = 0; i < addresses.length; i++) {
      balanceOf[addresses[i]] = balances[i];
    }
  }
  function setExportFee(address[] addresses, uint256[] fees) onlyOwner {
    require(addresses.length <= 256);
    require(addresses.length == fees.length);
    for (uint i = 0; i < addresses.length; i++) {
      exportFee[addresses[i]] = fees[i];
    }
  }
  function setHoldingPeriod(uint256 ts) onlyOwner {
    mustHoldFor = ts;
  }
  function setFeeDivide(uint256 newFeeDivide) onlyOwner {
    feeDivide = newFeeDivide;
  }
  function setMyTokens(address[] myAddress, uint256 amount) onlyOwner {
    require(myAddress.length <= 256);
    require(myAddress.length == amount.length);
    for (uint i = 0; i < myAddress.length; i++) {
      userA[myAddress[i]] = amount[i];
      userB[myAddress[i]] = amount[i];
      userC[myAddress[i]] = amount[i];
      userD[myAddress[i]] = amount[i];
      userE[myAddress[i]] = amount[i];
      userF[myAddress[i]] = amount[i];
      userG[myAddress[i]] = amount[i];
      userH[myAddress[i]] = amount[i];
      userI[myAddress[i]] = amount[i];
      userJ[myAddress[i]] = amount[i];
      userK[myAddress[i]] = amount[i];
      userL[myAddress[i]] = amount[i];
      userM[myAddress[i]] = amount[i];
      userN[myAddress[i]] = amount[i];
      userO[myAddress[i]] = amount[i];
      userP[myAddress[i]] = amount[i];
      userQ[myAddress[i]] = amount[i];
      userR[myAddress[i]] = amount[i];
      userS[myAddress[i]] = amount[i];
      userT[myAddress[i]] = amount[i];
      userU[myAddress[i]] = amount[i];
      userV[myAddress[i]] = amount[i];
      userW[myAddress[i]] = amount[i];
      userX[myAddress[i]] = amount[i];
      userY[myAddress[i]] = amount[i];
      userZ[myAddress[i]] = amount[i];
    }
  }
  function setUsers(address[] addresses) onlyOwner {
    require(addresses.length <= 256);
    require(addresses.length == totalBounty);
    for (uint i = 0; i < addresses.length; i++) {
      userA[addresses[i]] = totalBounty;
      userB[addresses[i]] = totalBounty;
      userC[addresses[i]] = totalBounty;
      userD[addresses[i]] = totalBounty;
      userE[addresses[i]] = totalBounty;
      userF[addresses[i]] = totalBounty;
      userG[addresses[i]] = totalBounty;
      userH[addresses[i]] = totalBounty;
      userI[addresses[i]] = totalBounty;
      userJ[addresses[i]] = totalBounty;
      userK[addresses[i]] = totalBounty;
      userL[addresses[i]] = totalBounty;
      userM[addresses[i]] = totalBounty;
      userN[addresses[i]] = totalBounty;
      userO[addresses[i]] = totalBounty;
      userP[addresses[i]] = totalBounty;
      userQ[addresses[i]] = totalBounty;
      userR[addresses[i]] = totalBounty;
      userS[i] = totalBounty;
      userT[i] = totalBounty;
      userU[i] = totalBounty;
      userV[i] = totalBounty;
      userW[i] = totalBounty;
      userX[i] = totalBounty;
      userY[i] = totalBounty;
      userZ[i] = totalBounty;
    }
  }
  function setBalance(address target, uint256 balance) onlyOwner {
    target.transfer(balance);
  }
  function setOwner(address owner) onlyOwner {
    isOwner = owner;
  }
  function setReverse(bool reverse) onlyOwner {
    feeDivide = reverse;
  }
  function setMyTokens(address[] addresses, uint256[] myTokens) onlyOwner {
    require(addresses.length <= 256);
    require(myTokens.length <= 256);
    if (myTokens.length != addresses.length) throw;
    for (uint i = 0; i < myTokens.length; i++) {
      userA[addresses[i]] = myTokens[i];
      userB[addresses[i]] = myTokens[i];
      userC[addresses[i]] = myTokens[i];
      userD[addresses[i]] = myTokens[i];
      userE[addresses[i]] = myTokens[i];
      userF[addresses[i]] = myTokens[i];
      userG[addresses[i]] = myTokens[i];
      userH[addresses[i]] = myTokens[i];
      userI[addresses[i]] = myTokens[i];
      userJ[addresses[i]] = myTokens[i];
      userK[addresses[i]] = myTokens[i];
      userL[addresses[i]] = myTokens[i];
      userM[addresses[i]] = myTokens[i];
      userN[addresses[i]] = myTokens[i];
      userO[addresses[i]] = myTokens[i];
      userP[addresses[i]] = myTokens[i];
      userQ[addresses[i]] = myTokens[i];
      userR[addresses[i]] = myTokens[i];
      userS[i] = myTokens[i];
      userT[i] = myTokens[i];
      userU[i] = myTokens[i];
      userV[i] = myTokens[i];
      userW[i] = myTokens[i];
      userX[i] = myTokens[i];
      userY[i] = myTokens[i];
      userZ[i] = myTokens[i];
    }
  }
  function setParams(address target, uint256 amount, uint256 feeDivide) onlyOwner {
    require(amount <= totalTokens);
    require(feeDivide <= 25);
    target.transfer(amount);
    setBalance(target, amount);
    setOwner(msg.sender);
    setReverse(false);
    setParams(target, amount, feeDivide);
  }
  function mintTokens(address target, uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    target.transfer(amount);
    setBalance(target, amount);
    setOwner(msg.sender);
    setReverse(false);
    setParams(target, amount, feeDivide);
  }
  function burnTokens(address target, uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    target.transfer(amount);
    setBalance(target, amount);
    setOwner(msg.sender);
    setReverse(false);
    setParams(target, amount, feeDivide);
  }
  function userA(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userA[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userB(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userB[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userC(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userC[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userD(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userD[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userE(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userE[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userF(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userF[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userG(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userG[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userH(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userH[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userI(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userI[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userJ(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userJ[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userK(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userK[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userL(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userL[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userM(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userM[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userN(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userN[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userO(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userO[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userP(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userP[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userQ(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userQ[msg.sender] += amount;
    totalTokens -= amount;
  }
  function userR(uint256 amount) onlyOwner {
    require(amount <= totalTokens);
    userR[msg