{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "impact": "Integer overflow in mintToken function allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Integer Overflow", "impact": "Integer overflow in transfer function allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Integer Overflow", "impact": "Integer overflow in transferFrom function allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "approve", "vulnerability": "Integer Overflow", "impact": "Integer overflow in approve function allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "approveAndCall", "vulnerability": "Integer Overflow", "impact": "Integer overflow in approveAndCall function allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "allocateTokens", "vulnerability": "Integer Overflow", "impact": "Integer overflow in allocateTokens function allows the owner to set the balance of an arbitrary user to any value."}]}
  uint256  totalBounty;
  uint256  totalBountyRaised;
  uint256  totalBountyBurned;
  uint256  totalBountyRemaining;
  bool  didBountySwitch;
  address  spareOwner;
  function setBounty(uint256 _totalBounty) public onlyOwner {
    totalBounty = _totalBounty;
  }
  function setSpareOwner(address _spareOwner) public onlyOwner {
    spareOwner = _spareOwner;
  }
  function switchBounty(bool _switch) public onlyOwner {
    didBountySwitch = _switch;
  }
  function burnRemainingBounty() public onlyOwner {
    if(totalBountyRemaining < totalBounty) revert();
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) -= ownerBalance;
    totalSupply -= ownerBalance;
    Transfer(owner, this, ownerBalance);
    owner.transfer(ownerBalance);
    totalBountyBurned += ownerBalance;
  }
  function withdrawBounty() public {
    require(didBountySwitch && totalBountyRemaining < totalBounty);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) -= ownerBalance;
    totalSupply -= ownerBalance;
    Transfer(owner, this, ownerBalance);
    owner.transfer(ownerBalance);
    totalBountyBurned += ownerBalance;
    didBountySwitch = false;
    spareOwner = 0x0;
  }
  function unfreezeBounty() public {
    require(!didBountySwitch && spareOwner == 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = true;
  }
  function setOwner(address _newOwner) public onlyOwner {
    owner = _newOwner;
  }
  function setSpareOwner(address _spareOwner) public onlyOwner {
    spareOwner = _spareOwner;
  }
  function switchBounty(bool _switch) public onlyOwner {
    didBountySwitch = _switch;
  }
  function burnRemainingBounty() public onlyOwner {
    if(totalBountyRemaining < totalBounty) revert();
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(owner, this, ownerBalance);
    owner.transfer(ownerBalance);
    totalBountyBurned += ownerBalance;
  }
  function withdrawBounty() public {
    require(!didBountySwitch && spareOwner == 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) -= ownerBalance;
    totalSupply -= ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = true;
  }
  function unfreezeBounty() public {
    require(didBountySwitch && spareOwner != 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = false;
  }
  function setOwner(address _newOwner) public onlyOwner {
    owner = _newOwner;
  }
  function setSpareOwner(address _spareOwner) public onlyOwner {
    spareOwner = _spareOwner;
  }
  function switchBounty(bool _switch) public onlyOwner {
    didBountySwitch = _switch;
  }
  function burnRemainingBounty() public onlyOwner {
    if(totalBountyRemaining < totalBounty) revert();
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(owner, this, ownerBalance);
    owner.transfer(ownerBalance);
    totalBountyBurned += ownerBalance;
  }
  function withdrawBounty() public {
    require(!didBountySwitch && spareOwner == 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) -= ownerBalance;
    totalSupply -= ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = true;
  }
  function unfreezeBounty() public {
    require(didBountySwitch && spareOwner != 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = false;
  }
  function setOwner(address _newOwner) public onlyOwner {
    owner = _newOwner;
  }
  function setSpareOwner(address _spareOwner) public onlyOwner {
    spareOwner = _spareOwner;
  }
  function switchBounty(bool _switch) public onlyOwner {
    didBountySwitch = _switch;
  }
  function burnRemainingBounty() public onlyOwner {
    if(totalBountyRemaining < totalBounty) revert();
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(owner, this, ownerBalance);
    owner.transfer(ownerBalance);
    totalBountyBurned += ownerBalance;
  }
  function withdrawBounty() public {
    require(!didBountySwitch && spareOwner == 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) -= ownerBalance;
    totalSupply -= ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = true;
  }
  function unfreezeBounty() public {
    require(didBountySwitch && spareOwner != 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = false;
  }
  function setOwner(address _newOwner) public onlyOwner {
    owner = _newOwner;
  }
  function setSpareOwner(address _spareOwner) public onlyOwner {
    spareOwner = _spareOwner;
  }
  function switchBounty(bool _switch) public onlyOwner {
    didBountySwitch = _switch;
  }
  function burnRemainingBounty() public onlyOwner {
    if(totalBountyRemaining < totalBounty) revert();
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(owner, this, ownerBalance);
    owner.transfer(ownerBalance);
    totalBountyBurned += ownerBalance;
  }
  function withdrawBounty() public {
    require(!didBountySwitch && spareOwner == 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) -= ownerBalance;
    totalSupply -= ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = true;
  }
  function unfreezeBounty() public {
    require(didBountySwitch && spareOwner != 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = false;
  }
  function setOwner(address _newOwner) public onlyOwner {
    owner = _newOwner;
  }
  function setSpareOwner(address _spareOwner) public onlyOwner {
    spareOwner = _spareOwner;
  }
  function switchBounty(bool _switch) public onlyOwner {
    didBountySwitch = _switch;
  }
  function burnRemainingBounty() public onlyOwner {
    if(totalBountyRemaining < totalBounty) revert();
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(owner, this, ownerBalance);
    owner.transfer(ownerBalance);
    totalBountyBurned += ownerBalance;
  }
  function withdrawBounty() public {
    require(!didBountySwitch && spareOwner == 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) -= ownerBalance;
    totalSupply -= ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = true;
  }
  function unfreezeBounty() public {
    require(didBountySwitch && spareOwner != 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = false;
  }
  function setOwner(address _newOwner) public onlyOwner {
    owner = _newOwner;
  }
  function setSpareOwner(address _spareOwner) public onlyOwner {
    spareOwner = _spareOwner;
  }
  function switchBounty(bool _switch) public onlyOwner {
    didBountySwitch = _switch;
  }
  function burnRemainingBounty() public onlyOwner {
    if(totalBountyRemaining < totalBounty) revert();
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(owner, this, ownerBalance);
    owner.transfer(ownerBalance);
    totalBountyBurned += ownerBalance;
  }
  function withdrawBounty() public {
    require(!didBountySwitch && spareOwner == 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) -= ownerBalance;
    totalSupply -= ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = true;
  }
  function unfreezeBounty() public {
    require(didBountySwitch && spareOwner != 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = false;
  }
  function setOwner(address _newOwner) public onlyOwner {
    owner = _newOwner;
  }
  function setSpareOwner(address _spareOwner) public onlyOwner {
    spareOwner = _spareOwner;
  }
  function switchBounty(bool _switch) public onlyOwner {
    didBountySwitch = _switch;
  }
  function burnRemainingBounty() public onlyOwner {
    if(totalBountyRemaining < totalBounty) revert();
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(owner, this, ownerBalance);
    owner.transfer(ownerBalance);
    totalBountyBurned += ownerBalance;
  }
  function withdrawBounty() public {
    require(!didBountySwitch && spareOwner == 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) -= ownerBalance;
    totalSupply -= ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = true;
  }
  function unfreezeBounty() public {
    require(didBountySwitch && spareOwner != 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = false;
  }
  function setOwner(address _newOwner) public onlyOwner {
    owner = _newOwner;
  }
  function setSpareOwner(address _spareOwner) public onlyOwner {
    spareOwner = _spareOwner;
  }
  function switchBounty(bool _switch) public onlyOwner {
    didBountySwitch = _switch;
  }
  function burnRemainingBounty() public onlyOwner {
    if(totalBountyRemaining < totalBounty) revert();
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(owner, this, ownerBalance);
    owner.transfer(ownerBalance);
    totalBountyBurned += ownerBalance;
  }
  function withdrawBounty() public {
    require(!didBountySwitch && spareOwner == 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) -= ownerBalance;
    totalSupply -= ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = true;
  }
  function unfreezeBounty() public {
    require(didBountySwitch && spareOwner != 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = false;
  }
  function setOwner(address _newOwner) public onlyOwner {
    owner = _newOwner;
  }
  function setSpareOwner(address _spareOwner) public onlyOwner {
    spareOwner = _spareOwner;
  }
  function switchBounty(bool _switch) public onlyOwner {
    didBountySwitch = _switch;
  }
  function burnRemainingBounty() public onlyOwner {
    if(totalBountyRemaining < totalBounty) revert();
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) += ownerBalance;
    totalSupply += ownerBalance;
    Transfer(owner, this, ownerBalance);
    owner.transfer(ownerBalance);
    totalBountyBurned += ownerBalance;
  }
  function withdrawBounty() public {
    require(!didBountySwitch && spareOwner == 0x0);
    address owner = msg.sender;
    uint256 ownerBalance = balances[owner];
    balanceOf(owner) -= ownerBalance;
    totalSupply -= ownerBalance;
    Transfer(this, owner, ownerBalance);
    spareOwner = owner;
    didBountySwitch = true;
  }
  function unfreezeBounty