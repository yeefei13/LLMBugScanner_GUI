{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "impact": "Integer overflow in mintToken function allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "freezeAccount", "vulnerability": "Access Control", "impact": "freezeAccount function allows the owner to freeze the account of any user, which removes their assets."}]}
{"output_list": [{"function_name": "setPrices", "vulnerability": "Access Control", "impact": "setPrices function is public, allowing unauthorized users to change the sell and buy prices."}]}
{"output_list": [{"function_name": "buy", "vulnerability": "Integer Overflow", "impact": "Integer overflow in buy function allows the owner to set the balance of the buyer to any value."}]}
{"output_list": [{"function_name": "sell", "vulnerability": "Integer Overflow", "impact": "Integer overflow in sell function allows the owner to set the balance of the seller to any value."}]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Access Control", "impact": "transferFrom function is public, allowing unauthorized users to change the balance of the seller."}]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Access Control", "impact": "transfer function is public, allowing unauthorized users to change the balance of the buyer."}]}
{"output_list": [{"function_name": "payWinner", "vulnerability": "Access Control", "impact": "payWinner function is public, allowing unauthorized users to change the balance of the winner."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "impact": "Integer overflow in mintToken function allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "freezeAccount", "vulnerability": "Access Control", "impact": "freezeAccount function allows the owner to freeze the account of any user, which removes their assets."}]}
{"output_list": [{"function_name": "setPrices", "vulnerability": "Access Control", "impact": "setPrices function is public, allowing unauthorized users to change the sell and buy prices."}]}
{"output_list": [{"function_name": "buy", "vulnerability": "Integer Overflow", "impact": "Integer overflow in buy function allows the owner to set the balance of the buyer to any value."}]}
{"output_list": [{"function_name": "sell", "vulnerability": "Integer Overflow", "impact": "Integer overflow in sell function allows the owner to set the balance of the seller to any value."}]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Access Control", "impact": "transferFrom function is public, allowing unauthorized users to change the balance of the seller."}]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Access Control", "impact": "transfer function is public, allowing unauthorized users to change the balance of the buyer."}]}
{"output_list": [{"function_name": "payWinner", "vulnerability": "Access Control", "impact": "payWinner function is public, allowing unauthorized users to change the balance of the winner."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "impact": "Integer overflow in mintToken function allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "freezeAccount", "vulnerability": "Access Control", "impact": "freezeAccount function allows the owner to freeze the account of any user, which removes their assets."}]}
{"output_list": [{"function_name": "setPrices", "vulnerability": "Access Control", "impact": "setPrices function is public, allowing unauthorized users to change the sell and buy prices."}]}
{"output_list": [{"function_name": "buy", "vulnerability": "Integer Overflow", "impact": "Integer overflow in buy function allows the owner to set the balance of the buyer to any value."}]}
{"output_list": [{"function_name": "sell", "vulnerability": "Integer Overflow", "impact": "Integer overflow in sell function allows the owner to set the balance of the seller to any value."}]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Access Control", "impact": "transferFrom function is public, allowing unauthorized users to change the balance of the seller."}]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Access Control", "impact": "transfer function is public, allowing unauthorized users to change the balance of the buyer."}]}
{"output_list": [{"function_name": "payWinner", "vulnerability": "Access Control", "impact": "payWinner function is public, allowing unauthorized users to change the balance of the winner."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "impact": "Integer overflow in mintToken function allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "freezeAccount", "vulnerability": "Access Control", "impact": "freezeAccount function allows the owner to freeze the account of any user, which removes their assets."}]}
{"output_list": [{"function_name": "setPrices", "vulnerability": "Access Control", "impact": "setPrices function is public, allowing unauthorized users to change the sell and buy prices."}]}
{"output_list": [{"function_name": "buy", "vulnerability": "Integer Overflow", "impact": "Integer overflow in buy function allows the owner to set the balance of the buyer to any value."}]}
{"output_list": [{"function_name": "sell", "vulnerability": "Integer Overflow", "impact": "Integer overflow in sell function allows the owner to set the balance of the seller to any value."}]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Access Control", "impact": "transferFrom function is public, allowing unauthorized users to change the balance of the seller."}]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Access Control", "impact": "transfer function is public, allowing unauthorized users to change the balance of the buyer."}]}
{"output_list": [{"function_name": "payWinner", "vulnerability": "Access Control", "impact": "payWinner function is public, allowing unauthorized users to change the balance of the winner."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "impact": "Integer overflow in mintToken function allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "freezeAccount", "vulnerability": "Access Control", "impact": "freezeAccount function allows the owner to freeze the account of any user, which removes their assets."}]}
{"output_list": [{"function_name": "setPrices", "vulnerability": "Access Control", "impact": "setPrices function is public, allowing unauthorized users to change the sell and buy prices."}]}
{"output_list": [{"function_name": "buy", "vulnerability": "Integer Overflow", "impact": "Integer overflow in buy function allows the owner to set the balance of the buyer to any value."}]}
{"output_list": [{"function_name": "sell", "vulnerability": "Integer Overflow", "impact": "Integer overflow in sell function allows the owner to set the balance of the seller to any value."}]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Access Control", "impact": "transferFrom function is public, allowing unauthorized users to change the balance of the seller."}]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Access Control", "impact": "transfer function is public, allowing unauthorized users to change the balance of the buyer."}]}
{"output_list": [{"function_name": "payWinner", "vulnerability": "Access Control", "impact": "payWinner function is public, allowing unauthorized users to change the balance of the winner."}]}
}
  
---

### Master Page:
pragma solidity ^0.4.19;
contract LottoCount {
    uint256 public maxTickets;
    uint256 public ticketPrice; 
    uint256 public totalBounty;
    uint256 public totalBountyRemaining;
    uint256 public ownerBalance;
    address public owner;
    mapping(address => uint256) public balances;
    mapping(address => mapping (address => uint256)) public allowed;
    event NewOwner(address indexed _from, address indexed _to);
    event NewMaxTickets(address indexed _from, uint256 _value);
    event SetPrices(address indexed _from, uint256 _value);
    function LottoCount() {
        owner = msg.sender;
        ticketPrice = 1000000000000000000000000000;
        maxTickets = 20;
    }
    function setPrices(uint256 newTicketPrice, uint256 newMaxTickets) onlyOwner {
        ticketPrice = newTicketPrice;
        maxTickets = newMaxTickets;
        SetPrices(msg.sender, _value);
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        balances[target] += mintedAmount;
        totalSupply += mintedAmount;
        NewOwner(msg.sender, target);
    }
    function transfer(address _to, uint256 _value) returns (bool success) {
        if (balances[msg.sender] < _value) throw;           
        if (balances[_to] + _value < balances[_to]) throw; 
        if (msg.sender.balance < _value) throw;         
        if (_to.balance < _value) throw;               
        balances[msg.sender] -= _value;                     
        balances[_to] += _value;                            
        Transfer(msg.sender, _to, _value);                   
        return true;                                             
    }
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (balances[_from] < _value) throw;                 
        if (balances[_to] + _value < balances[_to]) throw; 
        if (msg.sender.balance < _value) throw;         
        if (_to.balance < _value) throw;               
        balances[_from] -= _value;                     
        allowed[_from][msg.sender] -= _value;
        balances[_to] += _value;                            
        Transfer(_from, _to, _value);                   
        return true;                                             
    }
}
contract LottoGame is LottoCount {
    uint256 public winnerPrice;
    uint256 public winnerBounty;
    uint256 public totalBounty;
    uint256 public totalBountyRemaining;
    uint256 public ownerBalance;
    address public king;
    uint256 public kingBalance;
    event NewKing(address indexed _from, address indexed _to);
    function LottoGame() {
        owner = msg.sender;
        maxTickets = 20;
        ticketPrice = 1000000000000000000000000000;
        SetPrices(msg.sender, _value);
        king = owner;
        kingBalance = ownerBalance;
    }
    function transfer(address _to, uint256 _value) returns (bool success) {
        if (balances[msg.sender] < _value) throw;           
        if (balances[_to] + _value < balances[_to]) throw; 
        if (msg.sender.balance < _value) throw;         
        if (_to.balance < _value) throw;               
        balances[msg.sender] -= _value;                     
        balances[_to] += _value;                            
        Transfer(msg.sender, _to, _value);                   
        return true;                                             
    }
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (balances[_from] < _value) throw;                 
        if (balances[_to] + _value < balances[_to]) throw; 
        if (msg.sender.balance < _value) throw;         
        if (_to.balance < _value) throw;               
        balances[_from] -= _value;                     
        allowed[_from][msg.sender] -= _value;
        balances[_to] += _value;                            
        Transfer(_from, _to, _value);                   
        return true;                                             
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        balances[target] += mintedAmount;
        totalSupply += mintedAmount;
        NewOwner(msg.sender, target);
    }
    function setPrices(uint256 newTicketPrice, uint256 newMaxTickets) onlyOwner {
        ticketPrice = newTicketPrice;
        maxTickets = newMaxTickets;
        SetPrices(msg.sender, _value);
        kingBalance = ownerBalance;
    }
    function payWinner() onlyOwner {
        uint ownerBalanceRemaining = totalBountyRemaining;
        if (msg.sender.balance < ownerBalanceRemaining) throw;
        totalBountyRemaining -= ownerBalanceRemaining;
        owner.transfer(ownerBalanceRemaining);
        PayWinner(msg.sender);
    }
    function getBalance() constant returns (uint256 balance) {
        balance = totalBountyRemaining;
    }
    function setKing(address _king) onlyOwner {
        king = _king;
        kingBalance = ownerBalance;
    }
    function setMaxTickets(uint _maxTickets) onlyOwner {
        maxTickets = _maxTickets;
    }
    function setPrices(uint256 _ticketPrice, uint256 _maxTickets) onlyOwner {
        ticketPrice = _ticketPrice;
        maxTickets = _maxTickets;
    }
    function buyTicket(address buyer, uint256 _value) constant {
        if (msg.sender != buyer) throw;
        if (buyer.balance < _value) throw;
        balanceOf[this] -= _value;
        balanceOf[buyer] += _value;
        Transfer(this, buyer, _value);
    }
    function withdraw() onlyOwner {
        owner.transfer(this.balance);
    }
    function setOwner(address _owner) onlyOwner {
        owner = _owner;
    }
    function setKing(address _king) onlyOwner {
        king = _king;
    }
    function setMaxTickets(uint256 _maxTickets) onlyOwner {
        maxTickets = _maxTickets;
    }
    function setPrices(uint256 _ticketPrice, uint256 _maxTickets) onlyOwner {
        ticketPrice = _ticketPrice;
        maxTickets = _maxTickets;
    }
    function buyTicket(address buyer, uint256 _value) constant {
        if (msg.sender != buyer) throw;
        if (buyer.balance < _value) throw;
        balanceOf[this] -= _value;
        balanceOf[buyer] += _value;
        Transfer(this, buyer, _value);
    }
    function withdraw() onlyOwner {
        owner.transfer(this.balance);
    }
    function setOwner(address _owner) onlyOwner {
        owner = _owner;
    }
    function setKing(address _king) onlyOwner {
        king = _king;
    }
    function setMaxTickets(uint256 _maxTickets) onlyOwner {
        maxTickets = _maxTickets;
    }
    function setPrices(uint256 _ticketPrice, uint256 _maxTickets) onlyOwner {
        ticketPrice = _ticketPrice;
        maxTickets = _maxTickets;
    }
    function payWinner() onlyOwner {
        owner.transfer(this.balance);
    }
    function setOwner(address _owner) onlyOwner {
        owner = _owner;
    }
    function setKing(address _king) onlyOwner {
        king = _king;
    }
    function setMaxTickets(uint256 _maxTickets) onlyOwner {
        maxTickets = _maxTickets;
    }
    function setPrices(uint256 _ticketPrice, uint256 _maxTickets) onlyOwner {
        ticketPrice = _ticketPrice;
        maxTickets = _maxTickets;
    }
    function buyTicket(address buyer, uint256 _value) constant {
        if (msg.sender != buyer) throw;
        if (buyer.balance < _value) throw;
        balanceOf[this] -= _value;
        balanceOf[buyer] += _value;
        Transfer(this, buyer, _value);
    }
    function withdraw() onlyOwner {
        owner.transfer(this.balance);
    }
    function setOwner(address _owner) onlyOwner