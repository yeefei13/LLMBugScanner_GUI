Code Input: 

pragma solidity ^0.4.10;
contract AbstractSweeper {
    function sweep(address token, uint amount) returns (bool);
    function () { throw; }
    Controller controller;
    function AbstractSweeper(address _controller) {
        controller = Controller(_controller);
    }
    modifier canSweep() {
        if (msg.sender != controller.authorizedCaller() && msg.sender != controller.owner()) throw;
        if (controller.halted()) throw;
        _;
    }
}
contract Token {
    function balanceOf(address a) returns (uint) {
        (a);
        return 0;
    }
    function transfer(address a, uint val) returns (bool) {
        (a);
        (val);
        return false;
    }
}
contract DefaultSweeper is AbstractSweeper {
    function DefaultSweeper(address controller)
             AbstractSweeper(controller) {}
    function sweep(address _token, uint _amount)
    canSweep
    returns (bool) {
        bool success = false;
        address destination = controller.destination();
        if (_token != address(0)) {
            Token token = Token(_token);
            uint amount = _amount;
            if (amount > token.balanceOf(this)) {
                return false;
            }
            success = token.transfer(destination, amount);
        }
        else {
            uint amountInWei = _amount;
            if (amountInWei > this.balance) {
                return false;
            }
            success = destination.send(amountInWei);
        }
        if (success) {
            controller.logSweep(this, destination, _token, _amount);
        }
        return success;
    }
}
contract UserWallet {
    AbstractSweeperList sweeperList;
    function UserWallet(address _sweeperlist) {
        sweeperList = AbstractSweeperList(_sweeperlist);
    }
    function () public payable { }
    function tokenFallback(address _from, uint _value, bytes _data) {
        (_from);
        (_value);
        (_data);
     }
    function sweep(address _token, uint _amount)
    returns (bool) {
        (_amount);
        return sweeperList.sweeperOf(_token).delegatecall(msg.data);
    }
}
contract AbstractSweeperList {
    function sweeperOf(address _token) returns (address);
}
contract Controller is AbstractSweeperList {
    address public owner;
    address public authorizedCaller;
    address public destination;
    bool public halted;
    event LogNewWallet(address receiver);
    event LogSweep(address indexed from, address indexed to, address indexed token, uint amount);
    modifier onlyOwner() {
        if (msg.sender != owner) throw; 
        _;
    }
    modifier onlyAuthorizedCaller() {
        if (msg.sender != authorizedCaller) throw; 
        _;
    }
    modifier onlyAdmins() {
        if (msg.sender != authorizedCaller && msg.sender != owner) throw; 
        _;
    }
    function Controller() 
    {
        owner = msg.sender;
        destination = msg.sender;
        authorizedCaller = msg.sender;
    }