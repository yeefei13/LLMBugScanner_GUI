Code Input: 

pragma solidity 0.4.23;
library SafeMath {
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
contract Ownable {
  address internal contractOwner;
  constructor () internal {
    if(contractOwner == address(0)){
      contractOwner = msg.sender;
    }
  }
  modifier onlyOwner() {
    require(msg.sender == contractOwner);
    _;
  }
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    contractOwner = newOwner;
  }
}
contract Pausable is Ownable {
  bool private paused = false;
  modifier whenNotPaused() {
    if(paused == true && msg.value > 0){
      msg.sender.transfer(msg.value);
    }
    require(!paused);
    _;
  }
  function triggerPause() onlyOwner external {
    paused = !paused;
  }
}
contract ChampFactory is Pausable{
    event NewChamp(uint256 champID, address owner);
    using SafeMath for uint; 
    struct Champ {
        uint256 id; 
        uint256 attackPower;
        uint256 defencePower;
        uint256 cooldownTime; 
        uint256 readyTime; 
        uint256 winCount;
        uint256 lossCount;
        uint256 position; 
        uint256 price; 
        uint256 withdrawCooldown; 
        uint256 eq_sword;
        uint256 eq_shield;
        uint256 eq_helmet;
        bool forSale; 
    }
    struct AddressInfo {
        uint256 withdrawal;
        uint256 champsCount;
        uint256 itemsCount;
        string name;
    }
    struct Item {
        uint8 itemType; 
        uint8 itemRarity; 
        uint256 attackPower;
        uint256 defencePower;
        uint256 cooldownReduction;
        uint256 price;
        uint256 onChampId; 
        bool onChamp;
        bool forSale; 
    }
    mapping (address => AddressInfo) public addressInfo;
    mapping (uint256 => address) public champToOwner;
    mapping (uint256 => address) public itemToOwner;
    mapping (uint256 => string) public champToName;
    Champ[] public champs;
    Item[] public items;
    uint256[] public leaderboard;
    uint256 internal createChampFee = 5 finney;
    uint256 internal lootboxFee = 5 finney;
    uint256 internal pendingWithdrawal = 0;
    uint256 private randNonce = 0; 
    uint256 public champsForSaleCount;
    uint256 public itemsForSaleCount;
    modifier onlyOwnerOfChamp(uint256 _champId) {
        require(msg.sender == champToOwner[_champId]);
        _;
    }
    modifier onlyNotOwnerOfChamp(uint256 _champId) {
        require(msg.sender != champToOwner[_champId]);
        _;
    }
    modifier isPaid(uint256 _price){
        require(msg.value >= _price);
        _;
    }
    modifier contractMinBalanceReached(){
        require( (address(this).balance).sub(pendingWithdrawal) > 1000000 );
        _;
    }
    modifier isChampWithdrawReady(uint256 _id){
        require(champs[_id].withdrawCooldown < block.timestamp);
        _;
    }
    modifier distributeInput(address _affiliateAddress){
        uint256 contractOwnerWithdrawal = (msg.value / 100) * 50; 
        addressInfo[contractOwner].withdrawal += contractOwnerWithdrawal;
        pendingWithdrawal += contractOwnerWithdrawal;
        if(_affiliateAddress != address(0) && _affiliateAddress != msg.sender){
            uint256 affiliateBonus = (msg.value / 100) * 25; 
            addressInfo[_affiliateAddress].withdrawal += affiliateBonus;
            pendingWithdrawal += affiliateBonus;
        }
        _;
    }
    function getChampsByOwner(address _owner) external view returns(uint256[]) {
        uint256[] memory result = new uint256[](addressInfo[_owner].champsCount);
        uint256 counter = 0;
        for (uint256 i = 0; i < champs.length; i++) {
            if (champToOwner[i] == _owner) {
                result[counter] = i;
                counter++;
            }
        }
        return result;
    }
    function getChampsCount() external view returns(uint256){
        return champs.length;
    }
    function getChampReward(uint256 _position) public view returns(uint256) {
        if(_position <= 800){
            uint256 rewardPercentage = uint256(2000).sub(2 * (_position - 1));
            uint256 availableWithdrawal = address(this).balance.sub(pendingWithdrawal);
            return availableWithdrawal / 1000000 * rewardPercentage;
        }else{
            return uint256(0);
        }
    }
    function randMod(uint256 _modulus) internal returns(uint256) {
        randNonce++;
        return uint256(keccak256(randNonce, blockhash(block.number - 1))) % _modulus;
    }
    function createChamp(address _affiliateAddress) external payable
    whenNotPaused
    isPaid(createChampFee)
    distributeInput(_affiliateAddress)
    {
        uint256 id = champs.push(Champ(0, 2 + randMod(4), 1 + randMod(4), uint256(1 days)  - uint256(randMod(9) * 1 hours), 0, 0, 0, leaderboard.length + 1, 0, uint256(block.timestamp), 0,0,0, false)) - 1;
        champs[id].id = id; 
        leaderboard.push(id); 
        champToOwner[id] = msg.sender; 
        addressInfo[msg.sender].champsCount++;
        emit NewChamp(id, msg.sender);
    }
    function setCreateChampFee(uint256 _fee) external onlyOwner {
        createChampFee = _fee;
    }
    function changeChampsName(uint _champId, string _name) external
    onlyOwnerOfChamp(_champId){
        champToName[_champId] = _name;
    }
    function changePlayersName(string _name) external {
        addressInfo[msg.sender].name = _name;
    }
    function withdrawChamp(uint _id) external
    onlyOwnerOfChamp(_id)
    contractMinBalanceReached
    isChampWithdrawReady(_id)
    whenNotPaused {
        Champ storage champ = champs[_id];
        require(champ.position <= 800);
        champ.withdrawCooldown = block.timestamp + 1 days; 
        uint256 withdrawal = getChampReward(champ.position);
        addressInfo[msg.sender].withdrawal += withdrawal;
        pendingWithdrawal += withdrawal;
    }
    function withdrawToAddress(address _address) external
    whenNotPaused {
        address playerAddress = _address;
        if(playerAddress == address(0)){ playerAddress = msg.sender; }
        uint256 share = addressInfo[playerAddress].withdrawal; 
        require(share > 0); 
        addressInfo[playerAddress].withdrawal = 0; 
        pendingWithdrawal = pendingWithdrawal.sub(share); 
        playerAddress.transfer(share); 
    }
}
contract Items is ChampFactory {
    event NewItem(uint256 itemID, address owner);
    constructor () internal {
        items.push(Item(0, 0, 0, 0, 0, 0, 0, false, false));
    }
    modifier onlyOwnerOfItem(uint256 _itemId) {
        require(_itemId != 0);
        require(msg.sender == itemToOwner[_itemId]);
        _;
    }
    modifier onlyNotOwnerOfItem(uint256 _itemId) {
        require(msg.sender != itemToOwner[_itemId]);
        _;
    }
    function hasChampSomethingOn(uint _champId, uint8 _type) internal view returns(bool){
        Champ storage champ = champs[_champId];
        if(_type == 1){
            return (champ.eq_sword == 0) ? false : true;
        }
        if(_type == 2){
            return (champ.eq_shield == 0) ? false : true;
        }
        if(_type == 3){
            return (champ.eq_helmet == 0) ? false : true;
        }
    }
    function getItemsByOwner(address _owner) external view returns(uint256[]) {
        uint256[] memory result = new uint256[](addressInfo[_owner].itemsCount);
        uint256 counter = 0;
        for (uint256 i = 0; i < items.length; i++) {
            if (itemToOwner[i] == _owner) {
                result[counter] = i;
                counter++;
            }
        }
        return result;
    }
    function takeOffItem(uint _champId, uint8 _type) public
        onlyOwnerOfChamp(_champId) {
            uint256 itemId;
            Champ storage champ = champs[_champId];
            if(_type == 1){
                itemId = champ.eq_sword; 
                if (itemId > 0) { 
                    champ.eq_sword = 0; 
                }
            }
            if(_type == 2){
                itemId = champ.eq_shield; 
                if(itemId > 0) {
                    champ.eq_shield = 0; 
                }
            }
            if(_type == 3){
                itemId = champ.eq_helmet; 
                if(itemId > 0) { 
                    champ.eq_helmet = 0; 
                }
            }
            if(itemId > 0){
                items[itemId].onChamp = false; 
            }
    }
    function putOn(uint256 _champId, uint256 _itemId) external
        onlyOwnerOfChamp(_champId)
        onlyOwnerOfItem(_itemId) {
            Champ storage champ = champs[_champId];
            Item storage item = items[_itemId];
            if(item.onChamp){
                takeOffItem(item.onChampId, item.itemType); 
            }
            item.onChamp = true; 
            item.onChampId = _champId; 
            if(item.itemType == 1){
                if(champ.eq_sword > 0){
                    takeOffItem(champ.id, 1);
                }
                champ.eq_sword = _itemId; 
            }
            if(item.itemType == 2){
                if(champ.eq_shield > 0){
                    takeOffItem(champ.id, 2);
                }
                champ.eq_shield = _itemId; 
            }
            if(item.itemType == 3){
                if(champ.eq_helmet > 0){
                    takeOffItem(champ.id, 3);
                }
                champ.eq_helmet = _itemId; 
            }
    }
    function openLootbox(address _affiliateAddress) external payable
    whenNotPaused
    isPaid(lootboxFee)
    distributeInput(_affiliateAddress) {
        uint256 pointToCooldownReduction;
        uint256 randNum = randMod(1001); 
        uint256 pointsToShare; 
        uint256 itemID;
        Item memory item = Item({
            itemType: uint8(uint256(randMod(3) + 1)), 
            itemRarity: uint8(0),
            attackPower: 0,
            defencePower: 0,
            cooldownReduction: 0,
            price: 0,
            onChampId: 0,
            onChamp: false,
            forSale: false
        });
        if(450 > randNum){
            pointsToShare = 25 + randMod(9); 
            item.itemRarity = uint8(1);
        }else if(720 > randNum){
            pointsToShare = 42 + randMod(17); 
            item.itemRarity = uint8(2);
        }else if(910 > randNum){
            pointsToShare = 71 + randMod(25); 
            item.itemRarity = uint8(3);
        }else if(980 > randNum){
            pointsToShare = 119 + randMod(33); 
            item.itemRarity = uint8(4);
        }else{
            pointsToShare = 235 + randMod(41); 
            item.itemRarity = uint8(5);
        }
        if(item.itemType == uint8(1)){ 
            item.attackPower = pointsToShare / 10 * 7; 
            pointsToShare -= item.attackPower; 
            item.defencePower = pointsToShare / 10 * randMod(6); 
            pointsToShare -= item.defencePower; 
            item.cooldownReduction = pointsToShare * uint256(1 minutes); 
            item.itemType = uint8(1);
        }
        if(item.itemType == uint8(2)){ 
            item.defencePower = pointsToShare / 10 * 7; 
            pointsToShare -= item.defencePower; 
            item.attackPower = pointsToShare / 10 * randMod(6); 
            pointsToShare -= item.attackPower; 
            item.cooldownReduction = pointsToShare * uint256(1 minutes); 
            item.itemType = uint8(2);
        }
        if(item.itemType == uint8(3)){ 
            pointToCooldownReduction = pointsToShare / 10 * 7; 
            item.cooldownReduction = pointToCooldownReduction * uint256(1 minutes); 
            pointsToShare -= pointToCooldownReduction; 
            item.attackPower = pointsToShare / 10 * randMod(6); 
            pointsToShare -= item.attackPower; 
            item.defencePower = pointsToShare; 
            item.itemType = uint8(3);
        }
        itemID = items.push(item) - 1;
        itemToOwner[itemID] = msg.sender; 
        addressInfo[msg.sender].itemsCount++; 
        emit NewItem(itemID, msg.sender);
    }
    function setLootboxFee(uint _fee) external onlyOwner {
        lootboxFee = _fee;
    }
}
contract ItemMarket is Items {
    event TransferItem(address from, address to, uint256 itemID);
    constructor () internal {
        items.push(Item(0, 0, 0, 0, 0, 0, 0, false, false));
    }
    modifier itemIsForSale(uint256 _id){
        require(items[_id].forSale);
        _;
    }
    modifier itemIsNotForSale(uint256 _id){
        require(items[_id].forS