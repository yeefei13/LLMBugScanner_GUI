{"output_list": [{"function_name": "simplelottery", "vulnerability": "Integer Overflow", "reason": "The transfer of the lottery's contract to the winner's wallet creates an integer overflow."}]}
{"output_list": [{"function_name": "simplelottery", "vulnerability": "Wrong Logic", "reason": "The logic used to determine the winner's position is incorrect."}]}
{"output_list": [{"function_name": "simplelottery", "vulnerability": "Bad Randomness", "reason": "The random number generator used to distribute prizes is biased towards certain numbers."}]}
{"output_list": [{"function_name": "simplelottery", "vulnerability": "Access Control", "reason": "The contract allows only the owner to set the betting conditions, retrieve user guesses and declare the winner."}]}
{"output_list": [{"function_name": "simplelottery", "vulnerability": "Typo Constructor", "reason": "The contract name is spelled incorrectly."}]}
{"output_list": [{"function_name": "simplelottery", "vulnerability": "Token Devalue", "reason": "The value of the lottery's contract is not fixed, allowing the owner to set arbitrary prices."}]}
}
Code: 
pragma solidity ^0.4.11;
contract owned {
    address public owner;
    function owned() {
        owner = msg.sender;
    }
    modifier onlyOwner {
        if (msg.sender != owner) throw;
        _;
    }
    function transferOwnership(address newOwner) onlyOwner {
        owner = newOwner;
    }
}
contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
contract token {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    function token(
        uint256 initialSupply,
        string tokenName,
        uint256 decimalUnits,
        string tokenSymbol
    ) {
        balanceOf[msg.sender] = initialSupply;              
        totalSupply = initialSupply;                        
        name = tokenName;                                   
        symbol = tokenSymbol;                               
        decimals = decimalUnits;                            
    }
    function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) throw;           
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; 
        balanceOf[msg.sender] -= _value;                     
        balanceOf[_to] += _value;                            
        Transfer(msg.sender, _to, _value);                   
    }
    function approve(address _spender, uint256 _value)
        returns (bool success)
    {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        returns (bool success)
    {    
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (balanceOf[_from] < _value) throw;                 
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  
        if (_value > allowance[_from][msg.sender]) throw;   
        balanceOf[_from] -= _value;                          
        balanceOf[_to] += _value;                            
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }
    function () payable {
        throw;     
    }
}
contract YLCToken is owned, token {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function YLCToken(
        uint256 initialSupply,
        string tokenName,
        uint256 decimalUnits,
        string tokenSymbol
    ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}
    function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) throw;           
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; 
        if (frozenAccount[msg.sender]) throw;                
        balanceOf[msg.sender] -= _value;                     
        balanceOf[_to] += _value;                            
        Transfer(msg.sender, _to, _value);                   
    }
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (frozenAccount[_from]) throw;                        
        if (balanceOf[_from] < _value) throw;                 
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  
        if (_value > allowance[_from][msg.sender]) throw;   
        balanceOf[_from] -= _value;                          
        balanceOf[_to] += _value;                            
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        Transfer(0, this, mintedAmount);
        Transfer(this, target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable {
        uint amount = msg.value / buyPrice;               
        if (balanceOf[this] < amount) throw;               
        balanceOf[msg.sender] += amount;                   
        balanceOf[this] -= amount;                         
        Transfer(this, msg.sender, amount);                
    }
    function sell(uint256 amount) {
        if (balanceOf[msg.sender] < amount ) throw;        
        balanceOf[this] += amount;                         
        balanceOf[msg.sender] -= amount;                   
        if (msg.sender.send(amount * sellPrice)) return true;
        throw;                                         
    }
}
contract YLCTokenPreSale is owned {
    address public developer;
    address public owner;
    uint256 public price;
    uint256 public totalReserved;
    uint256 public totalBounties;
    uint256 public totalPot;
    uint256 public totalDuration;
    uint256 public totalUsers;
    event PreSaleStarted(address indexed target, uint256 reservedWords, uint256 totalPot, uint256 totalDuration);
    event PreSaleFinished(address indexed target, uint256 reservedWords, uint256 totalPot, uint256 totalDuration, uint256 totalBouncies);
    function YLCTokenPreSale(address _owner, address _developer, uint256 _price) {
        owner = _owner;
        developer = _developer;
        price = _price;
        totalReserved = 0;
        totalBounties = 0;
        totalPot = 0;
        totalDuration = 0;
        totalUsers = 0;
    }
    function startPreSale() preSaleStarted(msg.sender, totalReserved, totalPot, totalDuration) {
        if (msg.sender != owner) throw;
        totalUsers += 1;
        totalDuration += totalDuration;
        totalPot += totalPot;
        PreSaleStarted(msg.sender, totalReserved, totalPot, totalDuration);
    }
    function finishPreSale() preSaleFinished(msg.sender, totalReserved, totalPot, totalDuration, totalBounties);
    function getPreSaleStatus() constant returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {
        return (totalUsers, totalReserved, totalPot, totalDuration, totalBounties, totalPot, totalUsers);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        Transfer(0, this, mintedAmount);
        Transfer(this, target, mintedAmount);
    }
    function buy() payable {
        uint amount = msg.value / buyPrice;               
        if (balanceOf[this] < amount) throw;               
        balanceOf[msg.sender] += amount;                   
        balanceOf[this] -= amount;                         
        Transfer(this, msg.sender, amount);                
    }
    function sell(uint256 amount) {
        if (balanceOf[msg.sender] < amount ) throw;        
        balanceOf[this] += amount;                         
        balanceOf[msg.sender] -= amount;                   
        if (msg.sender.send(amount * sellPrice)) return true;
        throw;                                         
    }
}
contract YLCTokenPreSale is owned, tokenRecipient {
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) onlyOwner
    returns (bool success) {
        token _token = YLCTokenPreSale(msg.sender, _spender, _value);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
}
contract token is owned {
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    string public name;                   
    string public symbol;                 
    uint8 public decimals;                
    uint256 public totalSupply;             
    event Transfer(address indexed from, address indexed to, uint256 value);
    function token(
        uint256 initialSupply,
        string tokenName,
        uint256 decimalUnits,
        string tokenSymbol
    ) owned {}
    function transfer(address _to, uint256 _value) {
        if (balances[msg.sender] < _value) throw;           
        if (balances[_to] + _value < balances[_to]) throw; 
        if (_value > allowed[msg.sender][this]) throw;   
        balances[msg.sender] -= _value;                     
        balances[_to] += _value;                            
        Transfer(msg.sender, _to, _value);                   
    }
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (frozenAccount[_from]) throw;                        
        if (balances[_from] < _value) throw;                 
        if (balances[_to] + _value < balances[_to]) throw;  
        if (_value > allowed[_from][msg.sender]) throw;   
        balances[_from] -= _value;                          
        balances[_to] += _value;                            
        allowed[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        balances[target] += mintedAmount;
        totalSupply += mintedAmount;             
        Transfer(0, this, mintedAmount);
        Transfer(this, target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable {
        uint amount = msg.value / buyPrice;               
        if (balanceOf[this] < amount) throw;               
        balanceOf[msg.sender] += amount;                   
        balanceOf[this] -= amount;                         
        Transfer(this, msg.sender, amount);                
    }
    function sell(uint256 amount) {
        if (balanceOf[msg.sender] < amount ) throw;        
        balanceOf[this] += amount;                         
        balanceOf[msg.sender] -= amount;                   
        if (msg.sender.send(amount * sellPrice)) return true;
        throw;                                         
    }
}
contract YLCToken is token, owned {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function YLCToken(
        uint256 initialSupply,
        string tokenName,
        uint256 decimalUnits,
        string tokenSymbol
    ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        if (frozenAccount[target]) throw;
        balances[target] += mintedAmount;
        totalSupply += mintedAmount;             
        Transfer(0, this, mintedAmount);
        Transfer(this, target, mintedAmount);
        frozenAccount[target] = true;
    }
    function freezeAccount(address target, bool freeze) onlyOwner {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable {
        if (frozenAccount[msg.sender]) throw;
        uint amount = msg.value / buyPrice;               
        if (balanceOf[this] < amount) throw;               
        balanceOf[msg.sender] += amount;                   
        balanceOf[this] -= amount;                         
        Transfer(this, msg.sender, amount);                
    }
    function sell(uint256 amount) {
        if (frozenAccount[msg.sender]) throw;
        if (balanceOf[msg.sender] < amount ) throw;        
        balanceOf[this] += amount;                         
        balanceOf[msg.sender] -= amount;                   
        if (msg.sender.send(amount * sellPrice)) return true;
        throw;                                         
    }
}
contract owned {
    function owned() {
        owner = msg.sender;
    }
    function transferOwnership(address newOwner) onlyOwner {
        owner = newOwner;
    }
}
contract token is owned {
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
        if (frozenAccount[target]) throw;
        balances[target] += mintedAmount;
        totalSupply += mintedAmount;             
        Transfer(0, this, mintedAmount);
        Transfer(this, target, mintedAmount);
        frozenAccount[target] = true;
    }
    function freezeAccount(address target, bool freeze) onlyOwner {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable {
        if (frozenAccount[msg.sender]) throw;
        uint amount = msg.value / buyPrice;               
        if (balanceOf[this] < amount) throw;               
        balanceOf[msg.sender] += amount;                   
        balanceOf[this] -= amount;                         
        Transfer(this, msg.sender, amount);                
    }
    function sell(uint256 amount) {
        if (frozenAccount[msg.sender]) throw;
        if (balanceOf[msg.sender] < amount ) throw;        
        balanceOf[this] += amount;                         
        balanceOf[msg.sender] -= amount;                   
        if (msg.sender.send(amount * sellPrice)) return true;
        throw;                                         
    }
}
contract YLCToken is token, owned, tokenRecipient {
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) onlyOwner
    returns (bool success) {
        token _