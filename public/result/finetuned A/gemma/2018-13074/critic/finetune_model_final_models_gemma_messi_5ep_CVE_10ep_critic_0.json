{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "The mintToken function has an integer overflow that allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Wrong Logic", "reason": "The mintToken function allows the owner to set the balance of an arbitrary user to any value, which can be used to create arbitrary tokens for any user."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Bad Randomness", "reason": "The mintToken function uses the `newRandom` function, which generates random numbers, and assigns them as the balance of the owner."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Access Control", "reason": "The mintToken function is publicly accessible, allowing unauthorized users to create arbitrary tokens for any user."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Typos Constructor", "reason": "The mintToken function has a typo constructor, where the balance of the owner is assigned with the random value, instead of adding the random value to the balance."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Token Devalue", "reason": "The mintToken function assigns the random value as the balance of the owner, which can be used to create arbitrary tokens for any user, leading to the loss of the owner's assets."}]}
}
Code: 
pragma solidity ^0.4.16;
contract owned {
    address public owner;
    function owned() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }
contract TokenERC20 {
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    uint256 public totalSupply;
    uint256 initialSupply=5000000000;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    function TokenERC20(
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;                
        name = "FIB";                                   
        symbol = "FIB";                               
    }
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);                               
        require (balanceOf[_from] >= _value);               
        require (balanceOf[_to] + _value > balanceOf[_to]); 
        require(!frozenAccount[_from]);                     
        require(!frozenAccount[_to]);                       
        balanceOf[_from] -= _value;                         
        balanceOf[_to] += _value;                           
        emit Transfer(_from, _to, _value);
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        emit Transfer(0, this, mintedAmount);
        emit Transfer(this, target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
    }
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        balanceOf[msg.sender] -= _value;            
        totalSupply -= _value;                      
        emit Burn(msg.sender, _value);
        return true;
    }
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from][msg.sender]);    
        balanceOf[_from] -= _value;                         
        allowance[_from][msg.sender] -= _value;             
        totalSupply -= _value;                              
        emit Burn(_from, _value);
        return true;
    }
}
contract FIBToken is owned, TokenERC20 {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function FIBToken(
    ) TokenERC20() public {}
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        emit Transfer(0, this, mintedAmount);
        emit Transfer(this, target, mintedAmount);
        sellPrice = 600;
        buyPrice = 1300;
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable public {
        uint amount = msg.value / buyPrice;               
        require(balanceOf[this] >= amount);               
        balanceOf[msg.sender] += amount;                   
        balanceOf[this] -= amount;                         
        emit Transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) public {
        require(msg.sender != 0x0);                       
        balanceOf[this] += amount;                         
        balanceOf[msg.sender] -= amount;                   
        if (msg.sender.balance < amount) {                
            sellPrice = 600;                           
        } else if (msg.sender.balance >= amount) {        
            sellPrice = 1300;                          
        }
        buyPrice = sellPrice;                          
        emit Transfer(msg.sender, this, amount);              
    }
}
Output Formatting requirement:
{
    "output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "The mintToken function has an integer overflow that allows the owner to set the balance of an arbitrary user to any value."}]}
    {"output_list": [{"function_name": "mintToken", "vulnerability": "Wrong Logic", "reason": "The mintToken function allows the owner to set the balance of an arbitrary user to any value, which can be used to create arbitrary tokens for any user."}]}
    {"output_list": [{"function_name": "mintToken", "vulnerability": "Bad Randomness", "reason": "The mintToken function uses the `newRandom` function, which generates random numbers, and assigns them as the balance of the owner."}]}
    {"output_list": [{"function_name": "mintToken", "vulnerability": "Access Control", "reason": "The mintToken function is publicly accessible, allowing unauthorized users to create arbitrary tokens for any user."}]}
    {"output_list": [{"function_name": "mintToken", "vulnerability": "Typos Constructor", "reason": "The mintToken function has a typo constructor, where the balance of the owner is assigned with the random value, instead of adding the random value to the balance."}]}
    {"output_list": [{"function_name": "mintToken", "vulnerability": "Token Devalue", "reason": "The mintToken function assigns the random value as the balance of the owner, which can be used to create arbitrary tokens for any user, leading to the loss of the owner's assets."}]}
}
Code: 
pragma solidity ^0.4.16;
contract owned {
    address public owner;
    function owned() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }
contract TokenERC20 {
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    function TokenERC20(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;                
        name = tokenName;                                   
        symbol = tokenSymbol;                               
    }
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);                               
        require (balanceOf[_from] >= _value);               
        require (balanceOf[_to] + _value > balanceOf[_to]); 
        require(!frozenAccount[_from]);                     
        require(!frozenAccount[_to]);                       
        balanceOf[_from] -= _value;                         
        balanceOf[_to] += _value;                           
        emit Transfer(_from, _to, _value);
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        _transfer(this, target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
    }
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        balanceOf[msg.sender] -= _value;            
        totalSupply -= _value;                      
        emit Burn(msg.sender, _value);
        return true;
    }
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from][msg.sender]);    
        balanceOf[_from] -= _value;                         
        allowance[_from][msg.sender] -= _value;             
        totalSupply -= _value;                              
        emit Burn(_from, _value);
        return true;
    }
}
contract FIBToken is owned, TokenERC20 {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function FIBToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable public {
        uint amount = msg.value / buyPrice;               
        require(balanceOf[this] >= amount);               
        require(!frozenAccount[msg.sender]);           
        balanceOf[msg.sender] += amount;                   
        balanceOf[this] -= amount;                         
        emit Transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) public {
        require(!frozenAccount[msg.sender]);           
        balanceOf[msg.sender] += amount;                   
        balanceOf[this] -= amount;                         
        if (msg.sender.balance < amount) {                
            sellPrice = 600;                           
        } else if (msg.sender.balance >= amount) {        
            sellPrice = 1300;                          
        }
        buyPrice = sellPrice;                          
        emit Transfer(msg.sender, this, amount);              
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
    }
}
Output Formatting requirement:
{
    "output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "The mintToken function has an integer overflow that allows the owner to set the balance of an arbitrary user to any value."}]}
    {"output_list": [{"function_name": "mintToken", "vulnerability": "Wrong Logic", "reason": "The mintToken function allows the owner to set the balance of an arbitrary user to any value, which can be used to create arbitrary tokens for any user."}]}
    {"output_list": [{"function_name": "mintToken", "vulnerability": "Bad Randomness", "reason": "The mintToken function uses the `newRandom` function, which generates random numbers, and assigns them as the balance of the owner."}]}
    {"output_list": [{"function_name": "mintToken", "vulnerability": "Access Control", "reason": "The mintToken function is publicly accessible, allowing unauthorized users to create arbitrary tokens for any user."}]}
    {"output_list": [{"function_name": "mintToken", "vulnerability": "Typos Constructor", "reason": "The mintToken function has a typo constructor, where the balance of the owner is assigned with the random value, instead of adding the random value to the balance."}]}
    {"output_list": [{"function_name": "mintToken", "vulnerability": "Token Devalue", "reason": "The mintToken function assigns the random value as the balance of the owner, which can be used to create arbitrary tokens for any user, leading to the loss of the owner's assets."}]}
}
Code: 
pragma solidity ^0.4.16;
contract owned {
    address public owner;
    function owned() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }
contract TokenERC20 {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    function TokenERC20(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        decimals = 18;
        totalSupply = initialSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;                
        name = tokenName;                                   
        symbol = tokenSymbol;                               
    }
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);                               
        require (balanceOf[_from] >= _value);               
        require (balanceOf[_to] + _value > balanceOf[_to]); 
        require(!frozenAccount[_from]);                     
        require(!