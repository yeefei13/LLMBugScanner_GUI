{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "The mintToken function has an integer overflow that allows the owner to set the balance of an arbitrary user to any value."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "The mintToken function has an integer overflow that allows the owner to set the balance of an arbitrary user to any value."}, {"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "The mintToken function has an integer overflow that allows the owner to set the balance of an arbitrary user to zero."}]}
{"output_list": [{"function_name": "buy", "vulnerability": "Wrong Logic", "reason": "The buy function always uses the buyPrice set in the contract, but never checks if the user has enough balance."}]}
{"output_list": [{"function_name": "sell", "vulnerability": "Bad Randomness", "reason": "The sell function uses the sellPrice set in the contract, but never checks if the user has earned enough before selling."}]}
{"output_list": [{"function_name": "burn", "vulnerability": "Integer Overflow", "reason": "The burn function has an integer overflow that allows the owner to set the balance of the user to zero."}]}
{"output_list": [{"function_name": "burnFrom", "vulnerability": "Integer Overflow", "reason": "The burnFrom function has an integer overflow that allows the owner to set the balance of the user to zero, while also allowing the user to burn a token of any value."}]}
}
Code: 
pragma solidity ^0.4.16;
contract Ownable {
    address public owner;
    function Ownable() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
contract GoodTimeCoin is owned, StandardToken, Ownable {
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        _transfer(0, this, mintedAmount);
        _transfer(this, target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable public {
        require(!frozenAccount[msg.sender]);           
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) public {
        require(!frozenAccount[msg.sender]);           
        require(this.balance >= amount * sellPrice);      
        _transfer(msg.sender, this, amount);              
        msg.sender.transfer(amount * sellPrice);          
    }
}
contract owned {
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        _transfer(0, this, mintedAmount);
        _transfer(this, target, mintedAmount);
        frozenAccount[target] = true;
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
}
contract tokenRecipient 
{ 
    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; 
}
contract StandardToken {
    string public name;                   
    string public symbol;               
    uint8 public decimals = 18;            
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    function StandardToken(uint256 initialSupply, string tokenName, string tokenSymbol) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;                
        name = tokenName;                                   
        symbol = tokenSymbol;                               
    }
    function _transfer(address _from, address _to, uint _value) {
        require(_to != 0x0);
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        require(!frozenAccount[_from]);
        require(!frozenAccount[_to]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
    }
    function transfer(address _to, uint256 _value) public returns (bool success) 
{ 
    _transfer(msg.sender, _to, _value);
    return true;
}
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) 
{
    require(_value <= allowance[_from][msg.sender]);    
    allowance[_from][msg.sender] -= _value;
    _transfer(_from, _to, _value);
    return true;
}
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        balanceOf[msg.sender] -= _value;            
        totalSupply -= _value;                      
        Burn(msg.sender, _value);
        return true;
    }
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from][msg.sender]);    
        balanceOf[_from] -= _value;                         
        allowance[_from][msg.sender] -= _value;             
        totalSupply -= _value;                              
        Burn(_from, _value);
        return true;
    }
}
contract MyAdvancedToken is StandardToken, Ownable {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        _transfer(0, this, mintedAmount);
        _transfer(this, target, mintedAmount);
        frozenAccount[target] = true;
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable public {
        require(!frozenAccount[msg.sender]);           
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) public {
        require(!frozenAccount[msg.sender]);           
        require(this.balance >= amount * sellPrice);      
        _transfer(msg.sender, this, amount);              
        msg.sender.transfer(amount * sellPrice);          
    }
}
contract MyAdvancedToken is MyAdvancedToken, Ownable {
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        require(!frozenAccount[target]);
        return super.mintToken(target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        require(frozenAccount[target]);
        return super.freezeAccount(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        require(!frozenAccount[msg.sender]);
        return super.setPrices(newSellPrice, newBuyPrice);
    }
    function buy() payable public {
        require(!frozenAccount[msg.sender]);
        return super.buy();
    }
    function sell(uint256 amount) public {
        require(!frozenAccount[msg.sender]);
        return super.sell(amount);
    }
}
contract owned {
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        require(!frozenAccount[target]);
        return super.mintToken(target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        return super.setPrices(newSellPrice, newBuyPrice);
    }
    function buy() payable public {
        require(!frozenAccount[msg.sender]);
        return super.buy();
    }
    function sell(uint256 amount) public {
        require(!frozenAccount[msg.sender]);
        return super.sell(amount);
    }
}
contract tokenRecipient 
{ 
    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; 
}
contract StandardToken {
    string public name;                   
    string public symbol;               
    uint8 public decimals = 18;            
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    function StandardToken(uint256 initialSupply, string tokenName, string tokenSymbol) public {
        balanceOf[msg.sender] = initialSupply;              
        totalSupply = initialSupply;                        
        name = tokenName;                                   
        symbol = tokenSymbol;                               
    }
    function _transfer(address _from, address _to, uint _value) {
        require(_to != 0x0);
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        require(!frozenAccount[_from]);
        require(!frozenAccount[_to]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
    }
    function transfer(address _to, uint256 _value) public returns (bool success) 
{ 
    _transfer(msg.sender, _to, _value);
    return true;
}
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) 
{
    require(_value <= allowance[_from][msg.sender]);    
    allowance[_from][msg.sender] -= _value;
    _transfer(_from, _to, _value);
    return true;
}
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        balanceOf[msg.sender] -= _value;            
        totalSupply -= _value;                      
        Burn(msg.sender, _value);
        return true;
    }
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from][msg.sender]);    
        balanceOf[_from] -= _value;                         
        allowance[_from][msg.sender] -= _value;             
        totalSupply -= _value;                              
        Burn(_from, _value);
        return true;
    }
}
contract Owned {
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        require(!frozenAccount[target]);
        return super.mintToken(target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        return super.setPrices(newSellPrice, newBuyPrice);
    }
    function buy() payable public {
        require(!frozenAccount[msg.sender]);
        return super.buy();
    }
    function sell(uint256 amount) public {
        require(!frozenAccount[msg.sender]);
        return super.sell(amount);
    }
}
contract GoodTimeCoin is owned, MyAdvancedToken {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        require(!frozenAccount[target]);
        return super.mintToken(target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable public {
        require(!frozenAccount[msg.sender]);
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) public {
        require(!frozenAccount[msg.sender]);
        require(this.balance >= amount * sellPrice);      
        _transfer(msg.sender, this, amount);              
        msg.sender.transfer(amount * sellPrice);          
    }
}
contract Owned {
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        require(!frozenAccount[target]);
        return super.mintToken(target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        return super.setPrices(newSellPrice, newBuyPrice);
    }
    function buy() payable public {
        require(!frozenAccount[msg.sender]);
        return super.buy();
    }
    function sell(uint256 amount) public {
        require(!frozenAccount[msg.sender]);
        return super.sell(amount);
    }
}
contract tokenRecipient 
{ 
    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; 
}
contract StandardToken {