{"output_list": [{"output_list": [{"function_name": "transfer", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transfer function allows an attacker to set an arbitrary user's balance to any value."}]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transfer function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transferFrom function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "receiveApproval", "vulnerability": "Integer Overflow", "reason": "Integer overflow in receiveApproval function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "distributeTokens", "vulnerability": "Integer Overflow", "reason": "Integer overflow in distributeTokens function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "Integer overflow in mintToken function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "freezeAccount", "vulnerability": "Integer Overflow", "reason": "Integer overflow in freezeAccount function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "setPrices", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setPrices function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "buy", "vulnerability": "Integer Overflow", "reason": "Integer overflow in buy function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "sell", "vulnerability": "Integer Overflow", "reason": "Integer overflow in sell function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transfer function allows an attacker to set an arbitrary user's balance to any value."}]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transferFrom function allows an attacker to set an arbitrary user's balance to any value."}]}
{"output_list": [{"function_name": "receiveApproval", "vulnerability": "Integer Overflow", "reason": "Integer overflow in receiveApproval function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "distributeTokens", "vulnerability": "Integer Overflow", "reason": "Integer overflow in distributeTokens function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "Integer overflow in mintToken function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "freezeAccount", "vulnerability": "Integer Overflow", "reason": "Integer overflow in freezeAccount function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "setPrices", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setPrices function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "buy", "vulnerability": "Integer Overflow", "reason": "Integer overflow in buy function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "sell", "vulnerability": "Integer Overflow", "reason": "Integer overflow in sell function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "receiveApproval", "vulnerability": "Integer Overflow", "reason": "Integer overflow in receiveApproval function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transfer function allows an attacker to set an arbitrary user's balance to any value."}]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transferFrom function allows an attacker to set an arbitrary user's balance to any value."}]}
{"output_list": [{"function_name": "distributeTokens", "vulnerability": "Integer Overflow", "reason": "Integer overflow in distributeTokens function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "Integer overflow in mintToken function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "freezeAccount", "vulnerability": "Integer Overflow", "reason": "Integer overflow in freezeAccount function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "setPrices", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setPrices function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transfer function allows an attacker to set an arbitrary user's balance to any value."}]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transferFrom function allows an attacker to set an arbitrary user's balance to any value."}]}
{"output_list": [{"function_name": "receiveApproval", "vulnerability": "Integer Overflow", "reason": "Integer overflow in receiveApproval function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "distributeTokens", "vulnerability": "Integer Overflow", "reason": "Integer overflow in distributeTokens function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "Integer overflow in mintToken function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "freezeAccount", "vulnerability": "Integer Overflow", "reason": "Integer overflow in freezeAccount function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
]}
{"output_list": [{"function_name": "setPrices", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setPrices function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "buy", "vulnerability": "Integer Overflow", "reason": "Integer overflow in buy function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "sell", "vulnerability": "Integer Overflow", "reason": "Integer overflow in sell function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "receiveApproval", "vulnerability": "Integer Overflow", "reason": "Integer overflow in receiveApproval function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transfer function allows an attacker to set an arbitrary user's balance to any value."}]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transferFrom function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "receiveApproval", "vulnerability": "Integer Overflow", "reason": "Integer overflow in receiveApproval function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "distributeTokens", "vulnerability": "Integer Overflow", "reason": "Integer overflow in distributeTokens function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "transfer", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transfer function allows an attacker to set an arbitrary user's balance to any value."}]}
{"output_list": [{"function_name": "transferFrom", "vulnerability": "Integer Overflow", "reason": "Integer overflow in transferFrom function allows an attacker to set an arbitrary user's balance to any value."}]}
{"output_list": [{"function_name": "receiveApproval", "vulnerability": "Integer Overflow", "reason": "Integer overflow in receiveApproval function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "distributeTokens", "vulnerability": "Integer Overflow", "reason": "Integer overflow in distributeTokens function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "Integer overflow in mintToken function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
{"output_list": [{"function_name": "freezeAccount", "vulnerability": "Integer Overflow", "reason": "Integer overflow in freezeAccount function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
]}
{"output_list": [{"function_name": "setPrices", "vulnerability": "Integer Overflow", "reason": "Integer overflow in setPrices function allows an attacker to set an arbitrary user's balance to any value."}]}
]}
contract owned {
    address public owner;
    function owned() {
        owner = msg.sender;
    }
    modifier onlyOwner {
        if (msg.sender != owner) throw;
        _;
    }
    function transferOwnership(address newOwner) onlyOwner {
        owner = newOwner;
    }
}
contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
contract token {
    string public standard = 'T10 0.1';
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    function token(
        uint256 initialSupply,
        string tokenName,
        uint8 decimalUnits,
        string tokenSymbol
        ) {
        balanceOf[msg.sender] = initialSupply;              
        totalSupply = initialSupply;                        
        name = tokenName;                                   
        symbol = tokenSymbol;                               
        decimals = decimalUnits;                           
    }
    function _transfer(address _from, address _to, uint _value) internal {
        if (_to == 0x0) throw;                               
        if (balanceOf[_from] < _value) throw;                 
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  
        if (_value > 0 && allowance[_from][msg.sender] < _value) throw;   
        balanceOf[_from] -= _value;                         
        balanceOf[_to] += _value;                          
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
    }
    function transfer(address _to, uint256 _value) {
        _transfer(msg.sender, _to, _value);
    }
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (_value < allowance[_from][msg.sender]) allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    function approve(address _spender, uint256 _value)
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function burn(uint256 _value) returns (bool success) {
        if (balanceOf[msg.sender] < _value) throw;           
        balanceOf[msg.sender] -= _value;                     
        totalSupply -= _value;                               
        Burn(msg.sender, _value);
        return true;
    }
    function burnFrom(address _from, uint256 _value) returns (bool success) {
        if (balanceOf[_from] < _value) throw;                
        if (_value > allowance[_from][msg.sender]) throw;    
        balanceOf[_from] -= _value;                          
        allowance[_from][msg.sender] -= _value;             
        totalSupply -= _value;                              
        Burn(_from, _value);
        return true;
    }
}
contract CCindexToken is owned, token {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function CCindexToken(
        uint256 initialSupply,
        string tokenName,
        uint8 decimalUnits,
        string tokenSymbol
        ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}
    function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) throw;           
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  
        if (frozenAccount[msg.sender]) throw;                
        balanceOf[msg.sender] -= _value;                     
        balanceOf[_to] += _value;                            
        Transfer(msg.sender, _to, _value);                   
        if(_value > 0){
            if(balanceOf[msg.sender] == 0){
                addresses[indexes[msg.sender]] = addresses[lastIndex];
                indexes[addresses[lastIndex]] = indexes[msg.sender];
                indexes[msg.sender] = 0;
                delete addresses[lastIndex];
                lastIndex--;
            }
            if(indexes[_to]==0){
               