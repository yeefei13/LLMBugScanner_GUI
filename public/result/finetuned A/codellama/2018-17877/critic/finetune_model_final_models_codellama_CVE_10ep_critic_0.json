{"output_list": [{"function_name": "Great Assignment", "vulnerability": "Integer Overflow", "description": "The getHeartPrice function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'RoundHeart' variable, allowing the attacker to steal assets."}],
[{"function_name": "getMyRevenue", "vulnerability": "Integer Overflow", "description": "The getMyRevenue function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'MyreferredRevenue' variable, allowing the attacker to steal assets."}],
[{"function_name": "getTimeLeft", "vulnerability": "Integer Overflow", "description": "The getTimeLeft function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'RoundTime' variable, allowing the attacker to steal assets."}],
[{"function_name": "updateTimer", "vulnerability": "Integer Overflow", "description": "The updateTimer function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'RoundTime' variable, allowing the attacker to steal assets."}],
[{"function_name": "buyHeart", "vulnerability": "Integer Overflow", "description": "The buyHeart function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'RoundETH' variable, allowing the attacker to steal assets."}],
[{"function_name": "luckybuy", "vulnerability": "Integer Overflow", "description": "The luckybuy function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'LuckybuyTracker_' variable, allowing the attacker to steal assets."}],
[{"function_name": "RoundETH", "vulnerability": "Integer Overflow", "description": "The RoundETH function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'RoundETH' variable, allowing the attacker to steal assets."}],
[{"function_name": "RoundPayMask", "vulnerability": "Integer Overflow", "description": "The RoundPayMask function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'RoundPayMask' variable, allowing the attacker to steal assets."}],
[{"function_name": "RoundMyPayMask", "vulnerability": "Integer Overflow", "description": "The RoundMyPayMask function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'RoundMyPayMask' variable, allowing the attacker to steal assets."}],
[{"function_name": "RoundMyHeart", "vulnerability": "Integer Overflow", "description": "The RoundMyHeart function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'RoundMyHeart' variable, allowing the attacker to steal assets."}],
[{"function_name": "RoundHeart", "vulnerability": "Integer Overflow", "description": "The RoundHeart function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'RoundHeart' variable, allowing the attacker to steal assets."}],
[{"function_name": "RoundETH", "vulnerability": "Integer Overflow", "description": "The RoundETH function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'RoundETH' variable, allowing the attacker to steal assets."}],
[{"function_name": "RoundTime", "vulnerability": "Integer Overflow", "description": "The RoundTime function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'RoundTime' variable, allowing the attacker to steal assets."}],
[{"function_name": "Round", "vulnerability": "Integer Overflow", "description": "The Round function in the Greedy smart contract allows an attacker to set an arbitrary value for the 'Round' variable, allowing the attacker to steal assets."}]
]
}

pragma solidity ^0.4.18;

contract owned {
    address public owner;
    function owned() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
contract TokenERC20 {
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;                        
        name = tokenName;                                   
        symbol = tokenSymbol;                               
    }
    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);                               
        require(balanceOf[_from] >= _value);               
        require(balanceOf[_to] + _value > balanceOf[_to]); 
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;                         
        balanceOf[_to] += _value;                      
        Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender {
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   
        balanceOf[msg.sender] -= _value;            
        totalSupply -= _value;                      
        Burn(msg.sender, _value);
        return true;
    }
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                
        require(_value <= allowance[_from][msg.sender]);    
        balanceOf[_from] -= _value;                         
        allowance[_from][msg.sender] -= _value;             
        totalSupply -= _value;                              
        Burn(_from, _value);
        return true;
    }
}
contract MyAdvancedToken is owned, TokenERC20 {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function MyAdvancedToken(uint256 initialSupply, string tokenName, string tokenSymbol) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);                               
        require (balanceOf[_from] >= _value);               
        require (balanceOf[_to] + _value > balanceOf[_to]); 
        require(!frozenAccount[_from]);                     
        require(!frozenAccount[_to]);                       
        balanceOf[_from] -= _value;                         
        balanceOf[_to] += _value;                           
        Transfer(_from, _to, _value);
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        Transfer(0, owner, mintedAmount);
        Transfer(owner, target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable public {
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) public {
        require(this.balance >= amount * sellPrice);      
        _transfer(msg.sender, this, amount);              
        msg.sender.transfer(amount * sellPrice);        
    }
}
contract Cryptonite is MyAdvancedToken {
    uint256 public sellPrice = 0.0001 ether;
    uint256 public buyPrice = 0.0002 ether;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function Cryptonite(uint256 initialSupply, string tokenName, string tokenSymbol) MyAdvancedToken(initialSupply, tokenName, tokenSymbol) public {}
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        Transfer(0, owner, mintedAmount);
        Transfer(owner, target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    function buy() payable public {
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) public {
        require(this.balance >= amount * sellPrice);      
        _transfer(msg.sender, this, amount);              
        msg.sender.transfer(amount * sellPrice);        
    }
}
uminate(string _name, string _symbol, uint8 _decimals, uint _totalSupply) public {
        name = _name;                   
        symbol = _symbol;                 
        decimals = _decimals;           
        totalSupply = _totalSupply;        
    }
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value);
        require(balances[_to] + _value >= balances[_to]); 
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balances[_from] >= _value);                
        require(allowed[_from][msg.sender] >= _value);    
        require(balances[_to] + _value >= balances[_to]);  
        balances[_to] += _value;                         
        balances[_from] -= _value;                       
        allowed[_from][msg.sender] -= _value;             
        Transfer(_from, _to, _value);
        return true;
    }
    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}
contract CryptoniteToken is Cryptonite {
    uint256 public sellRate = 450;
    uint256 public buyRate = 450;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function CryptoniteToken(uint256 initialSupply, string tokenName, string tokenSymbol) Cryptonite(initialSupply, tokenName, tokenSymbol, initialSupply) public {}
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);                               
        require (balances[_from] >= _value);               
        require (balances[_to] + _value >= balances[_to]); 
        require(!frozenAccount[_from]);                     
        require(!frozenAccount[_to]);                       
        balances[_from] -= _value;                         
        balances[_to] += _value;                           
        Transfer(_from, _to, _value);
    }
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balances[target] += mintedAmount;
        Transfer(0, owner, mintedAmount);
        Transfer(owner, target, mintedAmount);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        FrozenFunds(target, freeze);
    }
    function setPrices(uint256 newSellRate, uint256 newBuyRate) onlyOwner public {
        sellRate = newSellRate;
        buyRate = newBuyRate;
    }
    function buy() payable public {
        uint amount = msg.value / buyRate;               
        _transfer(this, msg.sender, amount);              
    }
    function sell(uint256 amount) public {
        require(this.balance >= amount * sellRate);      
        _transfer(msg.sender, this, amount);              
        msg.sender.transfer(amount * sellRate);        
    }
}
contract CryptoniteCash is CryptoniteToken {
    uint256 public sellRate = 450;
    uint256 public buyRate = 450;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function CryptoniteCash(uint256 initialSupply, string tokenName, string tokenSymbol) CryptoniteToken(initialSupply, tokenName, tokenSymbol) public {}
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);                               
        require (balances[_from] >= _value);               
        require (balances[_to] + _value >= balances[_to]); 
        require(!frozenAccount[_from]);                     
        require(!frozenAccount[_to]);                       
        balances[_from] -= _value;                         
        balances[_to] += _value