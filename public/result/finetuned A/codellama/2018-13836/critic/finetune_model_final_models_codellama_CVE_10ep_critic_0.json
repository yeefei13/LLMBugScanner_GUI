{"output_list": [{"function_name": "transfer", "vulnerability": "Integer Overflow", "description": "The transfer function does not check if the sender's balance is sufficient before subtracting the transfer amount from the sender's balance. This can lead to integer overflow if the sender's balance is very large."}]}
{"function_name": "transferFrom", "vulnerability": "Integer Overflow", "description": "The transferFrom function does not check if the sender's balance is sufficient before subtracting the transfer amount from the sender's balance. This can lead to integer overflow if the sender's balance is very large."}]}
{"function_name": "approve", "vulnerability": "Integer Overflow", "description": "The approve function does not check if the spender's balance is sufficient before adding the approval amount to the spender's balance. This can lead to integer overflow if the spender's balance is very large."}]}
{"function_name": "allowance", "vulnerability": "Integer Overflow", "description": "The allowance function does not check if the spender's balance is sufficient before subtracting the allowance amount from the spender's balance. This can lead to integer overflow if the spender's balance is very large."}]}
{"output_list": [
    {
        "function_name": "<function_name_1>",
        "auditor_idx" : 0,
        "vulnerability": "<short_vulnera_desc_1>",
        "criticism": "<criticism for reasoning and explanation for scoring>",
        "correctness": "<0~9>,
        "severity": "<0~9>,
        "profitability": "<0~9>"
    },
    {
        "function_name": "<function_name_2>",
        "auditor_idx" : 0,
        "vulnerability": "<short_vulnera_desc_2>",
        "criticism": "<criticism for reasoning and explanation for scoring>",
        "correctness": "<0~9>,
        "severity": "<0~9>,
        "profitability": "<0~9>"
    }
]
}
```
### Solution:
pragma solidity ^0.4.18;
contract Token {
    function balanceOf(address _account) public constant returns (uint256 balance);
    function transfer(address _to, uint256 _value) public returns (bool success);
}

contract RocketCoin {
    string public constant symbol = "XRC";
    string public constant name = "Rocket Coin";
    uint public constant decimals = 18;
    uint public constant totalSupply = 1000000 * 10 ** decimals;
    address owner;
    bool airDropStatus = true;
    uint airDropAmount = 300 * 10 ** decimals;
    uint airDropGasPrice = 20 * 10 ** 9;
    mapping (address => bool) participants;
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    function RocketCoin() public {
        owner = msg.sender;
        balances[owner] = totalSupply;
        Transfer(address(0), owner, totalSupply);
    }
    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
    function transfer(address _to, uint256 _amount) public returns (bool success) {
        require(balances[msg.sender] >= _amount && _amount > 0);
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
        Transfer(msg.sender, _to, _amount);
        return true;
    }
    function multiTransfer(address[] _addresses, uint[] _amounts) public returns (bool success) {
        require(_addresses.length <= 100 && _addresses.length == _amounts.length);
        uint totalAmount;
        for (uint a = 0; a < _amounts.length; a++) {
            totalAmount += _amounts[a];
        }
        require(totalAmount > 0 && balances[msg.sender] >= totalAmount);
        balances[msg.sender] -= totalAmount;
        for (uint b = 0; b < _addresses.length; b++) {
            if (_amounts[b] > 0) {
                balances[_addresses[b]] += _amounts[b];
                Transfer(msg.sender, _addresses[b], _amounts[b]);
            }
        }
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {
        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0);
        balances[_from] -= _amount;
        allowed[_from][msg.sender] -= _amount;
        balances[_to] += _amount;
        Transfer(_from, _to, _amount);
        return true;
    }
    function approve(address _spender, uint256 _amount) public returns (bool success) {
        allowed[msg.sender][_spender] = _amount;
        Approval(msg.sender, _spender, _amount);
        return true;
    }
    function setupAirDrop(bool _status, uint _amount, uint _Gwei) public returns (bool success) {
        require(msg.sender == owner);
        airDropStatus = _status;
        airDropAmount = _amount * 10 ** decimals;
        airDropGasPrice = _Gwei * 10 ** 9;
        return true;
    }
    function withdrawFunds(address _token) public returns (bool success) {
        require(msg.sender == owner);
        if (_token == address(0)) {
            owner.transfer(this.balance);
        }
        else {
            Token ERC20 = Token(_token);
            ERC20.transfer(owner, ERC20.balanceOf(this));
        }
        return true;
    }
}

contract CryptoBankerToken {
    string public constant _myTokeName = "CryptoBanker Token";
    string public constant _mySymbol = "CBT";
    uint public constant _myInitialSupply