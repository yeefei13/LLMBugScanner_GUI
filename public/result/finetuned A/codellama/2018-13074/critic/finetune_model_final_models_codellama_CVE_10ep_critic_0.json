{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"function_name": "mintToken", "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"function_name": "mintToken", "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
{"output_list": [{"function_name": "mintToken", "auditor_idx": 0, "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow."}]}
]}
uminate public totalSupply = 10;
tstring public name = "CryptoCash";
tuint8 public decimals = 18;
tstring public symbol = "CASH";
taddress public owner;
tmapping (address => uint256) public balanceOf;
tmapping (address => mapping (address => uint256)) public allowance;
tevent Transfer(address indexed from, address indexed to, uint256 value);
tevent Burn(address indexed from, uint256 value);
tfunction CryptoCash() public {
ttowner = msg.sender;
ttbalanceOf[msg.sender] = 10000000000000000000000000000;
tttotalSupply = 100000000000000000000000000000;
t}
tfunction _transfer(address _from, address _to, uint _value) internal {
ttrequire(_to != 0x0);
ttrequire(balanceOf[_from] >= _value);
ttrequire(balanceOf[_to] + _value > balanceOf[_to]);
ttuint previousBalances = balanceOf[_from] + balanceOf[_to];
ttbalanceOf[_from] -= _value;
ttbalanceOf[_to] += _value;
tttTransfer(_from, _to, _value);
ttassert(balanceOf[_from] + balanceOf[_to] == previousBalances);
t}
tfunction transfer(address _to, uint256 _value) public {
tt_transfer(msg.sender, _to, _value);
t}
tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
ttrequire(_value <= allowance[_from][msg.sender]);     
ttallowance[_from][msg.sender] -= _value;
tt_transfer(_from, _to, _value);
ttreturn true;
t}
tfunction approve(address _spender, uint256 _value) public
ttreturns (bool success) {
ttallowance[msg.sender][_spender] = _value;
ttreturn true;
t}
tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)
ttpublic
tttreturns (bool success) {
tttokenRecipient spender = tokenRecipient(_spender);
ttif (approve(_spender, _value)) {
tttspender.receiveApproval(msg.sender, _value, this, _extraData);
tttreturn true;
tt}
t}
tfunction burn(uint256 _value) public returns (bool success) {
ttrequire(balanceOf[msg.sender] >= _value);   
ttbalanceOf[msg.sender] -= _value;            
tttotalSupply -= _value;                      
ttBurn(msg.sender, _value);
ttreturn true;
t}
tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {
ttrequire(balanceOf[_from] >= _value);                
ttrequire(_value <= allowance[_from][msg.sender]);    
ttbalanceOf[_from] -= _value;                         
ttallowance[_from][msg.sender] -= _value;             
tttotalSupply -= _value;                              
ttBurn(_from, _value);
ttreturn true;
t}
}
contract Cash is owned, TokenERC20 {
tuint256 public sellPrice;
tuint256 public buyPrice;
tmapping (address => bool) public frozenAccount;
tevent FrozenFunds(address target, bool frozen);
tfunction Cash(
t) TokenERC20() public {}
tfunction _transfer(address _from, address _to, uint _value) internal {
ttrequire (_to != 0x0);                               
ttrequire (balanceOf[_from] >= _value);               
ttrequire (balanceOf[_to] + _value > balanceOf[_to]); 
ttrequire(!frozenAccount[_from]);                     
ttrequire(!frozenAccount[_to]);                       
ttuint previousBalances = balanceOf[_from] + balanceOf[_to];
ttbalanceOf[_from] -= _value;
ttbalanceOf[_to] += _value;
ttTransfer(_from, _to, _value);
ttassert(balanceOf[_from] + balanceOf[_to] == previousBalances);
t}
tfunction transfer(address _to, uint256 _value) public {
tt_transfer(msg.sender, _to, _value);
t}
tfunction transferFrom(address _from, address _to, uint256