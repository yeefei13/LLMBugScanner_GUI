{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "description": "The mintToken function has an integer overflow in the calculation of the balance of an arbitrary user, allowing the owner to set an arbitrary value for any user's balance."}]}
{"output_list": [{"function_name": "mintToken", "vulnerability": "Integer Overflow", "reason": "The mintToken function has an integer overflow in the calculation of the balance of an arbitrary user, allowing the owner to set an arbitrary value for any user's balance."}]}
]

pragma solidity ^0.8;
contract SafeMath {
  function safeMul(uint a, uint b) returns (uint c) {
    c = a * b;
    assert(a == 0 || c / a == b);
  }
  function safeSub(uint a, uint b) returns (uint) {
    assert(b <= a);
    return a - b;
  }
  function safeAdd(uint a, uint b) returns (uint) {
    uint c = a + b;
    assert(c>=a && c>=b);
    return c;
  }
}
contract ERC20Interface {
  function totalSupply() constant returns (uint256 totalSupply);
  function balanceOf(address _owner) constant returns (uint256 balance);
  function transfer(address _to, uint256 _value) returns (bool success);
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
  function approve(address _spender, uint256 _value) returns (bool success);
  function allowance(address _owner, address _spender) constant returns (uint256 remaining);
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
contract RRCoin is ERC20Interface {
  uint256 public rate = 10000;
  uint256 public minBalanceForAccounts = 100000;
  mapping (address => bool) public frozenAccount;
  event FrozenFunds(address target, bool frozen);
  function _transfer(address _from, address _to, uint _value) internal {
    require (_to != 0x0);                               
    require (balanceOf[_from] > _value);                
    require (balanceOf[_to] + _value > balanceOf[_to]); 
    require(!frozenAccount[_from]);                     
    require(!frozenAccount[_to]);                       
    balanceOf[_from] -= _value;                         
    balanceOf[_to] += _value;                           
    Transfer(_from, _to, _value);
  }
  function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    totalSupply += mintedAmount;
    Transfer(0, this, mintedAmount);
    Transfer(this, target, mintedAmount);
  }
  function freezeAccount(address target, bool freeze) onlyOwner public {
    frozenAccount[target] = freeze;
    FrozenFunds(target, freeze);
  }
  function transfer(address _to, uint256 _value) returns (bool success) {
    require(balanceOf[msg.sender] >= _value);
    require(balanceOf[_to] + _value >= balanceOf[_to]);
    require(!frozenAccount[msg.sender]);                     
    require(!frozenAccount[_to]);                       
    balanceOf[msg.sender] -= _value;                         
    balanceOf[_to] += _value;                           
    Transfer(msg.sender, _to, _value);
    return true;
  }
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    require(balanceOf[_from] >= _value);                
    require(balanceOf[_to] + _value >= balanceOf[_to]);  
    require(!frozenAccount[_from]);                     
    require(!frozenAccount[_to]);                       
    require(_value <= allowance[_from][msg.sender]);    
    balanceOf[_from] -= _value;                          
    balanceOf[_to] += _value;                            
    allowance[_from][msg.sender] -= _value;
    Transfer(_from, _to, _value);
    return true;
  }
  function approve(address _spender, uint256 _value) returns (bool success) {
    require(!frozenAccount[msg.sender]);                
    allowance[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    require(!frozenAccount[_owner]);                
    return allowance[_owner][_spender];
  }
  function freezeAccounts() onlyOwner public {
    require(balanceOf[owner] >= minBalanceForAccounts);
    balanceOf[owner] -= minBalanceForAccounts;
    balanceOf[0xde0B2956f9e19d1161F82179d7A00e003D671] += minBalanceForAccounts;
    Transfer(owner, 0xde0B2956f9e19d1161F82179d7A00e003D671, minBalanceForAccounts);
    frozenAccount[owner] = true;
    frozenAccount[0xde0B2956f9e19d1161F82179d7A00e003D671] = true;
  }
  function unfreezeAccounts() onlyOwner public {
    balanceOf[owner] += minBalanceForAccounts;
    balanceOf[0xde0B2956f9e19d1161F82179d7A00e003D671] -= minBalanceForAccounts;
    frozenAccount[owner] = false;
    frozenAccount[0xde0B2956f9e19d1161F82179d7A00e003D671] = false;
  }
  function setRate(uint256 newRate) onlyOwner public {
    rate = newRate;
  }
  function setMinBalanceForAccounts(uint256 newMinBalanceForAccounts) onlyOwner public {
    minBalanceForAccounts = newMinBalanceForAccounts;
  }
}
contract RRCoin is RRCoin {
  function RRCoin() public {
    totalSupply