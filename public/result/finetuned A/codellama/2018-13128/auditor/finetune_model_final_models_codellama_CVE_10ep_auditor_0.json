{"output_list": [{"function_name": "mint", "vulnerability": "Integer Overflow", "reason": "Integer overflow in mint function allows an attacker to set any user's balance to any value."}]}
{"output_list": [{"function_name": "mint", "vulnerability": "Integer Overflow", "reason": "Integer overflow in mint function allows an attacker to set any user's balance to any value."}]}
]}
contract ETYCrowdAuction {
    ETY public token = new ETY(this);
    uint256 private constant MAX_UINT256 = 2 ** 256 - 1;
    function mint(address _holder, uint256 _value) public {
        require(_value <= MAX_UINT256);
        token.mint(_holder, _value);
    }
}
contract ETYPreSale is ETYCrowdAuction {
    uint256 public rate = 1000;
    uint256 public wei = 0;
    uint256 public totalTokens = 0;
    uint256 public totalWei = 0;
    uint256 public totalBonus = 0;
    uint256 public totalSold = 0;
    uint256 public totalReserved = 0;
    uint256 public totalDistributed = 0;
    uint256 public totalRemaining = 0;
    uint256 public value;
    uint256 public minValue = 10000;
    uint256 public maxValue = 10000;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Burn(address indexed _owner, uint256 _value);
    function ETYPreSale(uint256 _value, uint256 _minValue, uint256 _maxValue) public {
        require(_value > 0);
        require(_minValue <= _maxValue);
        value = _value;
        minValue = _minValue;
        maxValue = _maxValue;
    }
    function setRate(uint256 _rate) public {
        require(msg.sender == ico);
        rate = _rate;
    }
    function setWei(uint256 _wei) public {
        require(msg.sender == ico);
        wei = _wei;
    }
    function mintTokens(address _investor, uint256 _value) public {
        require(_value > 0);
        require(_value <= MAX_UINT256);
        require(totalTokens + _value > totalTokens);
        uint256 bonusValue = 0;
        if(_value >= minValue && _value <= maxValue) {
            uint256 bonus = _value * rate;
            if(bonus > 0) {
                bonusValue = bonus;
                totalBonus += bonusValue;
            }
        }
        uint256 tokens = _value + bonusValue;
        token.mint(_investor, tokens);
        totalTokens += tokens;
        totalWei += _value;
        totalReserved += tokens;
        Transfer(0x0, _investor, tokens);
    }
    function setDistribution(uint256 _value) public {
        require(msg.sender == ico);
        totalDistributed = _value;
        totalRemaining = totalTokens - totalDistributed;
    }
    function withdrawToOwner(uint256 _amountWei) public {
        require(msg.sender == ico);
        require(_amountWei > 0);
        require(_amountWei <= wei);
        uint256 amount = _amountWei * 1e18;
        uint256 bonusValue = 0;
        if(amount >= minValue && amount <= maxValue) {
            uint256 bonus = amount * rate;
            if(bonus > 0) {
                bonusValue = bonus;
                totalBonus += bonusValue;
            }
        }
        uint256 tokens = amount + bonusValue;
        require(tokens > 0);
        require(tokens <= totalRemaining);
        wei -= _amountWei;
        token.transfer(msg.sender, tokens);
        totalDistributed += tokens;
        Transfer(0x0, msg.sender, tokens);
    }
}
contract ETYCrowdSale is ETYPreSale {
    uint256 public startTime = 1521772800;
    uint256 public endTime = 1524350400;
    bool public isFinalized = false;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function ETYCrowdSale(uint256 _value, uint256 _minValue, uint256 _maxValue) ETYPreSale(_value, _minValue, _maxValue) public {}
    function setStartTime(uint256 _startTime) public {
        require(msg.sender == ico);
        startTime = _startTime;
    }
    function setEndTime(uint256 _endTime) public {
        require(msg.sender == ico);
        endTime = _endTime;
    }
    function mintTokens(address _investor, uint256 _value) public {
        require(msg.sender == ico);
        super.mintTokens(_investor, _value);
    }
    function setRate(uint256 _rate) public {
        require(msg.sender == ico);
        super.setRate(_rate);
    }
    function setWei(uint256 _wei) public {
        require(msg.sender == ico);
        super.setWei(_wei);
    }
    function setDistribution(uint256 _value) public {
        require(msg.sender == ico);
        super.setDistribution(_value);
    }
    function setFinalized() public {
        require(msg.sender == ico);
        require(!isFinalized);
        isFinalized = true;
    }
    function mint(address _holder, uint256 _value) public {
        require(msg.sender == ico);
        super.mint(_holder, _value);
    }
    function mintTokens(address _investor, uint256 _value) public {
        require(msg.sender == ico);
        super.mintTokens(_investor, _value);
    }
    function withdrawToOwner(uint256 _amountWei) public {
        require(msg.sender == ico);
        super.withdrawToOwner(_amountWei);
    }
    function mint(address _holder, uint256 _value) public {
        require(msg.sender == ico);
        super.mint(_holder, _value);
    }
    function setRate(uint256 _rate) public {
        require(msg.sender == ico);
        super.setRate(_rate);
    }
    function setWei(uint256 _wei) public {
        require(msg.sender == ico);
        super.setWei(_wei);
    }
    function setDistribution(uint256 _value) public {
        require(msg.sender == ico);
        super.setDistribution(_value);
    }
    function setFinalized() public {
        require(msg.sender == ico);
        require(!isFinalized);
        isFinalized = true;
    }
    function mintTokens(address _investor, uint256 _value) public {
        require(msg.sender == ico);
        super.mintTokens(_investor, _value);
    }
    function mint(address _holder, uint256 _value) public {
        require(msg.sender == ico);
        super.mint(_holder, _value);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        require(target != 0x0);
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
    }
    function getBalance(address _investor) public constant returns (uint256) {
        return token.balanceOf(_investor);
    }
    function getTokens(address _investor) public constant returns (uint256) {
        return token.balanceOf(_investor);
    }
    function getTokens(address _investor) public constant returns (uint256) {
        return token.balanceOf(_investor);
    }
    function getRate() public constant returns (uint256) {
        return rate;
    }
    function getWei() public constant returns (uint256) {
        return wei;
    }
    function getMinValue() public constant returns (uint256) {
        return minValue;
    }
    function getMaxValue() public constant returns (uint256) {
        return maxValue;
    }
    function getTotalTokens() public constant returns (uint256) {
        return totalTokens;
    }
    function getTotalWei() public constant returns (uint256) {
        return totalWei;
    }
    function getTotalBonus() public constant returns (uint256) {
        return totalBonus;
    }
    function getTotalSold() public constant returns (uint256) {
        return totalSold;
    }
    function getTotalReserved() public constant returns (uint256) {
        return totalReserved;
    }
    function getTotalDistributed() public constant returns (uint256) {
        return totalDistributed;
    }
    function getTotalRemaining() public constant returns (uint256) {
        return totalRemaining;
    }
    function isFrozen(address _investor) public constant returns (bool) {
        return frozenAccount[_investor];
    }
    function withdrawToOwner(uint256 _amountWei) public {
        require(msg.sender == ico);
        super.withdrawToOwner(_amountWei);
    }
}
contract ETYToken is ETY {
    uint256 public rate = 1000;
    uint256 public wei = 0;
    uint256 public totalTokens = 0;
    uint256 public totalWei = 0;
    uint256 public totalBonus = 0;
    uint256 public totalSold = 0;
    uint256 public totalReserved = 0;
    uint256 public totalDistributed = 0;
    uint256 public totalRemaining = 0;
    uint256 public value;
    uint256 public minValue = 100000;
    uint256 public maxValue = 1000000;
    uint256 public bonusValue = 0;
    mapping (address => bool) public frozenAccount;
    event FrozenFunds(address target, bool frozen);
    function ETYToken(address _ico) public {
        ico = _ico;
    }
    function mintTokens(address _investor, uint256 _value) public {
        require(_value > 0);
        require(_value <= MAX_UINT256);
        require(totalTokens + _value > totalTokens);
        uint256 bonus = 0;
        if(_value >= minValue && _value <= maxValue) {
            bonus = _value * rate;
            if(bonus > 0) {
                bonusValue = bonus;
                totalBonus += bonusValue;
            }
        }
        uint256 tokens = _value + bonusValue;
        require(tokens > 0);
        require(tokens <= totalRemaining);
        totalTokens += tokens;
        totalWei += _value;
        totalReserved += tokens;
        totalDistributed += tokens;
        totalRemaining -= tokens;
        token.mint(_investor, tokens);
        Transfer(0x0, _investor, tokens);
    }
    function setRate(uint256 _rate) public {
        require(msg.sender == ico);
        rate = _rate;
    }
    function setWei(uint256 _wei) public {
        require(msg.sender == ico);
        wei = _wei;
    }
    function setDistribution(uint256 _value) public {
        require(msg.sender == ico);
        totalDistributed = _value;
        totalRemaining = totalTokens - totalDistributed;
    }
    function setFinalized() public {
        require(msg.sender == ico);
        require(!isFinalized);
        isFinalized = true;
    }
    function mint(address _holder, uint256 _value) public {
        require(msg.sender == ico);
        super.mint(_holder, _value);
    }
    function mintTokens(address _investor, uint256 _value) public {
        require(msg.sender == ico);
        super.mintTokens(_investor, _value);
    }
    function freezeAccount(address target, bool freeze) onlyOwner public {
        require(target != 0x0);
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
    }
    function getBalance(address _investor) public constant returns (uint256) {
        return token.balanceOf(_investor);
    }
    function getTokens(address _investor) public constant returns (uint256) {
        return token.balanceOf(_investor);
    }
    function getTokens(address _investor) public constant returns (uint256) {
        return token.balanceOf(_investor);
    }
    function getRate() public constant returns (uint256) {
        return rate;
    }
    function getWei() public constant returns (uint256) {
        return wei;
    }
    function getMinValue() public constant returns (uint256) {
        return minValue;
    }
    function getMaxValue() public constant returns (uint256) {
        return maxValue;
    }
    function getTotalTokens() public constant returns (uint256) {
        return totalTokens;
    }
    function getTotalWei() public constant returns (uint256) {
        return totalWei;
    }
    function getTotalBonus() public constant returns (uint256) {
        return totalBonus;
    }
    function getTotalSold() public constant returns (uint256) {
        return totalSold;
    }
    function getTotalReserved() public constant returns (uint256) {
        return totalReserved;
    }
    function getTotalDistributed() public constant returns (uint256) {
        return totalDistributed;
    }
    function getTotalRemaining() public constant returns (uint256) {
        return totalRemaining;
    }
    function isFrozen(address _investor) public constant returns (bool) {
        return frozenAccount[_investor];
    }
}
contract ETYCrowdSalePreSale is ETYPreSale {
    uint256 public rate = 10000;
    uint256 public wei = 0;
    uint256 public totalTokens = 0;
    uint256 public totalWei = 0;
    uint256 public totalBonus = 0;
    uint256 public totalSold = 0;
    uint256 public totalReserved = 0;
    uint256 public totalDistributed = 0;
    uint256 public totalRemaining = 0;
    uint256 public value;
    uint256 public minValue = 100000;
    uint256 public maxValue = 100000;
    uint256 public bonusValue